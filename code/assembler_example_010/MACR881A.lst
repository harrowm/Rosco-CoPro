Sections:
00: ".text" (0-8F)


Source: "MACR881A.asm"
                            	     1: *******************************************************************************
                            	     2: *	MACRO CODE TO DRIVE MC68881 AS A PERIPHERAL WITH M68000 FAMILY	      *
                            	     3: *	  www.ATARI-FORUM.com	SFP004 Developer's Kit			      *
                            	     4: *	  (c)2019 tcat <thomas.kral@email.cz>	(c)1987 Motorola AN947_REV0   *
                            	     5: *******************************************************************************
                            	     6: *
                            	     7: * Changes to get this to work on the rosco_m68k VSAM MOT sytax assembler
                            	     8: * Malcolm Harrow March 2024
                            	     9: *	.nlist
                            	    10: *******************************************************************************
                            	    11: *	THESE ARE THE INSTRUCTION BIT PATTERN EQUATES
                            	    12: *******************************************************************************
                            	    13: 
                            	    14: FMOVE	 EQU	   $00	     ;MOVE
                            	    15: FINT	 EQU	   $01	     ;INTEGER PART
                            	    16: FSINH	 EQU	   $02	     ;SINH
                            	    17: FSQRT	 EQU	   $04	     ;SQUARE ROOT
                            	    18: FLOGNP1	 EQU	   $06	     ;LOGN (1+X)
                            	    19: FETOXM1	 EQU	   $08	     ;[(E**X)-1)]
                            	    20: FTANH	 EQU	   $09	     ;TANH
                            	    21: FATAN	 EQU	   $0A	     ;ARCTAN
                            	    22: FASIN	 EQU	   $0C	     ;ARCSIN
                            	    23: FATANH	 EQU	   $0D	     ;ARCTANH
                            	    24: FSIN	 EQU	   $0E	     ;SINE
                            	    25: FTAN	 EQU	   $0F	     ;TANGENT
                            	    26: FETOX	 EQU	   $10	     ;E**X
                            	    27: FTWOTOX	 EQU	   $11	     ;2**X
                            	    28: FTENTOX	 EQU	   $12	     ;10**X
                            	    29: FLOGN	 EQU	   $14	     ;LOGN
                            	    30: FLOG10	 EQU	   $15	     ;LOG10
                            	    31: FLOG2	 EQU	   $16	     ;LOG2
                            	    32: FABS	 EQU	   $18	     ;ABSOLUTE VALUE
                            	    33: FCOSH	 EQU	   $19	     ;COSH
                            	    34: FNEG	 EQU	   $1A	     ;NEGATE
                            	    35: FACOS	 EQU	   $1C	     ;ARCCOS
                            	    36: FCOS	 EQU	   $1D	     ;COSINET
                            	    37: FGETEXP	 EQU	   $1E	     ;GET EXPONENT
                            	    38: FGETMAN	 EQU	   $1F	     ;GET MANTISSA
                            	    39: FDIV	 EQU	   $20	     ;DIVIDE
                            	    40: FMOD	 EQU	   $21	     ;MODULO REMAINDER
                            	    41: FADD	 EQU	   $22	     ;ADD
                            	    42: FMUL	 EQU	   $23	     ;MULTIPLY
                            	    43: FSGLDIV	 EQU	   $24	     ;SINGLE DIVIDE
                            	    44: FREM	 EQU	   $25	     ;IEEE REMAINDER
                            	    45: FSCALE	 EQU	   $26	     ;SCALE EXPONENT
                            	    46: FSGLMUL	 EQU	   $27	     ;SINGLE MULTIPLY
                            	    47: FSUB	 EQU	   $28	     ;SUBTRACT
                            	    48: FCMP	 EQU	   $38	     ;COMPARE
                            	    49: FTST	 EQU	   $3A	     ;TEST
                            	    50: FSINCOS	 EQU	   $30	     ;SIMULTANEOUS FP SINE AND COSINE
                            	    51: 
                            	    52: *******************************************************************************
                            	    53: *     THESE ARE THE NUEMONICS USED AS THE CONDITION CODES FOR THE	      *
                            	    54: *	 BRANCH INSTRUCTIONS						      *
                            	    55: *******************************************************************************
                            	    56: EQ	 EQU	   $01	     ;EQUAL
                            	    57: NEQ	 EQU	   $0E	     ;NOT EQUAL
                            	    58: GT	 EQU	   $12	     ;GREATER THAN
                            	    59: NGT	 EQU	   $1D	     ;NOT GREATER THAN
                            	    60: GE	 EQU	   $13	     ;GREATER THAN OR EQUAL
                            	    61: NGE	 EQU	   $1C	     ;NOT (GREATER THAN OR EQUAL)
                            	    62: LT	 EQU	   $14	     ;LESS THAN
                            	    63: NLT	 EQU	   $1B	     ;NOT LES THAN
                            	    64: LE	 EQU	   $15	     ;LESS THAN OR EQUAL
                            	    65: NLE	 EQU	   $1A	     ;NOT (LESS THAN OR EQUAL)
                            	    66: GL	 EQU	   $16	     ;GREATER OR LESS THAN
                            	    67: NGL	 EQU	   $19	     ;NOT (GREATER OR LESS THAN)
                            	    68: GLE	 EQU	   $17	     ;GREATER OR LESS OR EQUAL
                            	    69: NGLE	 EQU	   $18	     ;NOT (GREATER OR LESS OR EQUAL)
                            	    70: OGT	 EQU	   $02	     ;ORDERED GREATER THAN
                            	    71: ULE	 EQU	   $0D	     ;UNORDERED OR LESS OR EQUAL
                            	    72: OGE	 EQU	   $03	     ;ORDERED GREATER THAN OR EQUAL
                            	    73: ULT	 EQU	   $0C	     ;UNORDERED OR LESS THAN
                            	    74: OLT	 EQU	   $04	     ;ORDERED LESS THAN
                            	    75: UGE	 EQU	   $0B	     ;UNORDERED OR GREATER OR EQUAL
                            	    76: OLE	 EQU	   $05	     ;ORDERED LESS THAN OR EQUAL
                            	    77: UGT	 EQU	   $0A	     ;UNORDERED OR GREATER
                            	    78: OGL	 EQU	   $06	     ;ORDERED GREATER OR LESS THAN
                            	    79: UEQ	 EQU	   $09	     ;UNORDERED OR EQUAL
                            	    80: OR	 EQU	   $07	     ;ORDERED
                            	    81: UN	 EQU	   $08	     ;UNORDERED
                            	    82: F	 EQU	   $00	     ;FALSE (NEVER)
                            	    83: T	 EQU	   $0F	     ;TRUE (ALWAYS)
                            	    84: SF	 EQU	   $10	     ;SIGNALING FALSE (NEVER)
                            	    85: ST	 EQU	   $1F	     ;SIGNALING TRUE (ALWAYS)
                            	    86: SEQ	 EQU	   $11	     ;SIGNALING EQUAL
                            	    87: SNEQ	 EQU	   $1E	     ;SIGNALING NOT EQUAL
                            	    88:  
                            	    89: *******************************************************************************
                            	    90: *	 THESE EQUATES REPRESENT THE OFFSETS FOR THE BASE ADDRESS OF	      *
                            	    91: *	   THE MC68881 INTERFACE REGISTERS!				      *
                            	    92: *******************************************************************************
                            	    93: *MC68881	 EQU	   $FFFA40   ;MC68881 BASE ADDRESS
                            	    94: MC68881	 EQU	   $FFC000   ;MC68881 BASE ADDRESS
                            	    95: RESPONSE EQU	   $00	     ;RESPONSE REGISTER
                            	    96: SAVE	 EQU	   $04	     ;SAVE REGISTER
                            	    97: RESTORE	 EQU	   $06	     ;RESTORE REGISTER
                            	    98: COMMAND	 EQU	   $0A	     ;COMMAND REGISTER
                            	    99: COND	 EQU	   $0E	     ;CONDITION REGISTER
                            	   100: OPER	 EQU	   $10	     ;OPERAND REGISTER
                            	   101: REGSEL	 EQU	   $14	     ;REGISTER SELECT
                            	   102: CONTROL	 EQU	   $9000     ;MC68881 CONTROL REGISTER
                            	   103: STATUS	 EQU	   $8800     ;MC68881 STATUS REGISTER
                            	   104: IADDRESS EQU	   $8400     ;MC68881 INSTRUCTION ADDRESS REGISTER
                            	   105: TFBIT	 EQU	   $0	     ;TRUE/FALSE BIT OF THE RESPONSE REGISTER
                            	   106: 
                            	   107: 
                            	   108: *******************************************************************************
                            	   109: *	 THESE EQUATES REPRESENT THE FLOATING POINT REGISTERS		      *
                            	   110: *******************************************************************************
                            	   111: FP0	 EQU	   $00	     ;FLOATING POINT REGISTER #0
                            	   112: FP1	 EQU	   $01	     ;	 "	 "	  "   #1
                            	   113: FP2	 EQU	   $02	     ;	 "	 "	  "   #2
                            	   114: FP3	 EQU	   $03	     ;	 "	 "	  "   #3
                            	   115: FP4	 EQU	   $04	     ;FLOATING POINT REGISTER #4
                            	   116: FP5	 EQU	   $05	     ;	  "	 "	  "   #5
                            	   117: FP6	 EQU	   $06	     ;	  "	 "	  "   #6
                            	   118: FP7	 EQU	   $07	     ;	  "	 "	  "   #7
                            	   119: ******************************************************************************
                            	   120: *									     *
                            	   121: *	 MC68881 SINGLE PRECISION FP-REG. VALUE TO MEMORY OPERATION	     *
                            	   122: *									     *
                            	   123: *	 REGMEMS   INSTRUCTION,FPM,<EA>					     *
                            	   124: *									     *
                            	   125: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FMOVE)	     *
                            	   126: *		 FPM= SOURCE FP REGISTER				     *
                            	   127: *		 <EA>= DESTINATION ADDRESSING MODE			     *
                            	   128: *									     *
                            	   129: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   130: *									     *
                            	   131: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   132: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   133: *									     *
                            	   134: ******************************************************************************
                            	   135: 	 macro	 REGMEMS
                            	   136: 	 if !\?4			;IS <EA>=  INDIRECT WITH INDEXING
                            	   137: 	 MOVE.W #$6400+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   138: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   139: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   140: 					;DATA
                            	   141: 	 MOVE.L MC68881+OPER,\3		;LOW ORDER WORD
                            	   142: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   143: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   144: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   145: 	 MOVE.W #$6400+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   146: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   147: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   148: 					;DATA
                            	   149: 	 MOVE.L MC68881+OPER,\3,\4	;SINGLE PRECISION DATA TRANSFER
                            	   150: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   151: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   152: 	 endif
                            	   153: 	 endm
                            	   154: ******************************************************************************
                            	   155: *									     *
                            	   156: *	 MC68881 LONG WORD LENGTH FP-REG. VALUE TO MEMORY OPERATION	     *
                            	   157: *									     *
                            	   158: *	 REGMEMW   INSTRUCTION,FPM,<EA>					     *
                            	   159: *									     *
                            	   160: *   INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FMOVE)			     *
                            	   161: *		 FPM= SOURCE FP REGISTER				     *
                            	   162: *		 <EA>= DESTINATION ADDRESSING MODE			     *
                            	   163: *									     *
                            	   164: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   165: *									     *
                            	   166: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   167: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   168: *									     *
                            	   169: ******************************************************************************
                            	   170: 	 macro	 REGMEML
                            	   171: 	 if !\?4			;IS <EA>=INDIRECT WITH INDEXING
                            	   172: 	 MOVE.W #$6000+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   173: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   174: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   175: 					;DATA
                            	   176: 	 MOVE.L MC68881+OPER,\3		;LONG WORD TRANSFER
                            	   177: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   178: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   179: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   180: 	 MOVE.W #$6000+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   181: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   182: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   183: 					;DATA
                            	   184: 	 MOVE.L MC68881+OPER,\3,\4	;LONG WORD TRANSFER
                            	   185: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   186: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   187: 	 endif
                            	   188: 	 endm
                            	   189: ******************************************************************************
                            	   190: *									     *
                            	   191: *	 MC68881 WORD LENGTH FP-REG. VALUE TO MEMORY OPERATION		     *
                            	   192: *									     *
                            	   193: *	 REGMEMW   INSTRUCTION,FPM,<EA>					     *
                            	   194: *									     *
                            	   195: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FMOVE)	     *
                            	   196: *		 FPM= SOURCE FP REGISTER				     *
                            	   197: *		 <EA>= DESTINATION ADDRESSING MODE			     *
                            	   198: *									     *
                            	   199: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   200: *									     *
                            	   201: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   202: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   203: *									     *
                            	   204: ******************************************************************************
                            	   205: 	 macro	 REGMEMW
                            	   206: 	 if !\?4			;IS <EA>=INDIRECT WITH INDEXING
                            	   207: 	 MOVE.W #$7000+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   208: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   209: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   210: 					;DATA
                            	   211: 	 MOVE.W MC68881+OPER,\3		;WORD DATA TRANSFER
                            	   212: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   213: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   214: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   215: 	 MOVE.W #$7000+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   216: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   217: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   218: 					;DATA
                            	   219: 	 MOVE.W MC68881+OPER,\3,\4	;WORD DATA TRANSFER
                            	   220: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   221: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   222: 	 endif
                            	   223: 	 endm
                            	   224: ******************************************************************************
                            	   225: *									     *
                            	   226: *	 MC68881 BYTE LENGTH FP-REG. VALUE TO MEMORY OPERATION		     *
                            	   227: *									     *
                            	   228: *	 REGMEMB   INSTRUCTION,FPM,<EA>					     *
                            	   229: *									     *
                            	   230: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FMOVE)	     *
                            	   231: *		 FPM= SOURCE FP REGISTER				     *
                            	   232: *		 <EA>= DESTINATION ADDRESSING MODE			     *
                            	   233: *									     *
                            	   234: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   235: *									     *
                            	   236: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   237: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   238: *									     *
                            	   239: ******************************************************************************
                            	   240: 	 macro	 REGMEMB
                            	   241: 	 if !\?4			;IS <EA>=INDIRECT WITH INDEXING
                            	   242: 	 MOVE.W #$7800+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   243: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   244: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   245: 					;DATA
                            	   246: 	 MOVE.B MC68881+OPER,\3		;BYTE DATA TRANSFER
                            	   247: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   248: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   249: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   250: 	 MOVE.W #$7800+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   251: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   252: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   253: 					;DATA
                            	   254: 	 MOVE.B MC68881+OPER,\3,\4	;BYTE DATA TRANSFER
                            	   255: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   256: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   257: 	 endif
                            	   258: 	 endm
                            	   259: ******************************************************************************
                            	   260: *									     *
                            	   261: *	 MC68881 DOUBLE PRECISION FP-REG. VALUE TO MEMORY OPERATION	     *
                            	   262: *									     *
                            	   263: *	 REGMEMD   INSTRUCTION,FPM,<EA>					     *
                            	   264: *									     *
                            	   265: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FMOVE)	     *
                            	   266: *		 FPM= SOURCE FP REGISTER				     *
                            	   267: *		 <EA>= AN ADDRESS REGISTER, SURROUNDED BY PARENTHESIS,	     *
                            	   268: *		       CONTAINING THE PREVIOUSLY LOADED EFFECTIVE ADDRESS    *
                            	   269: *		       (I.E. (A0)).					     *
                            	   270: *									     *
                            	   271: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   272: *									     *
                            	   273: *	 VALID ADDRESSING MODES:  (AN)					     *
                            	   274: *									     *
                            	   275: ******************************************************************************
                            	   276: 	 macro	 REGMEMD
                            	   277: 	 MOVE.W #$7400+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   278: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   279: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   280: 					;DATA
                            	   281: 	 MOVE.L MC68881+OPER,\3		;HIGH ORDER LONG WORD
                            	   282: 	 MOVE.L MC68881+OPER,4\3	;LOW ORDER LONG WORD
                            	   283: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   284: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   285: 	 endm
                            	   286: ******************************************************************************
                            	   287: *									     *
                            	   288: *	 MC68881 EXTENDED PRECISION FP-REG. VALUE TO MEMORY OPERATION	     *
                            	   289: *									     *
                            	   290: *	 REGMEMX   INSTRUCTION,FPM,<EA>					     *
                            	   291: *									     *
                            	   292: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FMOVE)	     *
                            	   293: *		 FPM= SOURCE FP REGISTER				     *
                            	   294: *		 <EA>= AN ADDRESS REGISTER, SURROUNDED BY PARENTHESIS,	     *
                            	   295: *		       CONTAINING THE PREVIOUSLY LOADED EFFECTIVE ADDRESS    *
                            	   296: *		       (I.E. (A0)).					     *
                            	   297: *									     *
                            	   298: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   299: *									     *
                            	   300: *	 VALID ADDRESSING MODES:  (AN)					     *
                            	   301: *									     *
                            	   302: ******************************************************************************
                            	   303: 	 macro	 REGMEMX
                            	   304: 	 MOVE.W #$6800+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   305: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   306: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   307: 					;DATA
                            	   308: 	 MOVE.L MC68881+OPER,\3		;HIGH ORDER LONG WORD
                            	   309: 	 MOVE.L MC68881+OPER,4\3	;MID-ORDER
                            	   310: 	 MOVE.L MC68881+OPER,8\3	;LOW ORDER WORD
                            	   311: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   312: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   313: 	 endm
                            	   314: ******************************************************************************
                            	   315: *									     *
                            	   316: *	 MC68881 PACKED BCD FP-REG. VALUE TO MEMORY OPERATION		     *
                            	   317: *									     *
                            	   318: *	 REGMEMP   INSTRUCTION,FPM,<EA>,[K-FACTOR]			     *
                            	   319: *									     *
                            	   320: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   321: *		 FPM= SOURCE FP REGISTER				     *
                            	   322: *		 <EA>= DESTINATION ADDRESSING MODE			     *
                            	   323: *		 [K-FACTOR]= OPTIONAL IMMEDIATE K-FACTOR		     *
                            	   324: *									     *
                            	   325: *    ***IF [K-FACTOR] OPTION NOT TAKEN, THE K-FACTOR MUST BE PLACED IN D0!   *
                            	   326: *									     *
                            	   327: *	 VALID ADDRESSING MODES:  (AN)					     *
                            	   328: *									     *
                            	   329: ******************************************************************************
                            	   330: 	 macro	 REGMEMP
                            	   331: 	 if !\?4			;IS K-FACTOR IN REGISTER?
                            	   332: 	 MOVE.W #$7C00+(\2<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   333: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   334: 	 BEQ.S .NULCA\@			;REREAD UNTIL TRANSFER MAIN PROCESSOR REG
                            	   335: 	 MOVE.L D0,MC68881+OPER		;PASS K-FACTOR FROM D0
                            	   336: .AGAIN\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   337: 	 BEQ.S .AGAIN\@			;REREAD UNTIL EVALUATE EFFECTIVE ADDRESS
                            	   338: 					;AND TRANSFER DATA
                            	   339: 	 MOVE.L MC68881+OPER,\3		;LOW ORDER LONG WORD
                            	   340: 	 MOVE.L MC68881+OPER,4\3	;MID-ORDER LONG WORD
                            	   341: 	 MOVE.L MC68881+OPER,8\3	;HIGH ORDER LONG WORD
                            	   342: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   343: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   344: 	 else				;IS K-FACTOR IN INSTRUCTION?
                            	   345: 	 MOVE.W #$6C00+(\2<<7)+\4,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   346: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   347: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EFFECTIVE ADDRESS
                            	   348: 					;AND TRANSFER DATA
                            	   349: 	 MOVE.L MC68881+OPER,\3		;LOW ORDER WORD
                            	   350: 	 MOVE.L MC68881+OPER,4\3	;MID-ORDER WORD
                            	   351: 	 MOVE.L MC68881+OPER,8\3	;HIGH ORDER WORD
                            	   352: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   353: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   354: 	 endif
                            	   355: 	 endm
                            	   356: ******************************************************************************
                            	   357: *									     *
                            	   358: *	 MC68881 BYTE IN MEMORY OR IN Dn TO FP-REG. OPERATION		     *
                            	   359: *									     *
                            	   360: *	 MEMREGB   INSTRUCTION,<EA>,FPN					     *
                            	   361: *									     *
                            	   362: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   363: *		 <EA>= SOURCE ADDRESSING MODE				     *
                            	   364: *		 FPN= DESTINATION REGISTER				     *
                            	   365: *									     *
                            	   366: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   367: *									     *
                            	   368: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   369: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   370: *									     *
                            	   371: *	 THE COMMENTED OUT CODE SHOWS HOW A USER MAY IMPLEMENT FSINCOS	     *
                            	   372: *	 IN A MEM. TO REG. TRANSFER USING THE FOLLOWING INSTRUCTION FORMAT:  *
                            	   373: *									     *
                            	   374: *	 MEMREGB INSTRUCTION,<EA>,FPN,FPQ	(FPQ= 2ND DESTINATION REG.)  *
                            	   375: *									     *
                            	   376: ******************************************************************************
                            	   377: 	 macro	 MEMREGB
                            	   378: 	 if \1 = 'FSINCOS'		;IS INSTRUCTION FSINCOS
                            	   379: 	 if !\?5			;IS INDEXING PART OF THE ADDR.MODE
                            	   380: 	 MOVE.W #$5800+(\4<<7)+\3+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   381: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   382: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   383: 					;DATA
                            	   384: 	 MOVE.B \2,MC68881+OPER		;BYTE DATA TRANSFER
                            	   385: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   386: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   387: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   388: 	 MOVE.W #$5800+(\5<<7)+\4+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   389: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   390: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   391: 					;DATA
                            	   392: 	 MOVE.B \2,\3,MC68881+OPER	;BYTE DATA TRANSFER
                            	   393: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   394: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   395: 	 endif
                            	   396: 	 else				;IS INSTRUCTION NOT FSINCOS
                            	   397: 	 if !\?4			;IS <EA>=INDIRECT WITH INDEXING
                            	   398: 	 MOVE.W #$5800+(\3<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   399: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   400: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   401: 					;DATA
                            	   402: 	 MOVE.B \2,MC68881+OPER		;MOVE DATA INTO OPERAND REGISTER
                            	   403: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   404: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   405: 	 else				;IS <EA>=NOT INDIRECT WITH INDEXING
                            	   406: 	 MOVE.W #$5800+(\4<<7)+\1,MC68881+COMMAND ;MEM. TO REG. OPERATION
                            	   407: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   408: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   409: 					;DATA
                            	   410: 	 MOVE.B \2,\3,MC68881+OPER	;BYTE DATA TRANSFER
                            	   411: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   412: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   413: 	 endif
                            	   414: 	 endif
                            	   415: 	 endm
                            	   416: ******************************************************************************
                            	   417: *									     *
                            	   418: *	 MC68881 WORD IN MEMORY OR IN Dn TO FP-REG. OPERATION		     *
                            	   419: *									     *
                            	   420: *	 MEMREGW   INSTRUCTION,<EA>,FPN					     *
                            	   421: *									     *
                            	   422: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   423: *		 <EA>= SOURCE ADDRESSING MODE				     *
                            	   424: *		 FPN= DESTINATION REGISTER				     *
                            	   425: *									     *
                            	   426: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   427: *									     *
                            	   428: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   429: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   430: *									     *
                            	   431: ******************************************************************************
                            	   432: 	 macro	 MEMREGW
                            	   433: 	 if !\?4			;IS <EA>=INDIRECT WITH INDEXING
                            	   434: 	 MOVE.W #$5000+(\3<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   435: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   436: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   437: 					;DATA
                            	   438: 	 MOVE.W \2,MC68881+OPER		;WORD DATA TO FP-REG.
                            	   439: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   440: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   441: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   442: 	 MOVE.W #$5000+(\4<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   443: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   444: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   445: 					;DATA
                            	   446: 	 MOVE.W \2,\3,MC68881+OPER	;WORD DATA TO FP REG.
                            	   447: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   448: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   449: 	 endif
                            	   450: 	 endm
                            	   451: ******************************************************************************
                            	   452: *									     *
                            	   453: *	 MC68881 LONG WORD IN MEMORY OR IN Dn TO FP-REG. OPERATION	     *
                            	   454: *									     *
                            	   455: *	 MEMREGL   INSTRUCTION,<EA>,FPN					     *
                            	   456: *									     *
                            	   457: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   458: *		 <EA>= SOURCE ADDRESSING MODE				     *
                            	   459: *		 FPN= DESTINATION REGISTER				     *
                            	   460: *									     *
                            	   461: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   462: *									     *
                            	   463: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   464: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   465: *									     *
                            	   466: ******************************************************************************
                            	   467: 	 macro	 MEMREGL
                            	   468: 	 if !\?4			;IS <EA>=INDIRECT WITH INDEXING
                            	   469: 	 MOVE.W #$4000+(\3<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   470: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   471: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   472: 					;DATA
                            	   473: 	 MOVE.L \2,MC68881+OPER		;LONG WORD DATA TO FP REG.
                            	   474: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   475: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   476: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   477: 	 MOVE.W #$4000+(\4<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   478: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   479: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   480: 					;DATA
                            	   481: 	 MOVE.L \2,\3,MC68881+OPER	;LONG WORD DATA TO FP REG.
                            	   482: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   483: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   484: 	 endif
                            	   485: 	 endm
                            	   486: ******************************************************************************
                            	   487: *									     *
                            	   488: *	 MC68881 SINGLE PRECISION VALUE MEMORY TO FP-REG. OPERATION	     *
                            	   489: *									     *
                            	   490: *	 MEMREGS   INSTRUCTION,<EA>,FPN					     *
                            	   491: *									     *
                            	   492: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   493: *		 <EA>= SOURCE ADDRESSING MODE				     *
                            	   494: *		 FPN= DESTINATION REGISTER				     *
                            	   495: *									     *
                            	   496: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   497: *									     *
                            	   498: *	 VALID ADDRESSING MODES:  DN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   499: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   500: *									     *
                            	   501: ******************************************************************************
                            	   502: 	 macro	 MEMREGS
                            	   503: 	 if !\?4			;IS <EA>=INDIRECT WITH INDEXING
                            	   504: 	 MOVE.W #$4400+(\3<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   505: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   506: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   507: 					;DATA
                            	   508: 	 MOVE.L \2,MC68881+OPER		;SINGLE PRECISION DATA TO FP REG.
                            	   509: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   510: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   511: 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	   512: 	 MOVE.W #$4400+(\4<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   513: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   514: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   515: 					;DATA
                            	   516: 	 MOVE.L \2,\3,MC68881+OPER	;SINGLE PRECISION DATA TO FP REG.
                            	   517: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   518: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   519: 	 endif
                            	   520: 	 endm
                            	   521: ******************************************************************************
                            	   522: *									     *
                            	   523: *	 MC68881 DOUBLE PRECISION VALUE MEMORY TO FP-REG. OPERATION	     *
                            	   524: *									     *
                            	   525: *	 MEMREGD   INSTRUCTION,<EA>,FPN					     *
                            	   526: *									     *
                            	   527: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   528: *		 <EA>= SOURCE ADDRESS REGISTER,SURROUNDED BY PARENTHEIS,     *
                            	   529: *		       CONTAINING THE PREVIOUSLY ENTERED ADDRESSING MODE     *
                            	   530: *		       (I.E. (AN)).					     *
                            	   531: *		 FPN= DESTINATION REGISTER				     *
                            	   532: *									     *
                            	   533: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   534: *									     *
                            	   535: *	 VALID ADDRESSING MODES:  (AN)					     *
                            	   536: *									     *
                            	   537: ******************************************************************************
                            	   538: 	 macro	 MEMREGD
                            	   539: 	 MOVE.W #$5400+(\3<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   540: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   541: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   542: 					;DATA
                            	   543: 	 MOVE.L \2,MC68881+OPER		;HIGH ORDER LONG WORD
                            	   544: 	 MOVE.L 4\2,MC68881+OPER	;LOW ORDER LONG WORD
                            	   545: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   546: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   547: 	 endm
                            	   548: ******************************************************************************
                            	   549: *									     *
                            	   550: *	 MC68881 EXTENDED PRECISION VALUE MEMORY TO FP-REG. OPERATION	     *
                            	   551: *									     *
                            	   552: *	 MEMREGX   INSTRUCTION,<EA>,FPN					     *
                            	   553: *									     *
                            	   554: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   555: *		 <EA>= SOURCE ADDRESS REGISTER,SURROUNDED BY PARENTHESIS,    *
                            	   556: *		       CONTAINING THE PREVIOUSLY ENTERED ADDRESSING MODE     *
                            	   557: *		       (I.E. (AN)).					     *
                            	   558: *		 FPN= DESTINATION REGISTER				     *
                            	   559: *									     *
                            	   560: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   561: *									     *
                            	   562: *	 VALID ADDRESSING MODES:  (AN)					     *
                            	   563: *									     *
                            	   564: *******************************************************************************
                            	   565: 	 macro	 MEMREGX
                            	   566: 	 MOVE.W #$4800+(\3<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   567: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   568: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   569: 					;DATA
                            	   570: 	 MOVE.L \2,MC68881+OPER		;HIGH ORDER LONG WORD
                            	   571: 
                            	   572: 	 MOVE.L 4\2,MC68881+OPER	;MID-ORDER LONG WORD
                            	   573: 	 MOVE.L 8\2,MC68881+OPER	;LOW ORDER LONG WORD
                            	   574: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   575: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   576: 	 endm
                            	   577: ******************************************************************************
                            	   578: *									     *
                            	   579: *	 MC68881 PACKED BCD VALUE MEMORY TO FP-REG. OPERATION		     *
                            	   580: *									     *
                            	   581: *	 MEMREGP   INSTRUCTION,<EA>,FPN					     *
                            	   582: *									     *
                            	   583: *	 WHERE:	 INSTRUCTION= FP INSTRUCTION NUEMONIC (I.E. FADD)	     *
                            	   584: *		 <EA>= SOURCE ADDRESS REGISTER,SURROUNDED BY PARENTHESIS,    *
                            	   585: *		       CONTAINING THE PREVIOUSLY ENTERED ADDRESSING MODE     *
                            	   586: *		       (I.E. (AN)).					     *
                            	   587: *		 FPN = DESTINATION REGISTER				     *
                            	   588: *									     *
                            	   589: *	 NO REGISTERS MODIFYED OR DESTROYED!				     *
                            	   590: *									     *
                            	   591: *	 VALID ADDRESSING MODES:  (AN)					     *
                            	   592: *									     *
                            	   593: ******************************************************************************
                            	   594: 	 macro	 MEMREGP
                            	   595: 	 MOVE.W #$4C00+(\3<<7)+\1,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	   596: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   597: 	 BEQ.S .NULCA\@			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	   598: 					;DATA
                            	   599: 	 MOVE.L \2,MC68881+OPER		;HIGH ORDER LONG WORD
                            	   600: 	 MOVE.L 4\2,MC68881+OPER	;MID-ORDER LONG WORD
                            	   601: 	 MOVE.L 8\2,MC68881+OPER	;LOW ORDER LONG WORD
                            	   602: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   603: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   604: 	 endm
                            	   605: ******************************************************************************
                            	   606: *									     *
                            	   607: *	 MC68881 FP-REG. TO FP-REG. OPERATION				     *
                            	   608: *									     *
                            	   609: *	 REGREG	  INSTRUCTION,FPM,FPN,FNQ				     *
                            	   610: *									     *
                            	   611: *	 WHERE:	 INSTRUCTION= NUEMONIC FOR THE FP INSTRUCTION (I.E. FADD)    *
                            	   612: *		 FPM= FP SOURCE REGISTER				     *
                            	   613: *		 FPN= FP DESTINATION REGISTER				     *
                            	   614: *		 FNQ= SECOND FP DESTINATION REGISTER FOR FSINCOS	     *
                            	   615: *									     *
                            	   616: *	 NO REGISTERS MODIFIED OR DESTROYED!				     *
                            	   617: *									     *
                            	   618: ******************************************************************************
                            	   619: 	 macro	 REGREG
                            	   620: 	 if \1 = 'FSINCOS'		;IF INSTR. IS FSINCOS DO THIS ROUTINE
                            	   621: 	 MOVE.W #(\2<<10)+(\4<<7)+\3+\1,MC68881+COMMAND	 ;REG. TO REG. FSINCOS
                            	   622: .NULCA\@: TST.B MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   623: 	 BMI.S .NULCA\@			;REREAD UNTIL NULL RELEASE (CA=0)
                            	   624: 	 else				;ROUTINE FOR ALL OTHER ARITHMETIC INSTRS.
                            	   625: 	 MOVE.W #(\2<<10)+(\3<<7)+\1,MC68881+COMMAND	;REG. TO REG. OPERATION
                            	   626: .NULCA\@: TST.B MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   627: 	 BMI.S .NULCA\@			;REREAD UNTIL NULL RELEASE (CA=0)
                            	   628: 	 endif
                            	   629: 	 endm
                            	   630: ******************************************************************************
                            	   631: *									     *
                            	   632: *	 MC68881 CONSTANT IN ROM TO FP-REG. OPERATION			     *
                            	   633: *									     *
                            	   634: *	 FMOVEROM  CC,FPN						     *
                            	   635: *									     *
                            	   636: *	 WHERE:	    CC = MC68881 CONSTANT				     *
                            	   637: *		   $00	     PI						     *
                            	   638: *		   $0B	     LOG10(2)					     *
                            	   639: *		   $0C	     E						     *
                            	   640: *		   $0D	     LOG2(E)					     *
                            	   641: *		   $0E	     LOG10(E)					     *
                            	   642: *		   $0F	     0.0					     *
                            	   643: *		   $30	     LOGN(2)					     *
                            	   644: *		   $31	     LOGN(10)					     *
                            	   645: *		   $32	     10^0					     *
                            	   646: *		   $33	     10^1					     *
                            	   647: *		   $34	     10^2					     *
                            	   648: *		   $35	     10^4					     *
                            	   649: *		   $36	     10^8					     *
                            	   650: *		   $37	     10^16					     *
                            	   651: *		   $38	     10^32					     *
                            	   652: *		   $39	     10^64					     *
                            	   653: *		   $3A	     10^128					     *
                            	   654: *		   $3B	     10^256					     *
                            	   655: *		   $3C	     10^512					     *
                            	   656: *		   $3D	     10^1024					     *
                            	   657: *		   $3E	     10^2048					     *
                            	   658: *		   $3F	     10^4096					     *
                            	   659: *		 FPN= FP DESTINATION REGISTER				     *
                            	   660: *									     *
                            	   661: *	 NO REGISTERS MODIFIED OR DESTROYED!				     *
                            	   662: *									     *
                            	   663: ******************************************************************************
                            	   664: 	 macro	 FMOVEROM
                            	   665: 	 MOVE.W #$5C00+(\2<<7)+\1,MC68881+COMMAND  ;REG. TO REG. OPERATION
                            	   666: .NULCA\@: TST.B MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   667: 	 BMI.S .NULCA\@			;REREAD UNTIL NULL RELEASE (CA=0)
                            	   668: 	 endm
                            	   669: *******************************************************************************
                            	   670: *									      *
                            	   671: *	 MC68881 CONDITIONAL BRANCH					      *
                            	   672: *									      *
                            	   673: *	 FBCC.<SIZE> CONDITION,ADDRESS					      *
                            	   674: *									      *
                            	   675: *	 WHERE:	 <SIZE>= ALLOWABLE BRANCH SIZES				      *
                            	   676: *		 CONDITION= CC, THE FLOATING POINT CONDITION (I.E. GT)	      *
                            	   677: *		 ADDRESS= BRANCH ADDRESS				      *
                            	   678: *									      *
                            	   679: *									      *
                            	   680: *	 REGISTERS MODIFIED OR DESTROYED: 0 1 2 3 4 5 6 7		      *
                            	   681: *					D X				      *
                            	   682: *					A				      *
                            	   683: *									      *
                            	   684: *******************************************************************************
                            	   685: 	 macro	 FBCC
                            	   686: 	 MOVE.W #\1,MC68881+COND	;BEGIN COPROCESSOR COMMUNICATION
                            	   687: .NOPASS\@: MOVE.W MC68881+RESPONSE,D0	;IS CA-BIT SET
                            	   688: 	 BMI.S .NOPASS\@		;REREAD UNTIL NULL RELEASE (CA=0)
                            	   689: 	 BTST #TFBIT,D0			;IS CONDITION TRUE
                            	   690: 	 BNE\! \2			;BRANCH IF CONDITION TRUE!
                            	   691: 	 endm
                            	   692: *******************************************************************************
                            	   693: *									      *
                            	   694: *	 MC68881 TEST FP CONDITION, DECREMENT, AND BRANCH		      *
                            	   695: *									      *
                            	   696: *	 FDBCC	 CONDITION,DN,ADDRESS					      *
                            	   697: *									      *
                            	   698: *	 WHERE:	 CONDITION= CC, FLOATING POINT CONDITION		      *
                            	   699: *		 DN= MAIN PROCESSOR DATA REGISTER TO BE DECREMENTED	      *
                            	   700: *		 ADDRESS= BRANCH ADDRESS				      *
                            	   701: *									      *
                            	   702: *	 REGISTERS MODIFIED OR DESTROYED: 0 1 2 3 4 5 6 7		      *
                            	   703: *					D X				      *
                            	   704: *					A				      *
                            	   705: *									      *
                            	   706: *******************************************************************************
                            	   707: 	 macro	 FDBCC
                            	   708: 	 MOVE.W #\1,MC68881+COND	;BEGIN COPROCESSOR COMMUNICATION
                            	   709: .NOPASS\@: MOVE.W MC68881+RESPONSE,D0	;IS CA-BIT SET
                            	   710: 	 BMI.S .NOPASS\@		;REREAD UNTIL NULL RELEASE (CA=0)
                            	   711: 	 BTST #TFBIT,D0			;IS CONDITION TRUE
                            	   712: 	 DBNE \2,\3			;SUBTRACT 1 FROM COUNTER UNTIL COUNTER
                            	   713: 					;EQUALS -1
                            	   714: 	 endm
                            	   715: *******************************************************************************
                            	   716: *									      *
                            	   717: *	 MC68881 CONDITIONAL SET					      *
                            	   718: *									      *
                            	   719: *	 FSCC CONDITION,ADDRESS						      *
                            	   720: *									      *
                            	   721: *	 WHERE:	 CONDITION= CC, FLOATING POINT CONDITION		      *
                            	   722: *		 ADDRESS= BRANCH ADDRESS				      *
                            	   723: *									      *
                            	   724: *	 REGISTERS MODIFIED OR DESTROYED: 0 1 2 3 4 5 6 7		      *
                            	   725: *					D X				      *
                            	   726: *					A				      *
                            	   727: *									      *
                            	   728: *******************************************************************************
                            	   729: 	 macro	FSCC
                            	   730: 	 MOVE.W #\1,MC68881+COND	;BEGIN COPROCESSOR COMMUNICATION
                            	   731: .NOPASS\@: MOVE.W MC68881+RESPONSE,D0	;IS CA-BIT SET
                            	   732: 	 BMI.S .NOPASS\@		;REREAD UNTIL NULL RELEASE (CA=0)
                            	   733: 	 BTST #TFBIT,D0			;IS CONDITION TRUE
                            	   734: 	 SNE \2				;SET BYTE AT POINTER(\2) TO 1'S IF
                            	   735: 					;CONDITION TRUE, IF CONDITION FALSE
                            	   736: 					;SET BYTE TO 0'S
                            	   737: 	 endm
                            	   738: ******************************************************************************
                            	   739: *									     *
                            	   740: *	 MC68881 FP MOVE MULTIPLE COPROCESSOR REGISTERS TO MEMORY	     *
                            	   741: *									     *
                            	   742: *	 FMOVEMRM FPR0,FPR1,FPR2,FPR3,FPR4,FPR5,FPR6,FPR7,<EA>,PREDECREMENT  *
                            	   743: *									     *
                            	   744: *	 WHERE:	 FPR0=(FP REG.#0)    1 IF SELECTED, 0 IF NOT		     *
                            	   745: *		 FPR1=(	  "   #1)    "		    "			     *
                            	   746: *		 FPR2=(	  "   #2)    "		    "			     *
                            	   747: *		 FPR3=(	  "   #3)    "		    "			     *
                            	   748: *		 FPR4=(	  "   #4)    "		    "			     *
                            	   749: *		 FPR5=(	  "   #5)    "		    "			     *
                            	   750: *		 FPR6=(	  "   #6)    "		    "			     *
                            	   751: *		 FPR7=(	  "   #7)    "		    "			     *
                            	   752: *		 <EA>= DESTINATION ADDRESSING MODE			     *
                            	   753: *		 PREDECREMENT=	Y (IF PREDECREMENT MODE IS BEING USED), OR   *
                            	   754: *				N (IF OTHER MODE IS BEING USED).	     *
                            	   755: *									     *
                            	   756: *	  REGISTERS MODIFIED OR DESTROYED: 0 1 2 3 4 5 6 7		     *
                            	   757: *					A  X				     *
                            	   758: *					D  X X X X			     *
                            	   759: *									     *
                            	   760: *	 VALID ADDRESSING MODES:  AN, -(AN), D(AN), D(AN,IX)		     *
                            	   761: *				  XXX.W, XXX.L				     *
                            	   762: *									     *
                            	   763: ******************************************************************************
                            	   764: 	 macro	 FMOVEMRM
                            	   765: 	 if \0 = 'Y'			;IS THE ADDRESSING MODE PREDECREMEN
                            	   766: *
                            	   767: *  THIS CODE IS FOR PREDECREMENT ADDRESSING MODE
                            	   768: *
                            	   769: 	 MOVE.W #$E000+%\8\7\6\5\4\3\2\1,MC68881+COMMAND    ;FP REGISTER BIT
                            	   770: 					;MASK INTO COMMAND REGISTER
                            	   771: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   772: 	 BEQ.S .NULCA\@			;REREAD UNTIL TRANSFER MULTIPLE REGS.
                            	   773: *
                            	   774: *   THIS CODE CALCULATES THE TOTAL # OF REGISTERS TO BE TRANSFERRED
                            	   775: *
                            	   776: 	 MOVEQ #\1+\2+\3+\4+\5+\6+\7+\8-1,D3
                            	   777: 
                            	   778: 	 TST.W MC68881+REGSEL		;READ REGISTER RESPONSE REGISTER
                            	   779: 	 MOVE.L MC68881+OPER,A0		;A0=ADDRESS OF THE OPERAND REG.
                            	   780: .AGAIN\@: MOVE.L (A0),D0		;LOAD HIGH ORDER WORDS
                            	   781: 	 MOVE.L (A0),D1			;LOAD MID ORDER WORDS
                            	   782: 	 MOVE.L (A0),D2			;LOAD LOW ORDER WORDS
                            	   783: 	 MOVEM.L D0-D2,\9		;STACK HIGH ORDER WORD IN LOW ORDER
                            	   784: 					;MEMORY AND LOW ORDER WORD IN HIGH
                            	   785: 					;ORDER MEMORY
                            	   786: 	 DBRA D3,.AGAIN\@		;HAVE ALL REGISTERS BEEN TRANSFERRED
                            	   787: 
                            	   788: 
                            	   789: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   790: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   791: 	 endif
                            	   792: 	 if \0 = 'N'			;IS ADDRESSING MODE NOT PREDECREMENT
                            	   793: ***************************************************************************
                            	   794: *
                            	   795: *	  THIS CODE IS FOR ALL VALID ADDRESSING MODES OTHER
                            	   796: *	  THAN PREDECREMENT
                            	   797: *
                            	   798: ***************************************************************************
                            	   799: 	 MOVE.W #$F000+%\1\2\3\4\5\6\7\8,MC68881+COMMAND    ;CP REGISTER BIT
                            	   800: 					;MASK AND START CP COMMUNICATION
                            	   801: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   802: 	 BEQ.S .NULCA\@			;REREAD UNTIL TRANSFER MULTIPLE REGS.
                            	   803: 	 MOVEQ.L #(\8+\7+\6+\5+\4+\3+\2+\1)*3-1,D0  ;COUNT REG. FOR DBRA STMT.
                            	   804: 	 TST.W MC68881+REGSEL		;READ REGISTER RESPONSE REGISTER
                            	   805: 	 LEA \9,A0			;SET UP A MEMORY POINTER
                            	   806: .AGAIN\@: MOVE.L MC68881+OPER,(A0)+	;LOAD DATA ON TO THE STACK
                            	   807: 	 DBRA D0,.AGAIN\@		;LOOP UNTIL ALL DATA IS LOADED
                            	   808: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   809: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   810: 	 endif
                            	   811: 	 endm
                            	   812: ******************************************************************************
                            	   813: *									     *
                            	   814: *	 MC68881 FP MOVE TO MULTIPLE COPROCESSOR REGISTERS FROM MEMORY	     *
                            	   815: *									     *
                            	   816: *	 FMOVEMMR <EA>,FPR0,FPR1,FPR2,FPR3,FPR4,FPR5,FPR6,FPR7,POSTINCREMENT *
                            	   817: *									     *
                            	   818: *	 WHERE:	 <EA>= DESTINATION ADDRESSING MODE			     *
                            	   819: *		 FPR0=(FP REG.#0)    1 IF SELECTED, 0 IF NOT		     *
                            	   820: *		 FPR1=(	  "   #1)    "		    "			     *
                            	   821: *		 FPR2=(	  "   #2)    "		    "			     *
                            	   822: *		 FPR3=(	  "   #3)    "		    "			     *
                            	   823: *		 FPR4=(	  "   #4)    "		    "			     *
                            	   824: *		 FPR5=(	  "   #5)    "		    "			     *
                            	   825: *		 FPR6=(	  "   #6)    "		    "			     *
                            	   826: *		 FPR7=(	  "   #7)    "		    "			     *
                            	   827: *		 POSTINCREMENT= Y (IF POST-INCREMENT MODE IS BEING USED)     *
                            	   828: *				N (IF OTHER VALID MODE IS BEING USED).	     *
                            	   829: *									     *
                            	   830: *	  REGISTERS MODIFIED OR DESTROYED: 0 1 2 3 4 5 6 7		     *
                            	   831: *					A  X				     *
                            	   832: *					D  X				     *
                            	   833: *									     *
                            	   834: *	 VALID ADDRESSING MODES:  AN, (AN)+, D(AN), D(AN,IX)		     *
                            	   835: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   836: *									     *
                            	   837: ******************************************************************************
                            	   838: 	 macro	 FMOVEMMR
                            	   839: 	 MOVE.W #$D000+%\2\3\4\5\6\7\8\9,MC68881+COMMAND  ;CP REGISTER BIT
                            	   840: 					;MASK AND START CP COMMUNICATION
                            	   841: .NULCA\@: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	   842: 	 BEQ.S .NULCA\@			;REREAD UNTIL TRANSFER MULTIPLE REGS.
                            	   843: 	 MOVEQ.L #(\9+\8+\7+\6+\5+\4+\3+\2)*3-1,D0  ;DECREMENT REG. FOR DBRA
                            	   844: 	 TST.W MC68881+REGSEL		;READ REGISTER RESPONSE REGISTER
                            	   845: 	 if \0 = 'N'			;IS ADDRESSING MODE NOT POSTINCREMENT
                            	   846: 	 LEA \1,A0			;SET UP A MEMORY POINTER
                            	   847: .AGAIN\@: MOVE.L (A0)+,MC68881+OPER	;LOAD DATA ON TO THE STACK
                            	   848: 	 DBRA D0,.AGAIN\@		;LOOP UNTIL ALL DATA IS LOADED
                            	   849: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   850: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   851: 	 endif
                            	   852: 	 if \0 = 'Y'			;IS ADDRESSING MODE POSTINCREMENT
                            	   853: .AGAIN\@: MOVE.L \1,MC68881+OPER	;LOAD DATA ON TO THE STACK
                            	   854: 	 DBRA D0,.AGAIN\@		;LOOP UNTIL ALL DATA IS LOADED
                            	   855: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   856: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   857: 	 endif
                            	   858: 	 endm
                            	   859: ******************************************************************************
                            	   860: *									     *
                            	   861: *	 MC68881 FP MOVE TO CONTROL, STATUS,OR INSTRUCTION ADDRESS REGISTER  *
                            	   862: *									     *
                            	   863: *	 MOVINCSI <EA>,REGISTER						     *
                            	   864: *									     *
                            	   865: *	 WHERE:	  <EA>= VALID SOURCE ADDRESSING MODE			     *
                            	   866: *		  REGISTER= CONTROL,STATUS, OR IADDRESS			     *
                            	   867: *									     *
                            	   868: *	 NO REGISTERS MODIFIED OR DESTROYED!				     *
                            	   869: *									     *
                            	   870: *	 VALID ADDRESSING MODES:  DN, AN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   871: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   872: *									     *
                            	   873: ******************************************************************************
                            	   874: 	 macro	 MOVINCSI
                            	   875: 	 if !\?3			;IS ADDR.MODE INDEXED?
                            	   876: 	 MOVE.W #\2,MC68881+COMMAND	;MOVE BIT PATTERN IN COMMAND REG.
                            	   877: .NULCA\@: CMPI.W #$8900,MC68881+RESPONSE  ;IS RESPONSE NULL COME AGAIN?
                            	   878: 	 BEQ.S .NULCA\@			;COME AGAIN UNTIL NEW RESPONSE
                            	   879: 	 MOVE.L \1,MC68881+OPER		;PASS DATA TO REGISTER
                            	   880: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   881: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   882: 	 else				;IS ADDRESS MODE INDEXED?
                            	   883: 	 MOVE.W #\3,MC68881+COMMAND	;MOVE BIT PATTERN IN COMMAND REG.
                            	   884: .NULCA\@: CMPI.W #$8900,MC68881+RESPONSE  ;IS RESPONS NULL COME AGAIN?
                            	   885: 	 BEQ.S .NULCA\@			;COME AGAIN UNTIL NEW RESPONSE
                            	   886: 	 MOVE.L \1,\2,MC68881+OPER	;PASS DATA TO REGISTER FROM INDEXED ADDR.
                            	   887: 					;MODE
                            	   888: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   889: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   890: 	 endif
                            	   891: 	 endm
                            	   892: ******************************************************************************
                            	   893: *									     *
                            	   894: *	 MC68881 FP MOVE FROM CONTROL/STATUS/INSTRUCTION ADDRESS REGISTER    *
                            	   895: *									     *
                            	   896: *	 MOVOUCSI REGISTER,<EA>						     *
                            	   897: *									     *
                            	   898: *	 WHERE:	  REGISTER= CONTROL,STATUS, OR IADDRESS			     *
                            	   899: *		  <EA>= VALID SOURCE ADDRESSING MODE			     *
                            	   900: *									     *
                            	   901: *	 NO REGISTERS MODIFIED OR DESTROYED!				     *
                            	   902: *									     *
                            	   903: *	 VALID ADDRESSING MODES:  DN, AN, (AN)+, -(AN), D(AN), D(AN,IX)	     *
                            	   904: *				  XXX.W, XXX.L, (D,PC), D(PC,IX)	     *
                            	   905: *									     *
                            	   906: ******************************************************************************
                            	   907: 	 macro	 MOVOUCSI
                            	   908: 	 if !\?3			;IS ADDR.MODE INDEXED?
                            	   909: 	 MOVE.W #\1+$2000,MC68881+COMMAND  ;MOVE BIT PATTERN TO COMMAND REG.
                            	   910: .NULCA\@: CMPI.W #$8900,MC68881+RESPONSE   ;IS RESPONSE NULL COME AGAIN?
                            	   911: 	 BEQ.S .NULCA\@			;COME AGAIN UNTIL NEW RESPONSE
                            	   912: 	 MOVE.L MC68881+OPER,\2		;PASS DATA TO REGISTER
                            	   913: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   914: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   915: 	 else				;IS ADDR.MODE INDEXED?
                            	   916: 	 MOVE.W #\1+$2000,MC68881+COMMAND  ;MOVE BIT PATTERN TO COMMAND REG.
                            	   917: .NULCA\@: CMPI.W #$8900,MC68881+RESPONSE   ;IS RESPONSE NULL COME AGAIN?
                            	   918: 	 BEQ.S .NULCA\@			;COME AGAIN UNTIL NEW RESPONSE
                            	   919: 	 MOVE.L MC68881+OPER,\2,\3	;PASS DATA TO REGISTER FROM INDEXED A
                            	   920: 					;MODE
                            	   921: .NULREL\@: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	   922: 	 BMI.S .NULREL\@		;BRANCH UNTIL NULL RELEASE
                            	   923: 	 endif
                            	   924: 	 endm
                            	   925: ******************************************************************************
                            	   926: *									     *
                            	   927: *	 MC68881 FSAVE THE INTERNAL OF THE MACHINE			     *
                            	   928: *									     *
                            	   929: *	 THIS IS A PRIVILEDGED INSTRUCTION WHICH IS GENERALLY ONLY USED	     *
                            	   930: *	 IN THE OPERATING SYSTEM FOR CONTEXT SWITCHING!			     *
                            	   931: *									     *
                            	   932: *	 FSAVEST <EA>							     *
                            	   933: *									     *
                            	   934: *	 WHERE:	 <EA>= PREDECREMENT MODE   -(AN)			     *
                            	   935: *									     *
                            	   936: *	 REGISTERS MODIFIED OR DESTROYED:  0 1 2 3 4 5 6 7		     *
                            	   937: *					 A X				     *
                            	   938: *					 D X X				     *
                            	   939: *									     *
                            	   940: *	 VALID ADDRESSING MODES:  -(AN)					     *
                            	   941: *									     *
                            	   942: ******************************************************************************
                            	   943: 	 macro	 FSAVEST
                            	   944: .START\@: MOVE.W MC68881+SAVE,D0	;READ THE SAVE REGISTER
                            	   945: 	 MOVE.W D0,D1			;MAKE A COPY OF THE FORMAT WORD
                            	   946: 	 ANDI.W #$FF00,D1		;ISOLATE THE FORMAT WORD
                            	   947: 	 BEQ.S .NULL\@			;IF NULL IDLE, NO STATE SAVE
                            	   948: 	 CMPI.W #$0100,D1		;IS THE COPROCESSOR BUSY
                            	   949: 	 BEQ.S .START\@			;KEEP CHECKING UNTIL CP IS FINISHED
                            	   950: 					;PROCESSING
                            	   951: 	 LEA MC68881+OPER,A0		;LOAD OPERAND REGISTER TO A0
                            	   952: 
                            	   953: 	 MOVE.B D0,D1			;THE LENGTH OF THE DATA TO BE TRANSFERED
                            	   954: 	 LSR.B #2,D1			;DIVIDE BY 2 TO ADJUST FOR WORD TRANSFER
                            	   955: 	 EXT.W D1			;ESTABLISH COUNT AS A WORD FOR DBRA
                            	   956: 	 SUBQ.W #1,D1			;D1= COUNTER FOR DBRA
                            	   957: .LOAD\@: MOVE.L (A0),\1			;STORE THE INVISBLE STATE
                            	   958: 	 DBRA D1,.LOAD\@		;REPEAT UNTIL ALL DATA IS TRANSFERRED
                            	   959: .NULL\@: SWAP D0			;PLACE FORMAT WORD IN UPPER 16 BITS OF D0
                            	   960: 	 MOVE.L D0,\1			;STORE FORMAT WORD ON THE STACK
                            	   961: 	 endm
                            	   962: ******************************************************************************
                            	   963: *									     *
                            	   964: *	 MC68881 FRESTORE OF THE INTERNAL OF THE MACHINE		     *
                            	   965: *									     *
                            	   966: *	 THIS IS A PRIVILEDGED INSTRUCTION WHICH IS GENERALLY ONLY USED	     *
                            	   967: *	 IN THE OPERATING SYSTEM FOR CONTEXT SWITCHING!			     *
                            	   968: *									     *
                            	   969: *	 FRESTRST <EA>							     *
                            	   970: *									     *
                            	   971: *	 WHERE:	 <EA>= POSTINCREMENT MODE    (AN)+			     *
                            	   972: *									     *
                            	   973: *	 REGISTERS MODIFIED OR DESTROYED:  0 1 2 3 4 5 6 7		     *
                            	   974: *					 A X				     *
                            	   975: *					 D X X				     *
                            	   976: *									     *
                            	   977: *	 VALID ADDRESSING MODES:  (AN)+					     *
                            	   978: *									     *
                            	   979: ******************************************************************************
                            	   980: 	 macro	 FRESTRST
                            	   981: 	 MOVE.L \1,D0			;MOVE FORMAT WORD AND RESERVED WORD TO D0
                            	   982: 	 SWAP D0			;PLACE FORMAT WORD AS THE LOW ORDER
                            	   983: 	 MOVE.W D0,MC68881+RESTORE	;STORE FORMAT WORD IN RESTORE REG.
                            	   984: 	 MOVE.W MC68881+RESTORE,D0	;READ THE RESTORE REGISTER
                            	   985: 	 MOVE.W D0,D1			;MAKE A COPY OF THE RESPONSE FORMAT WORD
                            	   986: 	 ANDI.W #$FF00,D1		;ISOLATE THE FORMAT WORD
                            	   987: 	 BEQ.S .NULREL\@		;IF NULL IDLE RESPONSE, NO STATE RESTORED
                            	   988: 	 LEA MC68881+OPER,A0		;LOAD OPERAND REGISTER TO A0
                            	   989: 
                            	   990: 	 MOVE.B D0,D1			;THE LENGTH OF THE DATA TO BE TRANSFERED
                            	   991: 	 LSR.B #2,D1			;DIVIDE BY 2 TO ADJUST FOR WORD TRANSFER
                            	   992: 	 EXT.W D1			;ESTABLISH COUNT AS A WORD FOR DBRA
                            	   993: 	 SUBQ.W #1,D1			;D1= COUNTER FOR DBRA
                            	   994: .LOAD\@: MOVE.L \1,(A0)			;STORE THE INVISBLE STATE
                            	   995: 	 DBRA D1 .LOAD\@		;REPEAT UNTIL ALL DATA IS TRANSFERRED
                            	   996: .NULREL\@: EQU *
                            	   997: 	 endm
                            	   998: ******************************************************************************
                            	   999: *									     *
                            	  1000: *	 MC68881 FNOPP COMMAND						     *
                            	  1001: *									     *
                            	  1002: *	 FNOP								     *
                            	  1003: *									     *
                            	  1004: *	 NO REGISTERS MODIFIED OR DESTROYED!				     *
                            	  1005: *									     *
                            	  1006: ******************************************************************************
                            	  1007: 	 macro	 FNOPP
                            	  1008: 	 MOVE.W #$0000,MC68881+COND	;FNOP COMMAND TO FP REG.
                            	  1009: .NOPAS\@: TST.B MC68881+RESPONSE	;TEST RESPONSE
                            	  1010: 	 BMI.S .NOPAS\@
                            	  1011: 	 endm 
                            	  1012: 
                            	  1013: 
                            	  1014: *
                            	  1015: *  Just hack in my program here for now ...
                            	  1016: *
                            	  1017: 
                            	  1018:     section .text                     ; This is normal code
                            	  1019: 
                            	  1020: kmain::
00:00000000 41FA0054        	  1021:     lea.l   HELLO,A0                  ; Get the address of the message
00:00000004 2F08            	  1022:     move.l  A0,-(A7)                  ; Push it on the stack
00:00000006 4EB900000000    	  1023:     jsr     mcPrintln                 ; Call mcPrintln (from the machine lib)
                            	  1024: 
                            	  1025: 	; the exciting part ..
                            	  1026:     FMOVEROM $00,FP0                  ; move PI const to FP0
00:0000000C 33FC5C0000FFC00A	     1M 	 MOVE.W #$5C00+(FP0<<7)+$00,MC68881+COMMAND  ;REG. TO REG. OPERATION
00:00000014 4A3900FFC000    	     2M .NULCA_000001: TST.B MC68881+RESPONSE	;READ RESPONSE REGISTER
00:0000001A 6BF8            	     3M 	 BMI.S .NULCA_000001			;REREAD UNTIL NULL RELEASE (CA=0)
                            	  1027:     REGMEMW  FMOVE,FP0,D0             ; convert to short integer
                            	     1M 	 if !0			;IS <EA>=INDIRECT WITH INDEXING
00:0000001C 33FC700000FFC00A	     2M 	 MOVE.W #$7000+(FP0<<7)+FMOVE,MC68881+COMMAND  ;MEM. TO REG. OPERATION
00:00000024 0C79890000FFC000	     3M .NULCA_000002: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
00:0000002C 67F6            	     4M 	 BEQ.S .NULCA_000002			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	     5M 					;DATA
00:0000002E 303900FFC010    	     6M 	 MOVE.W MC68881+OPER,D0		;WORD DATA TRANSFER
00:00000034 4A3900FFC000    	     7M .NULREL_000002: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
00:0000003A 6BF8            	     8M 	 BMI.S .NULREL_000002		;BRANCH UNTIL NULL RELEASE
                            	     9M 	 else				;IS <EA> NOT = INDIRECT WITH INDEXING
                            	    10M 	 MOVE.W #$7000+(FP0<<7)+FMOVE,MC68881+COMMAND  ;MEM. TO REG. OPERATION
                            	    11M .NULCA_000002: CMPI #$8900,MC68881+RESPONSE	;READ RESPONSE REGISTER
                            	    12M 	 BEQ.S .NULCA_000002			;REREAD UNTIL EVALUATE EA AND TRANSFER
                            	    13M 					;DATA
                            	    14M 	 MOVE.W MC68881+OPER,D0,	;WORD DATA TRANSFER
                            	    15M .NULREL_000002: TST.B MC68881+RESPONSE	;IS RESPONSE NULL RELEASE?
                            	    16M 	 BMI.S .NULREL_000002		;BRANCH UNTIL NULL RELEASE
                            	    17M 	 endif
                            	  1028: 
00:0000003C 2200            	  1029:     move.l  D0,D1                     ; number to print
00:0000003E 700F            	  1030:     moveq.l #15,D0
00:00000040 143C000A        	  1031:     move.b  #10,D2                    ; base 10
00:00000044 4E4F            	  1032:     trap    #15
                            	  1033: 
00:00000046 41FA0030        	  1034:     lea.l   GOODBYE,A0                  ; Get the address of the message
00:0000004A 2F08            	  1035:     move.l  A0,-(A7)                  ; Push it on the stack
00:0000004C 4EB900000000    	  1036:     jsr     mcPrintln                 ; Call mcPrintln (from the machine lib)
                            	  1037: 
00:00000052 588F            	  1038:     addq.l  #4,A7                     ; Clean up the stack (important!)
00:00000054 4E75            	  1039:     rts                               ; And return
                            	  1040: 
                            	  1041:                                       ; At this point, the machine will reboot.
                            	  1042:                                       ; Don't return from kmain if you don't want
                            	  1043:                                       ; to reboot the machine!
                            	  1044: 
00:00000056 504920617320616E	  1045: HELLO   dc.b    "PI as an int is 3.  The FPU says:", 0 ; Our message 
00:0000005E 20696E7420697320
00:00000066 332E202054686520
00:0000006E 4650552073617973
00:00000076 3A
00:00000077 00
00:00000078 5072657474792065	  1046: GOODBYE dc.b    "Pretty exciting stuff!", 0 ; Our message 
00:00000080 78636974696E6720
00:00000088 737475666621
00:0000008E 00
                            	  1047: 
                            	  1048: * FC2 ignore
                            	  1049: * FC1 and FC0
                            	  1050: * A10-A23
                            	  1051: * matches FFFC00


Symbols by name:
COMMAND                          E:0000000A
FMOVE                            E:00000000
FP0                              E:00000000
GOODBYE                         00:00000078
HELLO                           00:00000056
MC68881                          E:00FFC000
OPER                             E:00000010
RESPONSE                         E:00000000
kmain                           00:00000000 EXP
mcPrintln                       external

Symbols by value:
00000000 RESPONSE
00000000 FMOVE
00000000 FP0
00000000 kmain
0000000A COMMAND
00000010 OPER
00000056 HELLO
00000078 GOODBYE
00FFC000 MC68881
