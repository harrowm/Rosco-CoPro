
example.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 3358 	movel #13144,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,3360 <SAVE_PROG_EXIT>
    2048:	3360 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 31e6 	lea 31e6 <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 20ea 	lea 20ea <kmain>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 3360 	movel 3360 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 3212 	lea 3212 <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 3354 	lea 3354 <crbuf>,%a2
    208a:	47f9 0000 3354 	lea 3354 <crbuf>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 3354 	lea 3354 <crbuf>,%a2
    20ac:	47f9 0000 3354 	lea 3354 <crbuf>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <gettimer>:

int gettimer() {
#ifdef ROSCO
    return *(int *)_TIMER_100HZ;
#else
    return 0;
    20c4:	4280           	clrl %d0
#endif
}
    20c6:	4e75           	rts

000020c8 <getduration>:

// Returns the number of 100ths of a second passed
int getduration(int start, int end) {
    return (end > start) ? (end - start) : (0xFFFF - start + end);
    20c8:	202f 0008      	movel %sp@(8),%d0
    20cc:	b0af 0004      	cmpl %sp@(4),%d0
    20d0:	6f0a           	bles 20dc <getduration+0x14>
    20d2:	202f 0008      	movel %sp@(8),%d0
    20d6:	90af 0004      	subl %sp@(4),%d0
    20da:	600c           	bras 20e8 <getduration+0x20>
    20dc:	7000           	moveq #0,%d0
    20de:	4640           	notw %d0
    20e0:	90af 0004      	subl %sp@(4),%d0
    20e4:	d0af 0008      	addl %sp@(8),%d0
}
    20e8:	4e75           	rts

000020ea <kmain>:

int kmain() {
    20ea:	4fef ffd8      	lea %sp@(-40),%sp
    20ee:	2f03           	movel %d3,%sp@-
    20f0:	2f02           	movel %d2,%sp@-
    double a, b, c; 
    int i;

    int start = gettimer();
    20f2:	4eb9 0000 20c4 	jsr 20c4 <gettimer>
    20f8:	2f40 0028      	movel %d0,%sp@(40)

    a = CONST1;
    20fc:	2f7c 4009 21fd 	movel #1074340349,%sp@(32)
    2102:	0020 
    2104:	2f7c 9ba1 b196 	movel #-1683902058,%sp@(36)
    210a:	0024 
    b = CONST2;
    210c:	2f7c 40d1 6bc2 	movel #1087466434,%sp@(24)
    2112:	0018 
    2114:	2f7c 0c49 ba5e 	movel #206158430,%sp@(28)
    211a:	001c 

    for (i=0; i<COUNT; ++i) {
    211c:	42af 002c      	clrl %sp@(44)
    2120:	6000 013a      	braw 225c <kmain+0x172>
        c = a * b; 
    2124:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    212a:	f22f 5400 0018 	fmoved %sp@(24),%fp0
    2130:	f200 0423      	fmulx %fp1,%fp0
    2134:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = c / a; 
    213a:	f22f 5400 0008 	fmoved %sp@(8),%fp0
    2140:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    2146:	f200 0420      	fdivx %fp1,%fp0
    214a:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = a * b; 
    2150:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    2156:	f22f 5400 0018 	fmoved %sp@(24),%fp0
    215c:	f200 0423      	fmulx %fp1,%fp0
    2160:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = c / a; 
    2166:	f22f 5400 0008 	fmoved %sp@(8),%fp0
    216c:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    2172:	f200 0420      	fdivx %fp1,%fp0
    2176:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = a * b; 
    217c:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    2182:	f22f 5400 0018 	fmoved %sp@(24),%fp0
    2188:	f200 0423      	fmulx %fp1,%fp0
    218c:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = c / a; 
    2192:	f22f 5400 0008 	fmoved %sp@(8),%fp0
    2198:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    219e:	f200 0420      	fdivx %fp1,%fp0
    21a2:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = a * b; 
    21a8:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    21ae:	f22f 5400 0018 	fmoved %sp@(24),%fp0
    21b4:	f200 0423      	fmulx %fp1,%fp0
    21b8:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = c / a; 
    21be:	f22f 5400 0008 	fmoved %sp@(8),%fp0
    21c4:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    21ca:	f200 0420      	fdivx %fp1,%fp0
    21ce:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = a * b; 
    21d4:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    21da:	f22f 5400 0018 	fmoved %sp@(24),%fp0
    21e0:	f200 0423      	fmulx %fp1,%fp0
    21e4:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = c / a; 
    21ea:	f22f 5400 0008 	fmoved %sp@(8),%fp0
    21f0:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    21f6:	f200 0420      	fdivx %fp1,%fp0
    21fa:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = a * b; 
    2200:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    2206:	f22f 5400 0018 	fmoved %sp@(24),%fp0
    220c:	f200 0423      	fmulx %fp1,%fp0
    2210:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = c / a; 
    2216:	f22f 5400 0008 	fmoved %sp@(8),%fp0
    221c:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    2222:	f200 0420      	fdivx %fp1,%fp0
    2226:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = a * b; 
    222c:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    2232:	f22f 5400 0018 	fmoved %sp@(24),%fp0
    2238:	f200 0423      	fmulx %fp1,%fp0
    223c:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
        c = c / a; 
    2242:	f22f 5400 0008 	fmoved %sp@(8),%fp0
    2248:	f22f 5480 0020 	fmoved %sp@(32),%fp1
    224e:	f200 0420      	fdivx %fp1,%fp0
    2252:	f22f 7400 0008 	fmoved %fp0,%sp@(8)
    for (i=0; i<COUNT; ++i) {
    2258:	52af 002c      	addql #1,%sp@(44)
    225c:	0caf 0000 270f 	cmpil #9999,%sp@(44)
    2262:	002c 
    2264:	6f00 febe      	blew 2124 <kmain+0x3a>
    }

    int end = gettimer();
    2268:	4eb9 0000 20c4 	jsr 20c4 <gettimer>
    226e:	2f40 0014      	movel %d0,%sp@(20)
    int duration = getduration(start, end);
    2272:	2f2f 0014      	movel %sp@(20),%sp@-
    2276:	2f2f 002c      	movel %sp@(44),%sp@-
    227a:	4eb9 0000 20c8 	jsr 20c8 <getduration>
    2280:	508f           	addql #8,%sp
    2282:	2f40 0010      	movel %d0,%sp@(16)

    printf("Time: %d.%03d\n", duration/100, duration%100);
    2286:	242f 0010      	movel %sp@(16),%d2
    228a:	2202           	movel %d2,%d1
    228c:	4c3c           	.short 0x4c3c
    228e:	1c00           	moveb %d0,%d6
    2290:	51eb 851f      	sf %a3@(-31457)
    2294:	2200           	movel %d0,%d1
    2296:	ea81           	asrl #5,%d1
    2298:	2002           	movel %d2,%d0
    229a:	d080           	addl %d0,%d0
    229c:	9180           	subxl %d0,%d0
    229e:	9280           	subl %d0,%d1
    22a0:	2001           	movel %d1,%d0
    22a2:	d080           	addl %d0,%d0
    22a4:	d081           	addl %d1,%d0
    22a6:	e788           	lsll #3,%d0
    22a8:	d081           	addl %d1,%d0
    22aa:	e588           	lsll #2,%d0
    22ac:	2202           	movel %d2,%d1
    22ae:	9280           	subl %d0,%d1
    22b0:	202f 0010      	movel %sp@(16),%d0
    22b4:	2600           	movel %d0,%d3
    22b6:	4c3c           	.short 0x4c3c
    22b8:	3c02           	movew %d2,%d6
    22ba:	51eb 851f      	sf %a3@(-31457)
    22be:	ea82           	asrl #5,%d2
    22c0:	d080           	addl %d0,%d0
    22c2:	9180           	subxl %d0,%d0
    22c4:	2042           	moveal %d2,%a0
    22c6:	91c0           	subal %d0,%a0
    22c8:	2f01           	movel %d1,%sp@-
    22ca:	2f08           	movel %a0,%sp@-
    22cc:	4879 0000 3332 	pea 3332 <__mulsi3+0x22>
    22d2:	4eb9 0000 316a 	jsr 316a <printf_>
    22d8:	4fef 000c      	lea %sp@(12),%sp
    return 0;
    22dc:	4280           	clrl %d0
}
    22de:	241f           	movel %sp@+,%d2
    22e0:	261f           	movel %sp@+,%d3
    22e2:	4fef 0028      	lea %sp@(40),%sp
    22e6:	4e75           	rts

000022e8 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    22e8:	4e75           	rts

000022ea <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    22ea:	4fef ffcc      	lea %sp@(-52),%sp
    22ee:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    22f2:	246f 0064      	moveal %sp@(100),%a2
    22f6:	2a2f 0068      	movel %sp@(104),%d5
    22fa:	2c2f 0070      	movel %sp@(112),%d6
    22fe:	242f 0074      	movel %sp@(116),%d2
    2302:	262f 007c      	movel %sp@(124),%d3
    2306:	2e2f 0084      	movel %sp@(132),%d7
    230a:	1f6f 007b 003f 	moveb %sp@(123),%sp@(63)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2310:	222f 0088      	movel %sp@(136),%d1
    2314:	0281 0000 0400 	andil #1024,%d1
    231a:	2f41 0032      	movel %d1,%sp@(50)
  if (!value) {
    231e:	4a82           	tstl %d2
    2320:	6700 0174      	beqw 2496 <_ntoa_long+0x1ac>
  if (flags & FLAGS_HASH) {
    2324:	7210           	moveq #16,%d1
    2326:	c2af 0088      	andl %sp@(136),%d1
    232a:	2f41 0036      	movel %d1,%sp@(54)
    232e:	082f 0005 008b 	btst #5,%sp@(139)
    2334:	6600 017e      	bnew 24b4 <_ntoa_long+0x1ca>
    2338:	7061           	moveq #97,%d0
    233a:	41ef 0040      	lea %sp@(64),%a0
    233e:	2f48 002e      	movel %a0,%sp@(46)
    2342:	4def 0060      	lea %sp@(96),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2346:	2808           	movel %a0,%d4
    2348:	49f9 0000 32e0 	lea 32e0 <__umodsi3>,%a4
    234e:	47f9 0000 3284 	lea 3284 <__udivsi3>,%a3
    2354:	1200           	moveb %d0,%d1
    2356:	0601 fff6      	addib #-10,%d1
    235a:	2f4a 003a      	movel %a2,%sp@(58)
    235e:	2a45           	moveal %d5,%a5
    2360:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    2362:	2f03           	movel %d3,%sp@-
    2364:	2f02           	movel %d2,%sp@-
    2366:	4e94           	jsr %a4@
    2368:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    236a:	7209           	moveq #9,%d1
    236c:	b280           	cmpl %d0,%d1
    236e:	652a           	bcss 239a <_ntoa_long+0xb0>
    2370:	0600 0030      	addib #48,%d0
    2374:	2444           	moveal %d4,%a2
    2376:	14c0           	moveb %d0,%a2@+
      value /= base;
    2378:	2f03           	movel %d3,%sp@-
    237a:	2f02           	movel %d2,%sp@-
    237c:	4e93           	jsr %a3@
    237e:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2380:	b682           	cmpl %d2,%d3
    2382:	6228           	bhis 23ac <_ntoa_long+0xc2>
    2384:	bdca           	cmpal %a2,%fp
    2386:	6724           	beqs 23ac <_ntoa_long+0xc2>
    2388:	280a           	movel %a2,%d4
      value /= base;
    238a:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    238c:	2f03           	movel %d3,%sp@-
    238e:	2f02           	movel %d2,%sp@-
    2390:	4e94           	jsr %a4@
    2392:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2394:	7209           	moveq #9,%d1
    2396:	b280           	cmpl %d0,%d1
    2398:	64d6           	bccs 2370 <_ntoa_long+0x86>
    239a:	d005           	addb %d5,%d0
    239c:	2444           	moveal %d4,%a2
    239e:	14c0           	moveb %d0,%a2@+
      value /= base;
    23a0:	2f03           	movel %d3,%sp@-
    23a2:	2f02           	movel %d2,%sp@-
    23a4:	4e93           	jsr %a3@
    23a6:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    23a8:	b682           	cmpl %d2,%d3
    23aa:	63d8           	blss 2384 <_ntoa_long+0x9a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    23ac:	246f 003a      	moveal %sp@(58),%a2
    23b0:	2a0d           	movel %a5,%d5
    23b2:	307c 0001      	moveaw #1,%a0
    23b6:	91ef 002e      	subal %sp@(46),%a0
    23ba:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    23bc:	082f 0001 008b 	btst #1,%sp@(139)
    23c2:	6700 013e      	beqw 2502 <_ntoa_long+0x218>
    23c6:	3c7c 0002      	moveaw #2,%fp
  if (flags & FLAGS_HASH) {
    23ca:	4aaf 0036      	tstl %sp@(54)
    23ce:	6700 023c      	beqw 260c <_ntoa_long+0x322>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    23d2:	4aaf 0032      	tstl %sp@(50)
    23d6:	6600 01aa      	bnew 2582 <_ntoa_long+0x298>
    23da:	4a84           	tstl %d4
    23dc:	6600 0324      	bnew 2702 <_ntoa_long+0x418>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    23e0:	7010           	moveq #16,%d0
    23e2:	b083           	cmpl %d3,%d0
    23e4:	6700 0412      	beqw 27f8 <_ntoa_long+0x50e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    23e8:	5583           	subql #2,%d3
    23ea:	6700 04b0      	beqw 289c <_ntoa_long+0x5b2>
      buf[len++] = '0';
    23ee:	1f7c 0030 0040 	moveb #48,%sp@(64)
    23f4:	202f 0088      	movel %sp@(136),%d0
    23f8:	7401           	moveq #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    23fa:	7203           	moveq #3,%d1
    23fc:	c280           	andl %d0,%d1
      buf[len++] = '-';
    23fe:	2802           	movel %d2,%d4
    if (negative) {
    2400:	4a2f 003f      	tstb %sp@(63)
    2404:	6700 02dc      	beqw 26e2 <_ntoa_long+0x3f8>
      buf[len++] = '-';
    2408:	5284           	addql #1,%d4
    240a:	1fbc 002d 2840 	moveb #45,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2410:	4a81           	tstl %d1
    2412:	6600 0194      	bnew 25a8 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2416:	b887           	cmpl %d7,%d4
    2418:	6400 018e      	bccw 25a8 <_ntoa_long+0x2be>
    241c:	242f 006c      	movel %sp@(108),%d2
    2420:	2604           	movel %d4,%d3
    2422:	9682           	subl %d2,%d3
      out(' ', buffer, idx++, maxlen);
    2424:	2002           	movel %d2,%d0
    2426:	5282           	addql #1,%d2
    2428:	2f06           	movel %d6,%sp@-
    242a:	2f00           	movel %d0,%sp@-
    242c:	2f05           	movel %d5,%sp@-
    242e:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2432:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    2434:	2003           	movel %d3,%d0
    2436:	d082           	addl %d2,%d0
    2438:	4fef 0010      	lea %sp@(16),%sp
    243c:	be80           	cmpl %d0,%d7
    243e:	62e4           	bhis 2424 <_ntoa_long+0x13a>
    2440:	2004           	movel %d4,%d0
    2442:	5280           	addql #1,%d0
    2444:	be80           	cmpl %d0,%d7
    2446:	6500 033e      	bcsw 2786 <_ntoa_long+0x49c>
    244a:	2047           	moveal %d7,%a0
    244c:	5388           	subql #1,%a0
    244e:	91c4           	subal %d4,%a0
    2450:	226f 006c      	moveal %sp@(108),%a1
    2454:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    2458:	2609           	movel %a1,%d3
  while (len) {
    245a:	4a84           	tstl %d4
    245c:	6600 014e      	bnew 25ac <_ntoa_long+0x2c2>
    2460:	2403           	movel %d3,%d2
  if (flags & FLAGS_LEFT) {
    2462:	bcfc 0000      	cmpaw #0,%fp
    2466:	6722           	beqs 248a <_ntoa_long+0x1a0>
    while (idx - start_idx < width) {
    2468:	2602           	movel %d2,%d3
    246a:	96af 006c      	subl %sp@(108),%d3
    246e:	be83           	cmpl %d3,%d7
    2470:	6318           	blss 248a <_ntoa_long+0x1a0>
      out(' ', buffer, idx++, maxlen);
    2472:	2f06           	movel %d6,%sp@-
    2474:	2f02           	movel %d2,%sp@-
    2476:	5282           	addql #1,%d2
    2478:	2f05           	movel %d5,%sp@-
    247a:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    247e:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    2480:	5283           	addql #1,%d3
    2482:	4fef 0010      	lea %sp@(16),%sp
    2486:	be83           	cmpl %d3,%d7
    2488:	62e8           	bhis 2472 <_ntoa_long+0x188>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    248a:	2002           	movel %d2,%d0
    248c:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2490:	4fef 0034      	lea %sp@(52),%sp
    2494:	4e75           	rts
    flags &= ~FLAGS_HASH;
    2496:	70ef           	moveq #-17,%d0
    2498:	c0af 0088      	andl %sp@(136),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    249c:	4aaf 0032      	tstl %sp@(50)
    24a0:	6640           	bnes 24e2 <_ntoa_long+0x1f8>
    24a2:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    24a6:	2f40 0088      	movel %d0,%sp@(136)
    24aa:	082f 0005 008b 	btst #5,%sp@(139)
    24b0:	6700 fe86      	beqw 2338 <_ntoa_long+0x4e>
    24b4:	7041           	moveq #65,%d0
    24b6:	41ef 0040      	lea %sp@(64),%a0
    24ba:	2f48 002e      	movel %a0,%sp@(46)
    24be:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    24c2:	2808           	movel %a0,%d4
    24c4:	49f9 0000 32e0 	lea 32e0 <__umodsi3>,%a4
    24ca:	47f9 0000 3284 	lea 3284 <__udivsi3>,%a3
    24d0:	1200           	moveb %d0,%d1
    24d2:	0601 fff6      	addib #-10,%d1
    24d6:	2f4a 003a      	movel %a2,%sp@(58)
    24da:	2a45           	moveal %d5,%a5
    24dc:	1a01           	moveb %d1,%d5
    24de:	6000 fe82      	braw 2362 <_ntoa_long+0x78>
  if (!(flags & FLAGS_LEFT)) {
    24e2:	7802           	moveq #2,%d4
    24e4:	c8af 0088      	andl %sp@(136),%d4
    24e8:	082f 0001 008b 	btst #1,%sp@(139)
    24ee:	6600 01e0      	bnew 26d0 <_ntoa_long+0x3e6>
    24f2:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    24f6:	2f40 0088      	movel %d0,%sp@(136)
  if (!(flags & FLAGS_PRECISION) || value) {
    24fa:	2f7c 0000 0400 	movel #1024,%sp@(50)
    2500:	0032 
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2502:	4a87           	tstl %d7
    2504:	6700 012e      	beqw 2634 <_ntoa_long+0x34a>
    2508:	7001           	moveq #1,%d0
    250a:	c0af 0088      	andl %sp@(136),%d0
    250e:	2c40           	moveal %d0,%fp
    2510:	082f 0000 008b 	btst #0,%sp@(139)
    2516:	6700 0194      	beqw 26ac <_ntoa_long+0x3c2>
    251a:	4a2f 003f      	tstb %sp@(63)
    251e:	6600 0250      	bnew 2770 <_ntoa_long+0x486>
    2522:	700c           	moveq #12,%d0
    2524:	c0af 0088      	andl %sp@(136),%d0
    2528:	6600 0246      	bnew 2770 <_ntoa_long+0x486>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    252c:	b8af 0080      	cmpl %sp@(128),%d4
    2530:	6400 013a      	bccw 266c <_ntoa_long+0x382>
    2534:	7020           	moveq #32,%d0
    2536:	b084           	cmpl %d4,%d0
    2538:	6700 030a      	beqw 2844 <_ntoa_long+0x55a>
    253c:	41f7 4840      	lea %sp@(40,%d4:l),%a0
    2540:	202f 0080      	movel %sp@(128),%d0
      buf[len++] = '0';
    2544:	5284           	addql #1,%d4
    2546:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    254a:	b880           	cmpl %d0,%d4
    254c:	6400 0116      	bccw 2664 <_ntoa_long+0x37a>
    2550:	7220           	moveq #32,%d1
    2552:	b284           	cmpl %d4,%d1
    2554:	66ee           	bnes 2544 <_ntoa_long+0x25a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2556:	bcfc 0000      	cmpaw #0,%fp
    255a:	6700 0140      	beqw 269c <_ntoa_long+0x3b2>
    255e:	7020           	moveq #32,%d0
    2560:	b087           	cmpl %d7,%d0
    2562:	6400 0138      	bccw 269c <_ntoa_long+0x3b2>
  if (flags & FLAGS_HASH) {
    2566:	4aaf 0036      	tstl %sp@(54)
    256a:	6700 020a      	beqw 2776 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    256e:	4aaf 0032      	tstl %sp@(50)
    2572:	6600 0390      	bnew 2904 <_ntoa_long+0x61a>
    2576:	7020           	moveq #32,%d0
    2578:	9dce           	subal %fp,%fp
    257a:	b0af 0080      	cmpl %sp@(128),%d0
    257e:	6700 02e8      	beqw 2868 <_ntoa_long+0x57e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2582:	7003           	moveq #3,%d0
    2584:	c0af 0088      	andl %sp@(136),%d0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2588:	7210           	moveq #16,%d1
    258a:	b283           	cmpl %d3,%d1
    258c:	6700 0220      	beqw 27ae <_ntoa_long+0x4c4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2590:	5583           	subql #2,%d3
    2592:	6700 01bc      	beqw 2750 <_ntoa_long+0x466>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2596:	7220           	moveq #32,%d1
    2598:	b284           	cmpl %d4,%d1
    259a:	6666           	bnes 2602 <_ntoa_long+0x318>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    259c:	4a80           	tstl %d0
    259e:	6608           	bnes 25a8 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    25a0:	7220           	moveq #32,%d1
    25a2:	b287           	cmpl %d7,%d1
    25a4:	6500 fe76      	bcsw 241c <_ntoa_long+0x132>
  if (flags & FLAGS_HASH) {
    25a8:	262f 006c      	movel %sp@(108),%d3
    25ac:	4bef 0040      	lea %sp@(64),%a5
    25b0:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    25b4:	d684           	addl %d4,%d3
    25b6:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    25ba:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    25bc:	2f06           	movel %d6,%sp@-
    25be:	200c           	movel %a4,%d0
    25c0:	908b           	subl %a3,%d0
    25c2:	2f00           	movel %d0,%sp@-
    25c4:	2f05           	movel %d5,%sp@-
    25c6:	1023           	moveb %a3@-,%d0
    25c8:	4880           	extw %d0
    25ca:	3040           	moveaw %d0,%a0
    25cc:	2f08           	movel %a0,%sp@-
    25ce:	4e92           	jsr %a2@
  while (len) {
    25d0:	4fef 0010      	lea %sp@(16),%sp
    25d4:	b7cd           	cmpal %a5,%a3
    25d6:	6700 fe8a      	beqw 2462 <_ntoa_long+0x178>
    25da:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    25dc:	2f06           	movel %d6,%sp@-
    25de:	200c           	movel %a4,%d0
    25e0:	908b           	subl %a3,%d0
    25e2:	2f00           	movel %d0,%sp@-
    25e4:	2f05           	movel %d5,%sp@-
    25e6:	1023           	moveb %a3@-,%d0
    25e8:	4880           	extw %d0
    25ea:	3040           	moveaw %d0,%a0
    25ec:	2f08           	movel %a0,%sp@-
    25ee:	4e92           	jsr %a2@
  while (len) {
    25f0:	4fef 0010      	lea %sp@(16),%sp
    25f4:	b7cd           	cmpal %a5,%a3
    25f6:	66c2           	bnes 25ba <_ntoa_long+0x2d0>
    25f8:	6000 fe68      	braw 2462 <_ntoa_long+0x178>
      buf[len++] = 'X';
    25fc:	5384           	subql #1,%d4
    25fe:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    2602:	2004           	movel %d4,%d0
    2604:	5284           	addql #1,%d4
    2606:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    260c:	7020           	moveq #32,%d0
    260e:	b084           	cmpl %d4,%d0
    2610:	6600 0134      	bnew 2746 <_ntoa_long+0x45c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2614:	7003           	moveq #3,%d0
    2616:	c0af 0088      	andl %sp@(136),%d0
    261a:	6700 00a8      	beqw 26c4 <_ntoa_long+0x3da>
  if (flags & FLAGS_HASH) {
    261e:	262f 006c      	movel %sp@(108),%d3
    2622:	7820           	moveq #32,%d4
    2624:	4bef 0040      	lea %sp@(64),%a5
    2628:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    262c:	d684           	addl %d4,%d3
    262e:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2632:	6086           	bras 25ba <_ntoa_long+0x2d0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2634:	b8af 0080      	cmpl %sp@(128),%d4
    2638:	6400 0280      	bccw 28ba <_ntoa_long+0x5d0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    263c:	7201           	moveq #1,%d1
    263e:	c2af 0088      	andl %sp@(136),%d1
    2642:	2c41           	moveal %d1,%fp
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2644:	7020           	moveq #32,%d0
    2646:	b084           	cmpl %d4,%d0
    2648:	6600 fef2      	bnew 253c <_ntoa_long+0x252>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    264c:	4a81           	tstl %d1
    264e:	6700 02ba      	beqw 290a <_ntoa_long+0x620>
  if (flags & FLAGS_HASH) {
    2652:	4aaf 0036      	tstl %sp@(54)
    2656:	6600 02ba      	bnew 2912 <_ntoa_long+0x628>
    265a:	9dce           	subal %fp,%fp
    265c:	262f 006c      	movel %sp@(108),%d3
    2660:	7820           	moveq #32,%d4
    2662:	60c0           	bras 2624 <_ntoa_long+0x33a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2664:	bcfc 0000      	cmpaw #0,%fp
    2668:	6700 fd60      	beqw 23ca <_ntoa_long+0xe0>
    266c:	be84           	cmpl %d4,%d7
    266e:	6300 024a      	blsw 28ba <_ntoa_long+0x5d0>
    2672:	7220           	moveq #32,%d1
    2674:	b284           	cmpl %d4,%d1
    2676:	6700 0270      	beqw 28e8 <_ntoa_long+0x5fe>
    267a:	43ef 0040      	lea %sp@(64),%a1
    267e:	41f1 4800      	lea %a1@(0,%d4:l),%a0
    2682:	2009           	movel %a1,%d0
    2684:	d087           	addl %d7,%d0
    2686:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = '0';
    268a:	10bc 0030      	moveb #48,%a0@
    268e:	2208           	movel %a0,%d1
    2690:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2692:	b1c0           	cmpal %d0,%a0
    2694:	6700 0100      	beqw 2796 <_ntoa_long+0x4ac>
    2698:	bdc8           	cmpal %a0,%fp
    269a:	66ee           	bnes 268a <_ntoa_long+0x3a0>
  if (flags & FLAGS_HASH) {
    269c:	4aaf 0036      	tstl %sp@(54)
    26a0:	6700 00d4      	beqw 2776 <_ntoa_long+0x48c>
    26a4:	9dce           	subal %fp,%fp
    26a6:	7820           	moveq #32,%d4
    26a8:	6000 fd28      	braw 23d2 <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26ac:	b8af 0080      	cmpl %sp@(128),%d4
    26b0:	6400 fd18      	bccw 23ca <_ntoa_long+0xe0>
    26b4:	7220           	moveq #32,%d1
    26b6:	b284           	cmpl %d4,%d1
    26b8:	6600 fe82      	bnew 253c <_ntoa_long+0x252>
  if (flags & FLAGS_HASH) {
    26bc:	4aaf 0036      	tstl %sp@(54)
    26c0:	6600 0250      	bnew 2912 <_ntoa_long+0x628>
    for (size_t i = len; i < width; i++) {
    26c4:	7820           	moveq #32,%d4
    26c6:	b887           	cmpl %d7,%d4
    26c8:	6500 fd52      	bcsw 241c <_ntoa_long+0x132>
    26cc:	6000 feda      	braw 25a8 <_ntoa_long+0x2be>
  if (!(flags & FLAGS_LEFT)) {
    26d0:	3c7c 0002      	moveaw #2,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    26d4:	7203           	moveq #3,%d1
    26d6:	c280           	andl %d0,%d1
      buf[len++] = '-';
    26d8:	2802           	movel %d2,%d4
    if (negative) {
    26da:	4a2f 003f      	tstb %sp@(63)
    26de:	6600 fd28      	bnew 2408 <_ntoa_long+0x11e>
    else if (flags & FLAGS_PLUS) {
    26e2:	0800 0002      	btst #2,%d0
    26e6:	6700 00e8      	beqw 27d0 <_ntoa_long+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    26ea:	5284           	addql #1,%d4
    26ec:	1fbc 002b 2840 	moveb #43,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    26f2:	4a81           	tstl %d1
    26f4:	6600 feb2      	bnew 25a8 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    26f8:	b887           	cmpl %d7,%d4
    26fa:	6500 fd20      	bcsw 241c <_ntoa_long+0x132>
    26fe:	6000 fea8      	braw 25a8 <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2702:	b8af 0080      	cmpl %sp@(128),%d4
    2706:	6706           	beqs 270e <_ntoa_long+0x424>
    2708:	be84           	cmpl %d4,%d7
    270a:	6600 fe76      	bnew 2582 <_ntoa_long+0x298>
      len--;
    270e:	2004           	movel %d4,%d0
    2710:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    2712:	7201           	moveq #1,%d1
    2714:	b284           	cmpl %d4,%d1
    2716:	6700 fcc8      	beqw 23e0 <_ntoa_long+0xf6>
    271a:	7210           	moveq #16,%d1
    271c:	b283           	cmpl %d3,%d1
    271e:	6700 01a8      	beqw 28c8 <_ntoa_long+0x5de>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2722:	7202           	moveq #2,%d1
      len--;
    2724:	2800           	movel %d0,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2726:	b283           	cmpl %d3,%d1
    2728:	6600 feda      	bnew 2604 <_ntoa_long+0x31a>
    272c:	7003           	moveq #3,%d0
    272e:	c0af 0088      	andl %sp@(136),%d0
      buf[len++] = 'b';
    2732:	1fbc 0062 4840 	moveb #98,%sp@(40,%d4:l)
    2738:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    273a:	7220           	moveq #32,%d1
    273c:	b284           	cmpl %d4,%d1
    273e:	6700 fe5c      	beqw 259c <_ntoa_long+0x2b2>
    2742:	6000 febe      	braw 2602 <_ntoa_long+0x318>
    2746:	202f 0088      	movel %sp@(136),%d0
    274a:	2404           	movel %d4,%d2
    274c:	6000 fcac      	braw 23fa <_ntoa_long+0x110>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2750:	7220           	moveq #32,%d1
    2752:	b284           	cmpl %d4,%d1
    2754:	66dc           	bnes 2732 <_ntoa_long+0x448>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2756:	4a80           	tstl %d0
    2758:	6600 fe4e      	bnew 25a8 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    275c:	7020           	moveq #32,%d0
    275e:	b087           	cmpl %d7,%d0
    2760:	6400 fe46      	bccw 25a8 <_ntoa_long+0x2be>
    2764:	242f 006c      	movel %sp@(108),%d2
    2768:	2604           	movel %d4,%d3
    276a:	9682           	subl %d2,%d3
    276c:	6000 fcb6      	braw 2424 <_ntoa_long+0x13a>
      width--;
    2770:	5387           	subql #1,%d7
    2772:	6000 fdb8      	braw 252c <_ntoa_long+0x242>
  if (flags & FLAGS_HASH) {
    2776:	9dce           	subal %fp,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2778:	7003           	moveq #3,%d0
    277a:	c0af 0088      	andl %sp@(136),%d0
    277e:	6600 fe9e      	bnew 261e <_ntoa_long+0x334>
    2782:	6000 ff40      	braw 26c4 <_ntoa_long+0x3da>
    2786:	91c8           	subal %a0,%a0
    2788:	226f 006c      	moveal %sp@(108),%a1
    278c:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    2790:	2609           	movel %a1,%d3
    2792:	6000 fcc6      	braw 245a <_ntoa_long+0x170>
      buf[len++] = '0';
    2796:	307c 0001      	moveaw #1,%a0
    279a:	91c9           	subal %a1,%a0
    279c:	2808           	movel %a0,%d4
    279e:	d881           	addl %d1,%d4
    27a0:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    27a2:	4aaf 0036      	tstl %sp@(54)
    27a6:	6600 fc2a      	bnew 23d2 <_ntoa_long+0xe8>
    27aa:	6000 fe60      	braw 260c <_ntoa_long+0x322>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27ae:	7220           	moveq #32,%d1
    27b0:	082f 0005 008b 	btst #5,%sp@(139)
    27b6:	6600 00ca      	bnew 2882 <_ntoa_long+0x598>
    27ba:	b284           	cmpl %d4,%d1
    27bc:	6600 00b0      	bnew 286e <_ntoa_long+0x584>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27c0:	4a80           	tstl %d0
    27c2:	6600 fde4      	bnew 25a8 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    27c6:	b287           	cmpl %d7,%d1
    27c8:	6500 fc52      	bcsw 241c <_ntoa_long+0x132>
    27cc:	6000 fdda      	braw 25a8 <_ntoa_long+0x2be>
    else if (flags & FLAGS_SPACE) {
    27d0:	0800 0003      	btst #3,%d0
    27d4:	6640           	bnes 2816 <_ntoa_long+0x52c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27d6:	4a81           	tstl %d1
    27d8:	6600 00d8      	bnew 28b2 <_ntoa_long+0x5c8>
    for (size_t i = len; i < width; i++) {
    27dc:	b487           	cmpl %d7,%d2
    27de:	6500 fc3c      	bcsw 241c <_ntoa_long+0x132>
  while (len) {
    27e2:	4a82           	tstl %d2
    27e4:	6600 fdc2      	bnew 25a8 <_ntoa_long+0x2be>
    27e8:	242f 006c      	movel %sp@(108),%d2
}
    27ec:	2002           	movel %d2,%d0
    27ee:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    27f2:	4fef 0034      	lea %sp@(52),%sp
    27f6:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27f8:	082f 0005 008b 	btst #5,%sp@(139)
    27fe:	662e           	bnes 282e <_ntoa_long+0x544>
      buf[len++] = 'x';
    2800:	1f7c 0078 0040 	moveb #120,%sp@(64)
      buf[len++] = '0';
    2806:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    280c:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2810:	7402           	moveq #2,%d2
    2812:	6000 fbe6      	braw 23fa <_ntoa_long+0x110>
      buf[len++] = ' ';
    2816:	5284           	addql #1,%d4
    2818:	1fbc 0020 2840 	moveb #32,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    281e:	4a81           	tstl %d1
    2820:	6600 fd86      	bnew 25a8 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2824:	b887           	cmpl %d7,%d4
    2826:	6500 fbf4      	bcsw 241c <_ntoa_long+0x132>
    282a:	6000 fd7c      	braw 25a8 <_ntoa_long+0x2be>
      buf[len++] = 'X';
    282e:	1f7c 0058 0040 	moveb #88,%sp@(64)
      buf[len++] = '0';
    2834:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    283a:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    283e:	7402           	moveq #2,%d2
    2840:	6000 fbb8      	braw 23fa <_ntoa_long+0x110>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2844:	7220           	moveq #32,%d1
    2846:	b287           	cmpl %d7,%d1
    2848:	6400 fe08      	bccw 2652 <_ntoa_long+0x368>
  if (flags & FLAGS_HASH) {
    284c:	4aaf 0036      	tstl %sp@(54)
    2850:	6700 ff24      	beqw 2776 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2854:	4aaf 0032      	tstl %sp@(50)
    2858:	6600 00aa      	bnew 2904 <_ntoa_long+0x61a>
    285c:	7220           	moveq #32,%d1
    285e:	9dce           	subal %fp,%fp
    2860:	b2af 0080      	cmpl %sp@(128),%d1
    2864:	6600 fd1c      	bnew 2582 <_ntoa_long+0x298>
      len--;
    2868:	701f           	moveq #31,%d0
    286a:	6000 feae      	braw 271a <_ntoa_long+0x430>
      buf[len++] = 'x';
    286e:	1fbc 0078 4840 	moveb #120,%sp@(40,%d4:l)
    2874:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2876:	7220           	moveq #32,%d1
    2878:	b284           	cmpl %d4,%d1
    287a:	6700 fd20      	beqw 259c <_ntoa_long+0x2b2>
    287e:	6000 fd82      	braw 2602 <_ntoa_long+0x318>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2882:	b284           	cmpl %d4,%d1
    2884:	6700 fed0      	beqw 2756 <_ntoa_long+0x46c>
      buf[len++] = 'X';
    2888:	1fbc 0058 4840 	moveb #88,%sp@(40,%d4:l)
    288e:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2890:	7220           	moveq #32,%d1
    2892:	b284           	cmpl %d4,%d1
    2894:	6700 fd06      	beqw 259c <_ntoa_long+0x2b2>
    2898:	6000 fd68      	braw 2602 <_ntoa_long+0x318>
      buf[len++] = 'b';
    289c:	1f7c 0062 0040 	moveb #98,%sp@(64)
      buf[len++] = '0';
    28a2:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    28a8:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    28ac:	7402           	moveq #2,%d2
    28ae:	6000 fb4a      	braw 23fa <_ntoa_long+0x110>
    28b2:	262f 006c      	movel %sp@(108),%d3
    28b6:	6000 fba2      	braw 245a <_ntoa_long+0x170>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28ba:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    28bc:	4aaf 0036      	tstl %sp@(54)
    28c0:	6600 fb10      	bnew 23d2 <_ntoa_long+0xe8>
    28c4:	6000 fd46      	braw 260c <_ntoa_long+0x322>
      buf[len++] = 'x';
    28c8:	41f7 483e      	lea %sp@(3e,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28cc:	082f 0005 008b 	btst #5,%sp@(139)
    28d2:	6600 fd28      	bnew 25fc <_ntoa_long+0x312>
      buf[len++] = 'x';
    28d6:	2004           	movel %d4,%d0
    28d8:	5380           	subql #1,%d0
    28da:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    28de:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
    28e4:	6000 fd26      	braw 260c <_ntoa_long+0x322>
  if (flags & FLAGS_HASH) {
    28e8:	4aaf 0036      	tstl %sp@(54)
    28ec:	6700 fe88      	beqw 2776 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    28f0:	4aaf 0032      	tstl %sp@(50)
    28f4:	660e           	bnes 2904 <_ntoa_long+0x61a>
    28f6:	7020           	moveq #32,%d0
    28f8:	b0af 0080      	cmpl %sp@(128),%d0
    28fc:	6738           	beqs 2936 <_ntoa_long+0x64c>
    28fe:	7220           	moveq #32,%d1
    2900:	b287           	cmpl %d7,%d1
    2902:	6732           	beqs 2936 <_ntoa_long+0x64c>
    2904:	9dce           	subal %fp,%fp
    2906:	6000 fc7a      	braw 2582 <_ntoa_long+0x298>
  if (flags & FLAGS_HASH) {
    290a:	4aaf 0036      	tstl %sp@(54)
    290e:	6700 fc98      	beqw 25a8 <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2912:	4aaf 0032      	tstl %sp@(50)
    2916:	6708           	beqs 2920 <_ntoa_long+0x636>
    2918:	9dce           	subal %fp,%fp
    291a:	7820           	moveq #32,%d4
    291c:	6000 fc64      	braw 2582 <_ntoa_long+0x298>
    2920:	7020           	moveq #32,%d0
    2922:	7820           	moveq #32,%d4
    2924:	b0af 0080      	cmpl %sp@(128),%d0
    2928:	6714           	beqs 293e <_ntoa_long+0x654>
    292a:	9dce           	subal %fp,%fp
    292c:	be84           	cmpl %d4,%d7
    292e:	6600 fc52      	bnew 2582 <_ntoa_long+0x298>
    2932:	6000 fdda      	braw 270e <_ntoa_long+0x424>
    2936:	9dce           	subal %fp,%fp
      len--;
    2938:	701f           	moveq #31,%d0
    293a:	6000 fdde      	braw 271a <_ntoa_long+0x430>
    293e:	701f           	moveq #31,%d0
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2940:	9dce           	subal %fp,%fp
    2942:	6000 fdd6      	braw 271a <_ntoa_long+0x430>

00002946 <_out_char>:
{
    2946:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    294a:	4a00           	tstb %d0
    294c:	6602           	bnes 2950 <_out_char+0xa>
}
    294e:	4e75           	rts
    _putchar(character);
    2950:	4880           	extw %d0
    2952:	3040           	moveaw %d0,%a0
    2954:	2f48 0004      	movel %a0,%sp@(4)
    2958:	4ef9 0000 3192 	jmp 3192 <_putchar>

0000295e <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    295e:	4fef fff4      	lea %sp@(-12),%sp
    2962:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2966:	2a6f 003c      	moveal %sp@(60),%a5
    296a:	2c2f 0040      	movel %sp@(64),%d6
    296e:	242f 0044      	movel %sp@(68),%d2
    2972:	286f 0048      	moveal %sp@(72),%a4
    2976:	262f 004c      	movel %sp@(76),%d3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    297a:	4a86           	tstl %d6
    297c:	6700 023e      	beqw 2bbc <_vsnprintf+0x25e>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2980:	1014           	moveb %a4@,%d0
    2982:	95ca           	subal %a2,%a2
    2984:	4a00           	tstb %d0
    2986:	6700 0244      	beqw 2bcc <_vsnprintf+0x26e>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    298a:	2c7c 0000 29fa 	moveal #10746,%fp
      format++;
    2990:	528c           	addql #1,%a4
    if (*format != '%') {
    2992:	0c00 0025      	cmpib #37,%d0
    2996:	6740           	beqs 29d8 <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    2998:	280a           	movel %a2,%d4
    299a:	5284           	addql #1,%d4
    299c:	2f02           	movel %d2,%sp@-
    299e:	2f0a           	movel %a2,%sp@-
    29a0:	2f06           	movel %d6,%sp@-
    29a2:	4880           	extw %d0
    29a4:	3040           	moveaw %d0,%a0
    29a6:	2f08           	movel %a0,%sp@-
    29a8:	4e95           	jsr %a5@
      continue;
    29aa:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    29ae:	2444           	moveal %d4,%a2
  while (*format)
    29b0:	1014           	moveb %a4@,%d0
    29b2:	66dc           	bnes 2990 <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    29b4:	260a           	movel %a2,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    29b6:	b5c2           	cmpal %d2,%a2
    29b8:	6504           	bcss 29be <_vsnprintf+0x60>
    29ba:	2442           	moveal %d2,%a2
    29bc:	538a           	subql #1,%a2
    29be:	2f02           	movel %d2,%sp@-
    29c0:	2f0a           	movel %a2,%sp@-
    29c2:	2f06           	movel %d6,%sp@-
    29c4:	42a7           	clrl %sp@-
    29c6:	4e95           	jsr %a5@
  return (int)idx;
    29c8:	4fef 0010      	lea %sp@(16),%sp
}
    29cc:	2003           	movel %d3,%d0
    29ce:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    29d2:	4fef 000c      	lea %sp@(12),%sp
    29d6:	4e75           	rts
    flags = 0U;
    29d8:	7200           	moveq #0,%d1
      switch (*format) {
    29da:	204c           	moveal %a4,%a0
    29dc:	1018           	moveb %a0@+,%d0
    29de:	1800           	moveb %d0,%d4
    29e0:	0604 ffe0      	addib #-32,%d4
    29e4:	0c04 0010      	cmpib #16,%d4
    29e8:	6232           	bhis 2a1c <_vsnprintf+0xbe>
    29ea:	0284 0000 00ff 	andil #255,%d4
    29f0:	d884           	addl %d4,%d4
    29f2:	3276 4800      	moveaw %fp@(0,%d4:l),%a1
    29f6:	4efb 9002      	jmp %pc@(29fa <_vsnprintf+0x9c>,%a1:w)
    29fa:	00e2           	.short 0x00e2
    29fc:	0022 0022      	orib #34,%a2@-
    2a00:	00d8           	.short 0x00d8
    2a02:	0022 0022      	orib #34,%a2@-
    2a06:	0022 0022      	orib #34,%a2@-
    2a0a:	0022 0022      	orib #34,%a2@-
    2a0e:	0022 00ce      	orib #-50,%a2@-
    2a12:	0022 00c4      	orib #-60,%a2@-
    2a16:	0022 0022      	orib #34,%a2@-
    2a1a:	00ba           	.short 0x00ba
  return (ch >= '0') && (ch <= '9');
    2a1c:	1800           	moveb %d0,%d4
    2a1e:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2a22:	0c04 0009      	cmpib #9,%d4
    2a26:	6300 00be      	blsw 2ae6 <_vsnprintf+0x188>
    else if (*format == '*') {
    2a2a:	0c00 002a      	cmpib #42,%d0
    2a2e:	6700 0172      	beqw 2ba2 <_vsnprintf+0x244>
    width = 0U;
    2a32:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2a34:	0c00 002e      	cmpib #46,%d0
    2a38:	6700 00fc      	beqw 2b36 <_vsnprintf+0x1d8>
    precision = 0U;
    2a3c:	7e00           	moveq #0,%d7
        format++;
    2a3e:	2808           	movel %a0,%d4
    switch (*format) {
    2a40:	0c00 006c      	cmpib #108,%d0
    2a44:	6700 011e      	beqw 2b64 <_vsnprintf+0x206>
    2a48:	0c00 006c      	cmpib #108,%d0
    2a4c:	6e00 0136      	bgtw 2b84 <_vsnprintf+0x226>
    2a50:	0c00 0068      	cmpib #104,%d0
    2a54:	6700 02c8      	beqw 2d1e <_vsnprintf+0x3c0>
    2a58:	0c00 006a      	cmpib #106,%d0
    2a5c:	6600 017a      	bnew 2bd8 <_vsnprintf+0x27a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2a60:	0041 0200      	oriw #512,%d1
        if (*format == 'l') {
    2a64:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2a68:	2844           	moveal %d4,%a4
    2a6a:	528c           	addql #1,%a4
    switch (*format) {
    2a6c:	0c00 0078      	cmpib #120,%d0
    2a70:	6e00 0198      	bgtw 2c0a <_vsnprintf+0x2ac>
    2a74:	0c00 0063      	cmpib #99,%d0
    2a78:	6e00 0168      	bgtw 2be2 <_vsnprintf+0x284>
    2a7c:	0c00 0062      	cmpib #98,%d0
    2a80:	6700 05de      	beqw 3060 <_vsnprintf+0x702>
    2a84:	0c00 0063      	cmpib #99,%d0
    2a88:	6700 0362      	beqw 2dec <_vsnprintf+0x48e>
    2a8c:	0c00 0025      	cmpib #37,%d0
    2a90:	6600 050a      	bnew 2f9c <_vsnprintf+0x63e>
        out('%', buffer, idx++, maxlen);
    2a94:	280a           	movel %a2,%d4
    2a96:	5284           	addql #1,%d4
    2a98:	2f02           	movel %d2,%sp@-
    2a9a:	2f0a           	movel %a2,%sp@-
    2a9c:	2f06           	movel %d6,%sp@-
    2a9e:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2aa2:	4e95           	jsr %a5@
        break;
    2aa4:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2aa8:	2444           	moveal %d4,%a2
  while (*format)
    2aaa:	1014           	moveb %a4@,%d0
    2aac:	6600 fee2      	bnew 2990 <_vsnprintf+0x32>
    2ab0:	6000 ff02      	braw 29b4 <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2ab4:	7001           	moveq #1,%d0
    2ab6:	8280           	orl %d0,%d1
  while (*format)
    2ab8:	2848           	moveal %a0,%a4
    2aba:	6000 ff1e      	braw 29da <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2abe:	7a02           	moveq #2,%d5
    2ac0:	8285           	orl %d5,%d1
  while (*format)
    2ac2:	2848           	moveal %a0,%a4
    2ac4:	6000 ff14      	braw 29da <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2ac8:	7004           	moveq #4,%d0
    2aca:	8280           	orl %d0,%d1
  while (*format)
    2acc:	2848           	moveal %a0,%a4
    2ace:	6000 ff0a      	braw 29da <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2ad2:	7010           	moveq #16,%d0
    2ad4:	8280           	orl %d0,%d1
  while (*format)
    2ad6:	2848           	moveal %a0,%a4
    2ad8:	6000 ff00      	braw 29da <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2adc:	7a08           	moveq #8,%d5
    2ade:	8285           	orl %d5,%d1
  while (*format)
    2ae0:	2848           	moveal %a0,%a4
    2ae2:	6000 fef6      	braw 29da <_vsnprintf+0x7c>
  unsigned int i = 0U;
    2ae6:	97cb           	subal %a3,%a3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ae8:	2848           	moveal %a0,%a4
    2aea:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2aee:	d3c9           	addal %a1,%a1
    2af0:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2af4:	d7cb           	addal %a3,%a3
    2af6:	4880           	extw %d0
    2af8:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2afc:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2afe:	1800           	moveb %d0,%d4
    2b00:	0604 ffd0      	addib #-48,%d4
    2b04:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2b06:	0c04 0009      	cmpib #9,%d4
    2b0a:	6200 ff28      	bhiw 2a34 <_vsnprintf+0xd6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2b0e:	2848           	moveal %a0,%a4
    2b10:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2b14:	d3c9           	addal %a1,%a1
    2b16:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2b1a:	d7cb           	addal %a3,%a3
    2b1c:	4880           	extw %d0
    2b1e:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2b22:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2b24:	1800           	moveb %d0,%d4
    2b26:	0604 ffd0      	addib #-48,%d4
    2b2a:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2b2c:	0c04 0009      	cmpib #9,%d4
    2b30:	63b6           	blss 2ae8 <_vsnprintf+0x18a>
    2b32:	6000 ff00      	braw 2a34 <_vsnprintf+0xd6>
      flags |= FLAGS_PRECISION;
    2b36:	0041 0400      	oriw #1024,%d1
      if (_is_digit(*format)) {
    2b3a:	102c 0001      	moveb %a4@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2b3e:	1a00           	moveb %d0,%d5
    2b40:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2b44:	0c05 0009      	cmpib #9,%d5
    2b48:	6300 02f6      	blsw 2e40 <_vsnprintf+0x4e2>
      else if (*format == '*') {
    2b4c:	0c00 002a      	cmpib #42,%d0
    2b50:	6700 0334      	beqw 2e86 <_vsnprintf+0x528>
      format++;
    2b54:	2848           	moveal %a0,%a4
    precision = 0U;
    2b56:	7e00           	moveq #0,%d7
    2b58:	5288           	addql #1,%a0
        format++;
    2b5a:	2808           	movel %a0,%d4
    switch (*format) {
    2b5c:	0c00 006c      	cmpib #108,%d0
    2b60:	6600 fee6      	bnew 2a48 <_vsnprintf+0xea>
        if (*format == 'l') {
    2b64:	102c 0001      	moveb %a4@(1),%d0
    2b68:	0c00 006c      	cmpib #108,%d0
    2b6c:	6700 040a      	beqw 2f78 <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2b70:	0041 0100      	oriw #256,%d1
        format++;
    2b74:	2844           	moveal %d4,%a4
    2b76:	528c           	addql #1,%a4
    switch (*format) {
    2b78:	0c00 0078      	cmpib #120,%d0
    2b7c:	6f00 fef6      	blew 2a74 <_vsnprintf+0x116>
    2b80:	6000 0088      	braw 2c0a <_vsnprintf+0x2ac>
    switch (*format) {
    2b84:	0c00 007a      	cmpib #122,%d0
    2b88:	6600 00a2      	bnew 2c2c <_vsnprintf+0x2ce>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2b8c:	0041 0100      	oriw #256,%d1
        if (*format == 'l') {
    2b90:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2b94:	2844           	moveal %d4,%a4
    2b96:	528c           	addql #1,%a4
    switch (*format) {
    2b98:	0c00 0078      	cmpib #120,%d0
    2b9c:	6f00 fed6      	blew 2a74 <_vsnprintf+0x116>
    2ba0:	6068           	bras 2c0a <_vsnprintf+0x2ac>
      const int w = va_arg(va, int);
    2ba2:	2243           	moveal %d3,%a1
    2ba4:	2659           	moveal %a1@+,%a3
    2ba6:	2609           	movel %a1,%d3
      if (w < 0) {
    2ba8:	b6fc 0000      	cmpaw #0,%a3
    2bac:	6d00 0124      	bltw 2cd2 <_vsnprintf+0x374>
    if (*format == '.') {
    2bb0:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2bb4:	2848           	moveal %a0,%a4
    2bb6:	5288           	addql #1,%a0
    2bb8:	6000 fe7a      	braw 2a34 <_vsnprintf+0xd6>
    out = _out_null;
    2bbc:	4bf9 0000 22e8 	lea 22e8 <_out_null>,%a5
  while (*format)
    2bc2:	1014           	moveb %a4@,%d0
    2bc4:	95ca           	subal %a2,%a2
    2bc6:	4a00           	tstb %d0
    2bc8:	6600 fdc0      	bnew 298a <_vsnprintf+0x2c>
    2bcc:	7600           	moveq #0,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2bce:	b5c2           	cmpal %d2,%a2
    2bd0:	6500 fdec      	bcsw 29be <_vsnprintf+0x60>
    2bd4:	6000 fde4      	braw 29ba <_vsnprintf+0x5c>
        format++;
    2bd8:	2848           	moveal %a0,%a4
    switch (*format) {
    2bda:	0c00 0063      	cmpib #99,%d0
    2bde:	6f00 fe9c      	blew 2a7c <_vsnprintf+0x11e>
    2be2:	1a00           	moveb %d0,%d5
    2be4:	0605 ff9c      	addib #-100,%d5
    2be8:	0285 0000 00ff 	andil #255,%d5
    2bee:	7801           	moveq #1,%d4
    2bf0:	ebac           	lsll %d5,%d4
    2bf2:	0284 0012 0821 	andil #1181729,%d4
    2bf8:	6652           	bnes 2c4c <_vsnprintf+0x2ee>
    2bfa:	0c00 0073      	cmpib #115,%d0
    2bfe:	6700 0140      	beqw 2d40 <_vsnprintf+0x3e2>
    2c02:	0c00 0070      	cmpib #112,%d0
    2c06:	6700 00e0      	beqw 2ce8 <_vsnprintf+0x38a>
        out(*format, buffer, idx++, maxlen);
    2c0a:	280a           	movel %a2,%d4
    2c0c:	5284           	addql #1,%d4
    2c0e:	2f02           	movel %d2,%sp@-
    2c10:	2f0a           	movel %a2,%sp@-
    2c12:	2f06           	movel %d6,%sp@-
    2c14:	4880           	extw %d0
    2c16:	3240           	moveaw %d0,%a1
    2c18:	2f09           	movel %a1,%sp@-
    2c1a:	4e95           	jsr %a5@
        break;
    2c1c:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2c20:	2444           	moveal %d4,%a2
  while (*format)
    2c22:	1014           	moveb %a4@,%d0
    2c24:	6600 fd6a      	bnew 2990 <_vsnprintf+0x32>
    2c28:	6000 fd8a      	braw 29b4 <_vsnprintf+0x56>
        format++;
    2c2c:	2848           	moveal %a0,%a4
    switch (*format) {
    2c2e:	0c00 0078      	cmpib #120,%d0
    2c32:	6ed6           	bgts 2c0a <_vsnprintf+0x2ac>
    2c34:	1a00           	moveb %d0,%d5
    2c36:	0605 ff9c      	addib #-100,%d5
    2c3a:	0285 0000 00ff 	andil #255,%d5
    2c40:	7801           	moveq #1,%d4
    2c42:	ebac           	lsll %d5,%d4
    2c44:	0284 0012 0821 	andil #1181729,%d4
    2c4a:	67ae           	beqs 2bfa <_vsnprintf+0x29c>
        if (*format == 'x' || *format == 'X') {
    2c4c:	0c00 006f      	cmpib #111,%d0
    2c50:	6700 025c      	beqw 2eae <_vsnprintf+0x550>
    2c54:	6e00 03f2      	bgtw 3048 <_vsnprintf+0x6ea>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2c58:	78ef           	moveq #-17,%d4
    2c5a:	c881           	andl %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    2c5c:	0c00 0069      	cmpib #105,%d0
    2c60:	6600 045e      	bnew 30c0 <_vsnprintf+0x762>
        if (flags & FLAGS_PRECISION) {
    2c64:	0801 000a      	btst #10,%d1
    2c68:	6704           	beqs 2c6e <_vsnprintf+0x310>
          flags &= ~FLAGS_ZEROPAD;
    2c6a:	78ee           	moveq #-18,%d4
    2c6c:	c881           	andl %d1,%d4
          if (flags & FLAGS_LONG_LONG) {
    2c6e:	0804 0009      	btst #9,%d4
    2c72:	6600 fd3c      	bnew 29b0 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2c76:	2a03           	movel %d3,%d5
    2c78:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    2c7a:	0804 0008      	btst #8,%d4
    2c7e:	6600 0470      	bnew 30f0 <_vsnprintf+0x792>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2c82:	0804 0006      	btst #6,%d4
    2c86:	6600 03e0      	bnew 3068 <_vsnprintf+0x70a>
    2c8a:	4a04           	tstb %d4
    2c8c:	6a00 04ac      	bplw 313a <_vsnprintf+0x7dc>
    2c90:	2043           	moveal %d3,%a0
    2c92:	2010           	movel %a0@,%d0
    2c94:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2c96:	2f04           	movel %d4,%sp@-
    2c98:	2f0b           	movel %a3,%sp@-
    2c9a:	2f07           	movel %d7,%sp@-
    2c9c:	4878 000a      	pea a <DUART_IMR>
    2ca0:	2200           	movel %d0,%d1
    2ca2:	d281           	addl %d1,%d1
    2ca4:	9381           	subxl %d1,%d1
    2ca6:	4481           	negl %d1
    2ca8:	2f01           	movel %d1,%sp@-
    2caa:	4a80           	tstl %d0
    2cac:	6d00 03dc      	bltw 308a <_vsnprintf+0x72c>
    2cb0:	2f00           	movel %d0,%sp@-
    2cb2:	2f02           	movel %d2,%sp@-
    2cb4:	2f0a           	movel %a2,%sp@-
    2cb6:	2f06           	movel %d6,%sp@-
    2cb8:	2f0d           	movel %a5,%sp@-
    2cba:	4eb9 0000 22ea 	jsr 22ea <_ntoa_long>
    2cc0:	2440           	moveal %d0,%a2
    2cc2:	4fef 0028      	lea %sp@(40),%sp
    2cc6:	2605           	movel %d5,%d3
  while (*format)
    2cc8:	1014           	moveb %a4@,%d0
    2cca:	6600 fcc4      	bnew 2990 <_vsnprintf+0x32>
    2cce:	6000 fce4      	braw 29b4 <_vsnprintf+0x56>
        flags |= FLAGS_LEFT;    // reverse padding
    2cd2:	7002           	moveq #2,%d0
    2cd4:	8280           	orl %d0,%d1
        width = (unsigned int)-w;
    2cd6:	2a0b           	movel %a3,%d5
    2cd8:	4485           	negl %d5
    2cda:	2645           	moveal %d5,%a3
    if (*format == '.') {
    2cdc:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2ce0:	2848           	moveal %a0,%a4
    2ce2:	5288           	addql #1,%a0
    2ce4:	6000 fd4e      	braw 2a34 <_vsnprintf+0xd6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2ce8:	7021           	moveq #33,%d0
    2cea:	8081           	orl %d1,%d0
    2cec:	2f00           	movel %d0,%sp@-
    2cee:	4878 0008      	pea 8 <DUART_ACR>
    2cf2:	2f07           	movel %d7,%sp@-
    2cf4:	4878 0010      	pea 10 <DUART_MR1B>
    2cf8:	42a7           	clrl %sp@-
    2cfa:	2043           	moveal %d3,%a0
    2cfc:	2f18           	movel %a0@+,%sp@-
    2cfe:	2608           	movel %a0,%d3
    2d00:	2f02           	movel %d2,%sp@-
    2d02:	2f0a           	movel %a2,%sp@-
    2d04:	2f06           	movel %d6,%sp@-
    2d06:	2f0d           	movel %a5,%sp@-
    2d08:	4eb9 0000 22ea 	jsr 22ea <_ntoa_long>
    2d0e:	2440           	moveal %d0,%a2
        break;
    2d10:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2d14:	1014           	moveb %a4@,%d0
    2d16:	6600 fc78      	bnew 2990 <_vsnprintf+0x32>
    2d1a:	6000 fc98      	braw 29b4 <_vsnprintf+0x56>
        if (*format == 'h') {
    2d1e:	102c 0001      	moveb %a4@(1),%d0
    2d22:	0c00 0068      	cmpib #104,%d0
    2d26:	6700 0232      	beqw 2f5a <_vsnprintf+0x5fc>
        flags |= FLAGS_SHORT;
    2d2a:	7a7f           	moveq #127,%d5
    2d2c:	4605           	notb %d5
    2d2e:	8285           	orl %d5,%d1
        format++;
    2d30:	2844           	moveal %d4,%a4
    2d32:	528c           	addql #1,%a4
    switch (*format) {
    2d34:	0c00 0078      	cmpib #120,%d0
    2d38:	6f00 fd3a      	blew 2a74 <_vsnprintf+0x116>
    2d3c:	6000 fecc      	braw 2c0a <_vsnprintf+0x2ac>
        const char* p = va_arg(va, char*);
    2d40:	2f43 0030      	movel %d3,%sp@(48)
    2d44:	2243           	moveal %d3,%a1
    2d46:	58af 0030      	addql #4,%sp@(48)
    2d4a:	2619           	movel %a1@+,%d3
  for (s = str; *s && maxsize--; ++s);
    2d4c:	2043           	moveal %d3,%a0
    2d4e:	1f50 002f      	moveb %a0@,%sp@(47)
    2d52:	102f 002f      	moveb %sp@(47),%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2d56:	4a87           	tstl %d7
    2d58:	6700 0118      	beqw 2e72 <_vsnprintf+0x514>
  for (s = str; *s && maxsize--; ++s);
    2d5c:	4a00           	tstb %d0
    2d5e:	671a           	beqs 2d7a <_vsnprintf+0x41c>
    2d60:	2807           	movel %d7,%d4
    2d62:	5384           	subql #1,%d4
    2d64:	2043           	moveal %d3,%a0
    2d66:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2d6a:	5288           	addql #1,%a0
    2d6c:	4a10           	tstb %a0@
    2d6e:	6700 01e2      	beqw 2f52 <_vsnprintf+0x5f4>
    2d72:	b1c9           	cmpal %a1,%a0
    2d74:	66f4           	bnes 2d6a <_vsnprintf+0x40c>
  return (unsigned int)(s - str);
    2d76:	2809           	movel %a1,%d4
    2d78:	9883           	subl %d3,%d4
        if (flags & FLAGS_PRECISION) {
    2d7a:	2a01           	movel %d1,%d5
    2d7c:	0285 0000 0400 	andil #1024,%d5
    2d82:	2245           	moveal %d5,%a1
    2d84:	0801 000a      	btst #10,%d1
    2d88:	6706           	beqs 2d90 <_vsnprintf+0x432>
          l = (l < precision ? l : precision);
    2d8a:	be84           	cmpl %d4,%d7
    2d8c:	6402           	bccs 2d90 <_vsnprintf+0x432>
    2d8e:	2807           	movel %d7,%d4
        if (!(flags & FLAGS_LEFT)) {
    2d90:	7a02           	moveq #2,%d5
    2d92:	ca81           	andl %d1,%d5
    2d94:	2f45 0034      	movel %d5,%sp@(52)
    2d98:	0801 0001      	btst #1,%d1
    2d9c:	6700 0258      	beqw 2ff6 <_vsnprintf+0x698>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2da0:	4a2f 002f      	tstb %sp@(47)
    2da4:	6700 017a      	beqw 2f20 <_vsnprintf+0x5c2>
    2da8:	220a           	movel %a2,%d1
    2daa:	2a09           	movel %a1,%d5
    2dac:	204b           	moveal %a3,%a0
    2dae:	2643           	moveal %d3,%a3
    2db0:	224c           	moveal %a4,%a1
    2db2:	284a           	moveal %a2,%a4
    2db4:	2447           	moveal %d7,%a2
    2db6:	2e09           	movel %a1,%d7
    2db8:	2608           	movel %a0,%d3
    2dba:	4a85           	tstl %d5
    2dbc:	670e           	beqs 2dcc <_vsnprintf+0x46e>
    2dbe:	41ea ffff      	lea %a2@(-1),%a0
    2dc2:	b4fc 0000      	cmpaw #0,%a2
    2dc6:	6700 014c      	beqw 2f14 <_vsnprintf+0x5b6>
    2dca:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    2dcc:	528c           	addql #1,%a4
    2dce:	528b           	addql #1,%a3
    2dd0:	2f02           	movel %d2,%sp@-
    2dd2:	2f01           	movel %d1,%sp@-
    2dd4:	2f06           	movel %d6,%sp@-
    2dd6:	4880           	extw %d0
    2dd8:	3240           	moveaw %d0,%a1
    2dda:	2f09           	movel %a1,%sp@-
    2ddc:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2dde:	1013           	moveb %a3@,%d0
    2de0:	4fef 0010      	lea %sp@(16),%sp
    2de4:	6700 012e      	beqw 2f14 <_vsnprintf+0x5b6>
    2de8:	220c           	movel %a4,%d1
    2dea:	60ce           	bras 2dba <_vsnprintf+0x45c>
      out(*format, buffer, idx++, maxlen);
    2dec:	280a           	movel %a2,%d4
    2dee:	5284           	addql #1,%d4
            const long value = va_arg(va, long);
    2df0:	2a03           	movel %d3,%d5
    2df2:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    2df4:	0801 0001      	btst #1,%d1
    2df8:	6700 01b6      	beqw 2fb0 <_vsnprintf+0x652>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2dfc:	2f02           	movel %d2,%sp@-
    2dfe:	2f0a           	movel %a2,%sp@-
    2e00:	2f06           	movel %d6,%sp@-
    2e02:	2043           	moveal %d3,%a0
    2e04:	2010           	movel %a0@,%d0
    2e06:	4880           	extw %d0
    2e08:	3240           	moveaw %d0,%a1
    2e0a:	2f09           	movel %a1,%sp@-
    2e0c:	4e95           	jsr %a5@
          while (l++ < width) {
    2e0e:	4fef 0010      	lea %sp@(16),%sp
    2e12:	d5cb           	addal %a3,%a2
    2e14:	7001           	moveq #1,%d0
    2e16:	b08b           	cmpl %a3,%d0
    2e18:	6400 02ce      	bccw 30e8 <_vsnprintf+0x78a>
            out(' ', buffer, idx++, maxlen);
    2e1c:	2004           	movel %d4,%d0
    2e1e:	5284           	addql #1,%d4
    2e20:	2f02           	movel %d2,%sp@-
    2e22:	2f00           	movel %d0,%sp@-
    2e24:	2f06           	movel %d6,%sp@-
    2e26:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2e2a:	4e95           	jsr %a5@
          while (l++ < width) {
    2e2c:	4fef 0010      	lea %sp@(16),%sp
    2e30:	b5c4           	cmpal %d4,%a2
    2e32:	66e8           	bnes 2e1c <_vsnprintf+0x4be>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2e34:	2605           	movel %d5,%d3
  while (*format)
    2e36:	1014           	moveb %a4@,%d0
    2e38:	6600 fb56      	bnew 2990 <_vsnprintf+0x32>
    2e3c:	6000 fb76      	braw 29b4 <_vsnprintf+0x56>
  unsigned int i = 0U;
    2e40:	7e00           	moveq #0,%d7
    2e42:	2848           	moveal %a0,%a4
    2e44:	2047           	moveal %d7,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2e46:	528c           	addql #1,%a4
    2e48:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    2e4c:	d3c9           	addal %a1,%a1
    2e4e:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    2e52:	d1c8           	addal %a0,%a0
    2e54:	4880           	extw %d0
    2e56:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    2e5a:	1014           	moveb %a4@,%d0
  return (ch >= '0') && (ch <= '9');
    2e5c:	1800           	moveb %d0,%d4
    2e5e:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2e62:	0c04 0009      	cmpib #9,%d4
    2e66:	63de           	blss 2e46 <_vsnprintf+0x4e8>
    2e68:	2e08           	movel %a0,%d7
    2e6a:	41ec 0001      	lea %a4@(1),%a0
    2e6e:	6000 fbce      	braw 2a3e <_vsnprintf+0xe0>
  for (s = str; *s && maxsize--; ++s);
    2e72:	4a2f 002f      	tstb %sp@(47)
    2e76:	6700 ff02      	beqw 2d7a <_vsnprintf+0x41c>
    2e7a:	78fe           	moveq #-2,%d4
    2e7c:	2043           	moveal %d3,%a0
    2e7e:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2e82:	6000 fee6      	braw 2d6a <_vsnprintf+0x40c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2e86:	2043           	moveal %d3,%a0
    2e88:	2e18           	movel %a0@+,%d7
    2e8a:	2608           	movel %a0,%d3
    2e8c:	4a87           	tstl %d7
    2e8e:	6d0e           	blts 2e9e <_vsnprintf+0x540>
    switch (*format) {
    2e90:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2e94:	548c           	addql #2,%a4
    2e96:	41ec 0001      	lea %a4@(1),%a0
    2e9a:	6000 fba2      	braw 2a3e <_vsnprintf+0xe0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2e9e:	7e00           	moveq #0,%d7
    switch (*format) {
    2ea0:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2ea4:	548c           	addql #2,%a4
    2ea6:	41ec 0001      	lea %a4@(1),%a0
    2eaa:	6000 fb92      	braw 2a3e <_vsnprintf+0xe0>
    switch (*format) {
    2eae:	307c 0008      	moveaw #8,%a0
        if (flags & FLAGS_PRECISION) {
    2eb2:	0801 000a      	btst #10,%d1
    2eb6:	6600 00dc      	bnew 2f94 <_vsnprintf+0x636>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2eba:	70f3           	moveq #-13,%d0
    2ebc:	c280           	andl %d0,%d1
          if (flags & FLAGS_LONG_LONG) {
    2ebe:	0801 0009      	btst #9,%d1
    2ec2:	6600 faec      	bnew 29b0 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2ec6:	2803           	movel %d3,%d4
    2ec8:	5884           	addql #4,%d4
          else if (flags & FLAGS_LONG) {
    2eca:	0801 0008      	btst #8,%d1
    2ece:	6600 0242      	bnew 3112 <_vsnprintf+0x7b4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2ed2:	0801 0006      	btst #6,%d1
    2ed6:	6600 01d0      	bnew 30a8 <_vsnprintf+0x74a>
    2eda:	2243           	moveal %d3,%a1
    2edc:	2011           	movel %a1@,%d0
    2ede:	4a01           	tstb %d1
    2ee0:	6a06           	bpls 2ee8 <_vsnprintf+0x58a>
    2ee2:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2ee8:	2f01           	movel %d1,%sp@-
    2eea:	2f0b           	movel %a3,%sp@-
    2eec:	2f07           	movel %d7,%sp@-
    2eee:	2f08           	movel %a0,%sp@-
    2ef0:	42a7           	clrl %sp@-
    2ef2:	2f00           	movel %d0,%sp@-
    2ef4:	2f02           	movel %d2,%sp@-
    2ef6:	2f0a           	movel %a2,%sp@-
    2ef8:	2f06           	movel %d6,%sp@-
    2efa:	2f0d           	movel %a5,%sp@-
    2efc:	4eb9 0000 22ea 	jsr 22ea <_ntoa_long>
    2f02:	2440           	moveal %d0,%a2
    2f04:	4fef 0028      	lea %sp@(40),%sp
    2f08:	2604           	movel %d4,%d3
  while (*format)
    2f0a:	1014           	moveb %a4@,%d0
    2f0c:	6600 fa82      	bnew 2990 <_vsnprintf+0x32>
    2f10:	6000 faa2      	braw 29b4 <_vsnprintf+0x56>
    2f14:	2643           	moveal %d3,%a3
    2f16:	244c           	moveal %a4,%a2
    2f18:	2847           	moveal %d7,%a4
        if (flags & FLAGS_LEFT) {
    2f1a:	4aaf 0034      	tstl %sp@(52)
    2f1e:	6724           	beqs 2f44 <_vsnprintf+0x5e6>
    2f20:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    2f22:	b88b           	cmpl %a3,%d4
    2f24:	641e           	bccs 2f44 <_vsnprintf+0x5e6>
    2f26:	45f3 a800      	lea %a3@(0,%a2:l),%a2
    2f2a:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    2f2c:	2005           	movel %d5,%d0
    2f2e:	5285           	addql #1,%d5
    2f30:	2f02           	movel %d2,%sp@-
    2f32:	2f00           	movel %d0,%sp@-
    2f34:	2f06           	movel %d6,%sp@-
    2f36:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2f3a:	4e95           	jsr %a5@
          while (l++ < width) {
    2f3c:	4fef 0010      	lea %sp@(16),%sp
    2f40:	ba8a           	cmpl %a2,%d5
    2f42:	66e8           	bnes 2f2c <_vsnprintf+0x5ce>
        const char* p = va_arg(va, char*);
    2f44:	262f 0030      	movel %sp@(48),%d3
  while (*format)
    2f48:	1014           	moveb %a4@,%d0
    2f4a:	6600 fa44      	bnew 2990 <_vsnprintf+0x32>
    2f4e:	6000 fa64      	braw 29b4 <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    2f52:	2808           	movel %a0,%d4
    2f54:	9883           	subl %d3,%d4
    2f56:	6000 fe22      	braw 2d7a <_vsnprintf+0x41c>
          flags |= FLAGS_CHAR;
    2f5a:	703f           	moveq #63,%d0
    2f5c:	4600           	notb %d0
    2f5e:	8280           	orl %d0,%d1
          format++;
    2f60:	280c           	movel %a4,%d4
    2f62:	5484           	addql #2,%d4
    switch (*format) {
    2f64:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2f68:	2844           	moveal %d4,%a4
    2f6a:	528c           	addql #1,%a4
    switch (*format) {
    2f6c:	0c00 0078      	cmpib #120,%d0
    2f70:	6f00 fb02      	blew 2a74 <_vsnprintf+0x116>
    2f74:	6000 fc94      	braw 2c0a <_vsnprintf+0x2ac>
          flags |= FLAGS_LONG_LONG;
    2f78:	0041 0300      	oriw #768,%d1
          format++;
    2f7c:	280c           	movel %a4,%d4
    2f7e:	5484           	addql #2,%d4
    switch (*format) {
    2f80:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2f84:	2844           	moveal %d4,%a4
    2f86:	528c           	addql #1,%a4
    switch (*format) {
    2f88:	0c00 0078      	cmpib #120,%d0
    2f8c:	6f00 fae6      	blew 2a74 <_vsnprintf+0x116>
    2f90:	6000 fc78      	braw 2c0a <_vsnprintf+0x2ac>
          flags &= ~FLAGS_ZEROPAD;
    2f94:	70f2           	moveq #-14,%d0
    2f96:	c280           	andl %d0,%d1
        if ((*format == 'i') || (*format == 'd')) {
    2f98:	6000 ff24      	braw 2ebe <_vsnprintf+0x560>
    switch (*format) {
    2f9c:	0c00 0058      	cmpib #88,%d0
    2fa0:	6600 fc68      	bnew 2c0a <_vsnprintf+0x2ac>
          flags |= FLAGS_UPPERCASE;
    2fa4:	7a20           	moveq #32,%d5
    2fa6:	8285           	orl %d5,%d1
    2fa8:	307c 0010      	moveaw #16,%a0
    2fac:	6000 ff04      	braw 2eb2 <_vsnprintf+0x554>
          while (l++ < width) {
    2fb0:	7001           	moveq #1,%d0
    2fb2:	b08b           	cmpl %a3,%d0
    2fb4:	6400 011c      	bccw 30d2 <_vsnprintf+0x774>
    2fb8:	41f3 a8ff      	lea %a3@(ffffffffffffffff,%a2:l),%a0
    2fbc:	2e08           	movel %a0,%d7
    2fbe:	280a           	movel %a2,%d4
            out(' ', buffer, idx++, maxlen);
    2fc0:	2004           	movel %d4,%d0
    2fc2:	5284           	addql #1,%d4
    2fc4:	2f02           	movel %d2,%sp@-
    2fc6:	2f00           	movel %d0,%sp@-
    2fc8:	2f06           	movel %d6,%sp@-
    2fca:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2fce:	4e95           	jsr %a5@
          while (l++ < width) {
    2fd0:	4fef 0010      	lea %sp@(16),%sp
    2fd4:	b887           	cmpl %d7,%d4
    2fd6:	66e8           	bnes 2fc0 <_vsnprintf+0x662>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2fd8:	d5cb           	addal %a3,%a2
    2fda:	2f02           	movel %d2,%sp@-
    2fdc:	2f07           	movel %d7,%sp@-
    2fde:	2f06           	movel %d6,%sp@-
    2fe0:	2243           	moveal %d3,%a1
    2fe2:	2011           	movel %a1@,%d0
    2fe4:	4880           	extw %d0
    2fe6:	3040           	moveaw %d0,%a0
    2fe8:	2f08           	movel %a0,%sp@-
    2fea:	4e95           	jsr %a5@
    2fec:	4fef 0010      	lea %sp@(16),%sp
    2ff0:	2605           	movel %d5,%d3
    2ff2:	6000 fe42      	braw 2e36 <_vsnprintf+0x4d8>
          while (l++ < width) {
    2ff6:	b88b           	cmpl %a3,%d4
    2ff8:	6400 0162      	bccw 315c <_vsnprintf+0x7fe>
    2ffc:	200b           	movel %a3,%d0
    2ffe:	d08a           	addl %a2,%d0
    3000:	9084           	subl %d4,%d0
    3002:	2800           	movel %d0,%d4
    3004:	2a09           	movel %a1,%d5
            out(' ', buffer, idx++, maxlen);
    3006:	200a           	movel %a2,%d0
    3008:	528a           	addql #1,%a2
    300a:	2f02           	movel %d2,%sp@-
    300c:	2f00           	movel %d0,%sp@-
    300e:	2f06           	movel %d6,%sp@-
    3010:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3014:	4e95           	jsr %a5@
          while (l++ < width) {
    3016:	4fef 0010      	lea %sp@(16),%sp
    301a:	b5c4           	cmpal %d4,%a2
    301c:	66e8           	bnes 3006 <_vsnprintf+0x6a8>
    301e:	2245           	moveal %d5,%a1
    3020:	280b           	movel %a3,%d4
    3022:	5284           	addql #1,%d4
    3024:	2043           	moveal %d3,%a0
    3026:	1f50 002f      	moveb %a0@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    302a:	102f 002f      	moveb %sp@(47),%d0
    302e:	6700 ff14      	beqw 2f44 <_vsnprintf+0x5e6>
    3032:	220a           	movel %a2,%d1
    3034:	2a09           	movel %a1,%d5
    3036:	204b           	moveal %a3,%a0
    3038:	2643           	moveal %d3,%a3
    303a:	224c           	moveal %a4,%a1
    303c:	284a           	moveal %a2,%a4
    303e:	2447           	moveal %d7,%a2
    3040:	2e09           	movel %a1,%d7
    3042:	2608           	movel %a0,%d3
    3044:	6000 fd74      	braw 2dba <_vsnprintf+0x45c>
    switch (*format) {
    3048:	307c 0010      	moveaw #16,%a0
    304c:	0c00 0078      	cmpib #120,%d0
    3050:	6700 fe60      	beqw 2eb2 <_vsnprintf+0x554>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    3054:	70ef           	moveq #-17,%d0
    3056:	c280           	andl %d0,%d1
    3058:	307c 000a      	moveaw #10,%a0
    305c:	6000 fe54      	braw 2eb2 <_vsnprintf+0x554>
    switch (*format) {
    3060:	307c 0002      	moveaw #2,%a0
    3064:	6000 fe4c      	braw 2eb2 <_vsnprintf+0x554>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3068:	2243           	moveal %d3,%a1
    306a:	2011           	movel %a1@,%d0
    306c:	4880           	extw %d0
    306e:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3070:	2f04           	movel %d4,%sp@-
    3072:	2f0b           	movel %a3,%sp@-
    3074:	2f07           	movel %d7,%sp@-
    3076:	4878 000a      	pea a <DUART_IMR>
    307a:	2200           	movel %d0,%d1
    307c:	d281           	addl %d1,%d1
    307e:	9381           	subxl %d1,%d1
    3080:	4481           	negl %d1
    3082:	2f01           	movel %d1,%sp@-
    3084:	4a80           	tstl %d0
    3086:	6c00 fc28      	bgew 2cb0 <_vsnprintf+0x352>
    308a:	4480           	negl %d0
    308c:	2f00           	movel %d0,%sp@-
    308e:	2f02           	movel %d2,%sp@-
    3090:	2f0a           	movel %a2,%sp@-
    3092:	2f06           	movel %d6,%sp@-
    3094:	2f0d           	movel %a5,%sp@-
    3096:	4eb9 0000 22ea 	jsr 22ea <_ntoa_long>
    309c:	2440           	moveal %d0,%a2
    309e:	4fef 0028      	lea %sp@(40),%sp
    30a2:	2605           	movel %d5,%d3
    30a4:	6000 fc22      	braw 2cc8 <_vsnprintf+0x36a>
    30a8:	7000           	moveq #0,%d0
    30aa:	4600           	notb %d0
    30ac:	2243           	moveal %d3,%a1
    30ae:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    30b0:	2f01           	movel %d1,%sp@-
    30b2:	2f0b           	movel %a3,%sp@-
    30b4:	2f07           	movel %d7,%sp@-
    30b6:	2f08           	movel %a0,%sp@-
    30b8:	42a7           	clrl %sp@-
    30ba:	2f00           	movel %d0,%sp@-
    30bc:	6000 fe36      	braw 2ef4 <_vsnprintf+0x596>
        if ((*format != 'i') && (*format != 'd')) {
    30c0:	0c00 0064      	cmpib #100,%d0
    30c4:	6700 fb9e      	beqw 2c64 <_vsnprintf+0x306>
    30c8:	2204           	movel %d4,%d1
    30ca:	307c 000a      	moveaw #10,%a0
    30ce:	6000 fde2      	braw 2eb2 <_vsnprintf+0x554>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    30d2:	2f02           	movel %d2,%sp@-
    30d4:	2f0a           	movel %a2,%sp@-
    30d6:	2f06           	movel %d6,%sp@-
    30d8:	2043           	moveal %d3,%a0
    30da:	2010           	movel %a0@,%d0
    30dc:	4880           	extw %d0
    30de:	3240           	moveaw %d0,%a1
    30e0:	2f09           	movel %a1,%sp@-
    30e2:	4e95           	jsr %a5@
    30e4:	4fef 0010      	lea %sp@(16),%sp
    30e8:	2444           	moveal %d4,%a2
    30ea:	2605           	movel %d5,%d3
    30ec:	6000 fd48      	braw 2e36 <_vsnprintf+0x4d8>
            const long value = va_arg(va, long);
    30f0:	2043           	moveal %d3,%a0
    30f2:	2010           	movel %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    30f4:	2f04           	movel %d4,%sp@-
    30f6:	2f0b           	movel %a3,%sp@-
    30f8:	2f07           	movel %d7,%sp@-
    30fa:	4878 000a      	pea a <DUART_IMR>
    30fe:	2200           	movel %d0,%d1
    3100:	d281           	addl %d1,%d1
    3102:	9381           	subxl %d1,%d1
    3104:	4481           	negl %d1
    3106:	2f01           	movel %d1,%sp@-
    3108:	4a80           	tstl %d0
    310a:	6c00 fba4      	bgew 2cb0 <_vsnprintf+0x352>
    310e:	6000 ff7a      	braw 308a <_vsnprintf+0x72c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3112:	2f01           	movel %d1,%sp@-
    3114:	2f0b           	movel %a3,%sp@-
    3116:	2f07           	movel %d7,%sp@-
    3118:	2f08           	movel %a0,%sp@-
    311a:	42a7           	clrl %sp@-
    311c:	2043           	moveal %d3,%a0
    311e:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3120:	2f02           	movel %d2,%sp@-
    3122:	2f0a           	movel %a2,%sp@-
    3124:	2f06           	movel %d6,%sp@-
    3126:	2f0d           	movel %a5,%sp@-
    3128:	4eb9 0000 22ea 	jsr 22ea <_ntoa_long>
    312e:	2440           	moveal %d0,%a2
    3130:	4fef 0028      	lea %sp@(40),%sp
    3134:	2604           	movel %d4,%d3
        break;
    3136:	6000 fdd2      	braw 2f0a <_vsnprintf+0x5ac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    313a:	2243           	moveal %d3,%a1
    313c:	2011           	movel %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    313e:	2f04           	movel %d4,%sp@-
    3140:	2f0b           	movel %a3,%sp@-
    3142:	2f07           	movel %d7,%sp@-
    3144:	4878 000a      	pea a <DUART_IMR>
    3148:	2200           	movel %d0,%d1
    314a:	d281           	addl %d1,%d1
    314c:	9381           	subxl %d1,%d1
    314e:	4481           	negl %d1
    3150:	2f01           	movel %d1,%sp@-
    3152:	4a80           	tstl %d0
    3154:	6c00 fb5a      	bgew 2cb0 <_vsnprintf+0x352>
    3158:	6000 ff30      	braw 308a <_vsnprintf+0x72c>
          while (l++ < width) {
    315c:	5284           	addql #1,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    315e:	102f 002f      	moveb %sp@(47),%d0
    3162:	6600 fece      	bnew 3032 <_vsnprintf+0x6d4>
    3166:	6000 fddc      	braw 2f44 <_vsnprintf+0x5e6>

0000316a <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    316a:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    316e:	486e 000c      	pea %fp@(12)
    3172:	2f2e 0008      	movel %fp@(8),%sp@-
    3176:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    317a:	486e ffff      	pea %fp@(-1)
    317e:	4879 0000 2946 	pea 2946 <_out_char>
    3184:	4eb9 0000 295e 	jsr 295e <_vsnprintf>
  va_end(va);
  return ret;
    318a:	4fef 0014      	lea %sp@(20),%sp
}
    318e:	4e5e           	unlk %fp
    3190:	4e75           	rts

00003192 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3192:	2f02           	movel %d2,%sp@-
    3194:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    3198:	0c02 000a      	cmpib #10,%d2
    319c:	6714           	beqs 31b2 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    319e:	41f9 0000 3358 	lea 3358 <buf>,%a0
    31a4:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    31a6:	2f48 0008      	movel %a0,%sp@(8)
}
    31aa:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    31ac:	4ef9 0000 31d4 	jmp 31d4 <mcPrint>
    mcPrint(crbuf);
    31b2:	4879 0000 3354 	pea 3354 <crbuf>
    31b8:	4eb9 0000 31d4 	jsr 31d4 <mcPrint>
    31be:	588f           	addql #4,%sp
  buf[0] = chr;
    31c0:	41f9 0000 3358 	lea 3358 <buf>,%a0
    31c6:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    31c8:	2f48 0008      	movel %a0,%sp@(8)
}
    31cc:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    31ce:	4ef9 0000 31d4 	jmp 31d4 <mcPrint>

000031d4 <mcPrint>:
    31d4:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    31d8:	206f 0010      	moveal %sp@(16),%a0
    31dc:	7200           	moveq #0,%d1
    31de:	4e4e           	trap #14
    31e0:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    31e4:	4e75           	rts

000031e6 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    31e6:	41f9 0000 3358 	lea 3358 <buf>,%a0
    31ec:	b1fc 0000 6b68 	cmpal #27496,%a0
    31f2:	641c           	bccs 3210 <__kinit+0x2a>
    31f4:	203c 0000 6b68 	movel #27496,%d0
    31fa:	0480 0000 3359 	subil #13145,%d0
    3200:	72fc           	moveq #-4,%d1
    3202:	c081           	andl %d1,%d0
    3204:	0680 0000 335c 	addil #13148,%d0
    320a:	4298           	clrl %a0@+
    320c:	b088           	cmpl %a0,%d0
    320e:	66fa           	bnes 320a <__kinit+0x24>
}
    3210:	4e75           	rts

00003212 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    3212:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    3216:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    321a:	7200           	moveq #0,%d1
    321c:	3239 0000 3364 	movew 3364 <cxa_atexit_count>,%d1
    3222:	2401           	movel %d1,%d2
    3224:	5382           	subql #1,%d2
    3226:	4a81           	tstl %d1
    3228:	6738           	beqs 3262 <__cxa_finalize+0x50>
    322a:	2001           	movel %d1,%d0
    322c:	e788           	lsll #3,%d0
    322e:	2440           	moveal %d0,%a2
    3230:	95c1           	subal %d1,%a2
    3232:	d5ca           	addal %a2,%a2
    3234:	d5fc 0000 3358 	addal #13144,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    323a:	4a83           	tstl %d3
    323c:	662a           	bnes 3268 <__cxa_finalize+0x56>
    323e:	4a2a 000c      	tstb %a2@(12)
    3242:	6610           	bnes 3254 <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    3244:	2f2a 0004      	movel %a2@(4),%sp@-
    3248:	2052           	moveal %a2@,%a0
    324a:	4e90           	jsr %a0@
            entry->done = true;
    324c:	157c 0001 000c 	moveb #1,%a2@(12)
    3252:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3254:	45ea fff2      	lea %a2@(-14),%a2
    3258:	51ca ffe0      	dbf %d2,323a <__cxa_finalize+0x28>
    325c:	4242           	clrw %d2
    325e:	5382           	subql #1,%d2
    3260:	64d8           	bccs 323a <__cxa_finalize+0x28>
        }
    }
}
    3262:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3266:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    3268:	b6aa 0008      	cmpl %a2@(8),%d3
    326c:	67d0           	beqs 323e <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    326e:	45ea fff2      	lea %a2@(-14),%a2
    3272:	51ca fff4      	dbf %d2,3268 <__cxa_finalize+0x56>
    3276:	4242           	clrw %d2
    3278:	5382           	subql #1,%d2
    327a:	64ec           	bccs 3268 <__cxa_finalize+0x56>
}
    327c:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3280:	4e75           	rts
	...

00003284 <__udivsi3>:
    3284:	2f02           	movel %d2,%sp@-
    3286:	222f 000c      	movel %sp@(12),%d1
    328a:	202f 0008      	movel %sp@(8),%d0
    328e:	0c81 0001 0000 	cmpil #65536,%d1
    3294:	6416           	bccs 32ac <L3>
    3296:	2400           	movel %d0,%d2
    3298:	4242           	clrw %d2
    329a:	4842           	swap %d2
    329c:	84c1           	divuw %d1,%d2
    329e:	3002           	movew %d2,%d0
    32a0:	4840           	swap %d0
    32a2:	342f 000a      	movew %sp@(10),%d2
    32a6:	84c1           	divuw %d1,%d2
    32a8:	3002           	movew %d2,%d0
    32aa:	6030           	bras 32dc <L6>

000032ac <L3>:
    32ac:	2401           	movel %d1,%d2

000032ae <L4>:
    32ae:	e289           	lsrl #1,%d1
    32b0:	e288           	lsrl #1,%d0
    32b2:	0c81 0001 0000 	cmpil #65536,%d1
    32b8:	64f4           	bccs 32ae <L4>
    32ba:	80c1           	divuw %d1,%d0
    32bc:	0280 0000 ffff 	andil #65535,%d0
    32c2:	2202           	movel %d2,%d1
    32c4:	c2c0           	muluw %d0,%d1
    32c6:	4842           	swap %d2
    32c8:	c4c0           	muluw %d0,%d2
    32ca:	4842           	swap %d2
    32cc:	4a42           	tstw %d2
    32ce:	660a           	bnes 32da <L5>
    32d0:	d282           	addl %d2,%d1
    32d2:	6506           	bcss 32da <L5>
    32d4:	b2af 0008      	cmpl %sp@(8),%d1
    32d8:	6302           	blss 32dc <L6>

000032da <L5>:
    32da:	5380           	subql #1,%d0

000032dc <L6>:
    32dc:	241f           	movel %sp@+,%d2
    32de:	4e75           	rts

000032e0 <__umodsi3>:
    32e0:	222f 0008      	movel %sp@(8),%d1
    32e4:	202f 0004      	movel %sp@(4),%d0
    32e8:	2f01           	movel %d1,%sp@-
    32ea:	2f00           	movel %d0,%sp@-
    32ec:	4eb9 0000 3284 	jsr 3284 <__udivsi3>
    32f2:	508f           	addql #8,%sp
    32f4:	222f 0008      	movel %sp@(8),%d1
    32f8:	2f01           	movel %d1,%sp@-
    32fa:	2f00           	movel %d0,%sp@-
    32fc:	4eb9 0000 3310 	jsr 3310 <__mulsi3>
    3302:	508f           	addql #8,%sp
    3304:	222f 0004      	movel %sp@(4),%d1
    3308:	9280           	subl %d0,%d1
    330a:	2001           	movel %d1,%d0
    330c:	4e75           	rts
	...

00003310 <__mulsi3>:
    3310:	302f 0004      	movew %sp@(4),%d0
    3314:	c0ef 000a      	muluw %sp@(10),%d0
    3318:	322f 0006      	movew %sp@(6),%d1
    331c:	c2ef 0008      	muluw %sp@(8),%d1
    3320:	d041           	addw %d1,%d0
    3322:	4840           	swap %d0
    3324:	4240           	clrw %d0
    3326:	322f 0006      	movew %sp@(6),%d1
    332a:	c2ef 000a      	muluw %sp@(10),%d1
    332e:	d081           	addl %d1,%d0
    3330:	4e75           	rts
    3332:	5469 6d65      	addqw #2,%a1@(28005)
    3336:	3a20           	movew %a0@-,%d5
    3338:	2564 2e25      	movel %a4@-,%a2@(11813)
    333c:	3033 640a      	movew %a3@(a,%d6:w:4),%d0
	...
