
example0.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 345c 	movel #13404,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,3460 <SAVE_PROG_EXIT>
    2048:	3460 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 32e8 	lea 32e8 <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 20c4 	lea 20c4 <_postinit_end>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 3460 	movel 3460 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 3314 	lea 3314 <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 3458 	lea 3458 <crbuf>,%a2
    208a:	47f9 0000 3458 	lea 3458 <crbuf>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 3458 	lea 3458 <crbuf>,%a2
    20ac:	47f9 0000 3458 	lea 3458 <crbuf>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <kmain>:
 */

#include "stdio.h"
#include "debug_stub.h"

int kmain() {
    20c4:	4fef fff0      	lea %sp@(-16),%sp
    debug_stub();
    20c8:	4eb9 0000 211c 	jsr 211c <debug_stub>
    double a, b; 

    a = 5.8;
    20ce:	2f7c 4017 3333 	movel #1075262259,%sp@(8)
    20d4:	0008 
    20d6:	2f7c 3333 3333 	movel #858993459,%sp@(12)
    20dc:	000c 
    b = 2.8;
    20de:	2ebc 4006 6666 	movel #1074161254,%sp@
    20e4:	2f7c 6666 6666 	movel #1717986918,%sp@(4)
    20ea:	0004 

    printf("Answer (int) %d=16\n", (int)(a * b));
    20ec:	f22f 5480 0008 	fmoved %sp@(8),%fp1
    20f2:	f217 5400      	fmoved %sp@,%fp0
    20f6:	f200 0423      	fmulx %fp1,%fp0
    20fa:	f200 0003      	fintrzx %fp0,%fp0
    20fe:	f200 6000      	fmovel %fp0,%d0
    2102:	2f00           	movel %d0,%sp@-
    2104:	4879 0000 3432 	pea 3432 <__mulsi3+0x22>
    210a:	4eb9 0000 326c 	jsr 326c <printf_>
    2110:	508f           	addql #8,%sp

    return 0;
    2112:	4280           	clrl %d0
}
    2114:	4fef 0010      	lea %sp@(16),%sp
    2118:	4e75           	rts
	...

0000211c <debug_stub>:
    211c:	700a           	moveq #10,%d0
    211e:	43f8 0008      	lea 8 <DUART_ACR>,%a1
    2122:	41fa 00f8      	lea %pc@(221c <debug_stub+0x100>),%a0
    2126:	22c8           	movel %a0,%a1@+
    2128:	41e8 000c      	lea %a0@(12),%a0
    212c:	5380           	subql #1,%d0
    212e:	66f6           	bnes 2126 <debug_stub+0xa>
    2130:	4e75           	rts
    2132:	4275 7320 6572 	clrw %a5@(6572,%d7:w:2)
    2138:	726f           	moveq #111,%d1
    213a:	7200           	moveq #0,%d1
    213c:	4164           	.short 0x4164
    213e:	6472           	bccs 21b2 <debug_stub+0x96>
    2140:	6573           	bcss 21b5 <debug_stub+0x99>
    2142:	7320           	.short 0x7320
    2144:	6572           	bcss 21b8 <debug_stub+0x9c>
    2146:	726f           	moveq #111,%d1
    2148:	7200           	moveq #0,%d1
    214a:	496c           	.short 0x496c
    214c:	6c65           	bges 21b3 <debug_stub+0x97>
    214e:	6761           	beqs 21b1 <debug_stub+0x95>
    2150:	6c20           	bges 2172 <debug_stub+0x56>
    2152:	696e           	bvss 21c2 <debug_stub+0xa6>
    2154:	7374           	.short 0x7374
    2156:	7275           	moveq #117,%d1
    2158:	6374           	blss 21ce <debug_stub+0xb2>
    215a:	696f           	bvss 21cb <debug_stub+0xaf>
    215c:	6e00 4469      	bgtw 65c7 <cxa_atexits+0x3161>
    2160:	7669           	moveq #105,%d3
    2162:	7369           	.short 0x7369
    2164:	6f6e           	bles 21d4 <debug_stub+0xb8>
    2166:	2062           	moveal %a2@-,%a0
    2168:	7920           	.short 0x7920
    216a:	7a65           	moveq #101,%d5
    216c:	726f           	moveq #111,%d1
    216e:	0043 484b      	oriw #18507,%d3
    2172:	2069 6e73      	moveal %a1@(28275),%a0
    2176:	7472           	moveq #114,%d2
    2178:	7563           	.short 0x7563
    217a:	7469           	moveq #105,%d2
    217c:	6f6e           	bles 21ec <debug_stub+0xd0>
    217e:	0054 5241      	oriw #21057,%a4@
    2182:	5056           	addqw #8,%fp@
    2184:	2069 6e73      	moveal %a1@(28275),%a0
    2188:	7472           	moveq #114,%d2
    218a:	7563           	.short 0x7563
    218c:	7469           	moveq #105,%d2
    218e:	6f6e           	bles 21fe <debug_stub+0xe2>
    2190:	0050 7269      	oriw #29289,%a0@
    2194:	7669           	moveq #105,%d3
    2196:	6c65           	bges 21fd <debug_stub+0xe1>
    2198:	6765           	beqs 21ff <debug_stub+0xe3>
    219a:	2076 696f 6c61 	moveal %fp@(6c61)@(74696f6e),%a0
    21a0:	7469 6f6e 
    21a4:	0054 7261      	oriw #29281,%a4@
    21a8:	6365           	blss 220f <debug_stub+0xf3>
    21aa:	0024 4178      	orib #120,%a4@-
    21ae:	7878           	moveq #120,%d4
    21b0:	2069 6e73      	moveal %a1@(28275),%a0
    21b4:	7472           	moveq #114,%d2
    21b6:	7563           	.short 0x7563
    21b8:	7469           	moveq #105,%d2
    21ba:	6f6e           	bles 222a <debug_stub+0x10e>
    21bc:	0024 4678      	orib #120,%a4@-
    21c0:	7878           	moveq #120,%d4
    21c2:	2069 6e73      	moveal %a1@(28275),%a0
    21c6:	7472           	moveq #114,%d2
    21c8:	7563           	.short 0x7563
    21ca:	7469           	moveq #105,%d2
    21cc:	6f6e           	bles 223c <debug_stub+0x120>
    21ce:	000d           	.short 0x000d
    21d0:	0a07 2a2a      	eorib #42,%d7
    21d4:	2a20           	movel %a0@-,%d5
    21d6:	536f 6674      	subqw #1,%sp@(26228)
    21da:	7761           	.short 0x7761
    21dc:	7265           	moveq #101,%d1
    21de:	2046           	moveal %d6,%a0
    21e0:	6169           	bsrs 224b <debug_stub+0x12f>
    21e2:	6c75           	bges 2259 <debug_stub+0x13d>
    21e4:	7265           	moveq #101,%d1
    21e6:	3a20           	movew %a0@-,%d5
    21e8:	0020 2866      	orib #102,%a0@-
    21ec:	6175           	bsrs 2263 <debug_stub+0x147>
    21ee:	6c74           	bges 2264 <debug_stub+0x148>
    21f0:	2061           	moveal %a1@-,%a0
    21f2:	6464           	bccs 2258 <debug_stub+0x13c>
    21f4:	7220           	moveq #32,%d1
    21f6:	0029 000d 0a50 	orib #13,%a1@(2640)
    21fc:	433d           	.short 0x433d
    21fe:	0020 6f70      	orib #112,%a0@-
    2202:	3d00           	movew %d0,%fp@-
    2204:	2020           	movel %a0@-,%d0
    2206:	2020           	movel %a0@-,%d0
    2208:	2053           	moveal %a3@,%a0
    220a:	523d           	.short 0x523d
    220c:	0020 2020      	orib #32,%a0@-
    2210:	2055           	moveal %a5@,%a0
    2212:	5350           	subqw #1,%a0@
    2214:	3d00           	movew %d0,%fp@-
    2216:	0d0a 0000      	movepw %a2@(0),%d6
    221a:	0000 007c      	orib #124,%d0
    221e:	0700           	btst %d3,%d0
    2220:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2224:	7400           	moveq #0,%d2
    2226:	606a           	bras 2292 <debug_stub+0x176>
    2228:	007c 0700      	oriw #1792,%sr
    222c:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2230:	7402           	moveq #2,%d2
    2232:	605e           	bras 2292 <debug_stub+0x176>
    2234:	007c 0700      	oriw #1792,%sr
    2238:	48e7 ffff      	moveml %d0-%sp,%sp@-
    223c:	7404           	moveq #4,%d2
    223e:	6052           	bras 2292 <debug_stub+0x176>
    2240:	007c 0700      	oriw #1792,%sr
    2244:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2248:	7406           	moveq #6,%d2
    224a:	6046           	bras 2292 <debug_stub+0x176>
    224c:	007c 0700      	oriw #1792,%sr
    2250:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2254:	7408           	moveq #8,%d2
    2256:	603a           	bras 2292 <debug_stub+0x176>
    2258:	007c 0700      	oriw #1792,%sr
    225c:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2260:	740a           	moveq #10,%d2
    2262:	602e           	bras 2292 <debug_stub+0x176>
    2264:	007c 0700      	oriw #1792,%sr
    2268:	48e7 ffff      	moveml %d0-%sp,%sp@-
    226c:	740c           	moveq #12,%d2
    226e:	6022           	bras 2292 <debug_stub+0x176>
    2270:	007c 0700      	oriw #1792,%sr
    2274:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2278:	740e           	moveq #14,%d2
    227a:	6016           	bras 2292 <debug_stub+0x176>
    227c:	007c 0700      	oriw #1792,%sr
    2280:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2284:	7410           	moveq #16,%d2
    2286:	600a           	bras 2292 <debug_stub+0x176>
    2288:	007c 0700      	oriw #1792,%sr
    228c:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2290:	7412           	moveq #18,%d2
    2292:	3f6f 0040 fffe 	movew %sp@(64),%sp@(-2)
    2298:	206f 0042      	moveal %sp@(66),%a0
    229c:	2f48 fffa      	movel %a0,%sp@(-6)
    22a0:	3f50 fff8      	movew %a0@,%sp@(-8)
    22a4:	42af fff4      	clrl %sp@(-12)
    22a8:	b47c 0004      	cmpw #4,%d2
    22ac:	6c1c           	bges 22ca <debug_stub+0x1ae>
    22ae:	2f6f 004a fff4 	movel %sp@(74),%sp@(-12)
    22b4:	6014           	bras 22ca <debug_stub+0x1ae>
    22b6:	fe7c           	.short 0xfe7c
    22b8:	fe86           	.short 0xfe86
    22ba:	fe94           	.short 0xfe94
    22bc:	fea8           	.short 0xfea8
    22be:	feb9           	.short 0xfeb9
    22c0:	fec9           	.short 0xfec9
    22c2:	fedb           	.short 0xfedb
    22c4:	feef           	.short 0xfeef
    22c6:	fef5           	.short 0xfef5
    22c8:	ff07           	.short 0xff07
    22ca:	4fef fff4      	lea %sp@(-12),%sp
    22ce:	43fa 00f4      	lea %pc@(23c4 <stub_print>),%a1
    22d2:	41fa fefb      	lea %pc@(21cf <debug_stub+0xb3>),%a0
    22d6:	4e91           	jsr %a1@
    22d8:	303b 20dc      	movew %pc@(22b6 <debug_stub+0x19a>,%d2:w),%d0
    22dc:	41fb 00d8      	lea %pc@(22b6 <debug_stub+0x19a>,%d0:w),%a0
    22e0:	4e91           	jsr %a1@
    22e2:	2417           	movel %sp@,%d2
    22e4:	6710           	beqs 22f6 <debug_stub+0x1da>
    22e6:	41fa ff01      	lea %pc@(21e9 <debug_stub+0xcd>),%a0
    22ea:	4e91           	jsr %a1@
    22ec:	6100 0098      	bsrw 2386 <printhex>
    22f0:	41fa ff05      	lea %pc@(21f7 <debug_stub+0xdb>),%a0
    22f4:	4e91           	jsr %a1@
    22f6:	41fa ff01      	lea %pc@(21f9 <debug_stub+0xdd>),%a0
    22fa:	4e91           	jsr %a1@
    22fc:	242f 0006      	movel %sp@(6),%d2
    2300:	6100 0084      	bsrw 2386 <printhex>
    2304:	41fa fef9      	lea %pc@(21ff <debug_stub+0xe3>),%a0
    2308:	4e91           	jsr %a1@
    230a:	206f 0006      	moveal %sp@(6),%a0
    230e:	2410           	movel %a0@,%d2
    2310:	7604           	moveq #4,%d3
    2312:	6174           	bsrs 2388 <printhex_n>
    2314:	41fa feee      	lea %pc@(2204 <debug_stub+0xe8>),%a0
    2318:	4e91           	jsr %a1@
    231a:	242f 000a      	movel %sp@(10),%d2
    231e:	7604           	moveq #4,%d3
    2320:	6166           	bsrs 2388 <printhex_n>
    2322:	41fa fee9      	lea %pc@(220d <debug_stub+0xf1>),%a0
    2326:	4e91           	jsr %a1@
    2328:	4fef 000c      	lea %sp@(12),%sp
    232c:	4e68           	movel %usp,%a0
    232e:	2408           	movel %a0,%d2
    2330:	6154           	bsrs 2386 <printhex>
    2332:	41fa fee2      	lea %pc@(2216 <debug_stub+0xfa>),%a0
    2336:	4e91           	jsr %a1@
    2338:	7800           	moveq #0,%d4
    233a:	41fa 0070      	lea %pc@(23ac <stub_prchar>),%a0
    233e:	244f           	moveal %sp,%a2
    2340:	7064           	moveq #100,%d0
    2342:	b83c 0008      	cmpb #8,%d4
    2346:	6d02           	blts 234a <debug_stub+0x22e>
    2348:	7061           	moveq #97,%d0
    234a:	4e90           	jsr %a0@
    234c:	2004           	movel %d4,%d0
    234e:	c03c 0007      	andb #7,%d0
    2352:	614a           	bsrs 239e <hexdigit>
    2354:	4e90           	jsr %a0@
    2356:	703d           	moveq #61,%d0
    2358:	4e90           	jsr %a0@
    235a:	241a           	movel %a2@+,%d2
    235c:	6128           	bsrs 2386 <printhex>
    235e:	5284           	addql #1,%d4
    2360:	1004           	moveb %d4,%d0
    2362:	c03c 0003      	andb #3,%d0
    2366:	6706           	beqs 236e <debug_stub+0x252>
    2368:	7020           	moveq #32,%d0
    236a:	4e90           	jsr %a0@
    236c:	60d2           	bras 2340 <debug_stub+0x224>
    236e:	700d           	moveq #13,%d0
    2370:	4e90           	jsr %a0@
    2372:	700a           	moveq #10,%d0
    2374:	4e90           	jsr %a0@
    2376:	b83c 0010      	cmpb #16,%d4
    237a:	6dc4           	blts 2340 <debug_stub+0x224>
    237c:	027c f0ff      	andiw #-3841,%sr
    2380:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    2384:	4ed0           	jmp %a0@

00002386 <printhex>:
    2386:	7608           	moveq #8,%d3

00002388 <printhex_n>:
    2388:	41fa 0022      	lea %pc@(23ac <stub_prchar>),%a0
    238c:	e99a           	roll #4,%d2
    238e:	1002           	moveb %d2,%d0
    2390:	c07c 000f      	andw #15,%d0
    2394:	6108           	bsrs 239e <hexdigit>
    2396:	4e90           	jsr %a0@
    2398:	5303           	subqb #1,%d3
    239a:	66f0           	bnes 238c <printhex_n+0x4>
    239c:	4e75           	rts

0000239e <hexdigit>:
    239e:	b03c 000a      	cmpb #10,%d0
    23a2:	6d02           	blts 23a6 <hexdigit+0x8>
    23a4:	5e00           	addqb #7,%d0
    23a6:	d07c 0030      	addw #48,%d0
    23aa:	4e75           	rts

000023ac <stub_prchar>:
    23ac:	2f08           	movel %a0,%sp@-
    23ae:	2078 0428      	moveal 428 <_EFP_PRINTCHAR>,%a0
    23b2:	4e90           	jsr %a0@
    23b4:	b1f8 0430      	cmpal 430 <_EFP_SENDCHAR>,%a0
    23b8:	6706           	beqs 23c0 <stub_prchar+0x14>
    23ba:	2078 0430      	moveal 430 <_EFP_SENDCHAR>,%a0
    23be:	4e90           	jsr %a0@
    23c0:	205f           	moveal %sp@+,%a0
    23c2:	4e75           	rts

000023c4 <stub_print>:
    23c4:	2f09           	movel %a1,%sp@-
    23c6:	2f08           	movel %a0,%sp@-
    23c8:	2278 0420      	moveal 420 <_EFP_PRINT>,%a1
    23cc:	4e91           	jsr %a1@
    23ce:	2278 0428      	moveal 428 <_EFP_PRINTCHAR>,%a1
    23d2:	b3f8 0430      	cmpal 430 <_EFP_SENDCHAR>,%a1
    23d6:	205f           	moveal %sp@+,%a0
    23d8:	670c           	beqs 23e6 <stub_print+0x22>
    23da:	2278 0430      	moveal 430 <_EFP_SENDCHAR>,%a1
    23de:	1018           	moveb %a0@+,%d0
    23e0:	6704           	beqs 23e6 <stub_print+0x22>
    23e2:	4e91           	jsr %a1@
    23e4:	60f8           	bras 23de <stub_print+0x1a>
    23e6:	225f           	moveal %sp@+,%a1
    23e8:	4e75           	rts

000023ea <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    23ea:	4e75           	rts

000023ec <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    23ec:	4fef ffcc      	lea %sp@(-52),%sp
    23f0:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    23f4:	246f 0064      	moveal %sp@(100),%a2
    23f8:	2a2f 0068      	movel %sp@(104),%d5
    23fc:	2c2f 0070      	movel %sp@(112),%d6
    2400:	242f 0074      	movel %sp@(116),%d2
    2404:	262f 007c      	movel %sp@(124),%d3
    2408:	2e2f 0084      	movel %sp@(132),%d7
    240c:	1f6f 007b 003f 	moveb %sp@(123),%sp@(63)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2412:	222f 0088      	movel %sp@(136),%d1
    2416:	0281 0000 0400 	andil #1024,%d1
    241c:	2f41 0032      	movel %d1,%sp@(50)
  if (!value) {
    2420:	4a82           	tstl %d2
    2422:	6700 0174      	beqw 2598 <_ntoa_long+0x1ac>
  if (flags & FLAGS_HASH) {
    2426:	7210           	moveq #16,%d1
    2428:	c2af 0088      	andl %sp@(136),%d1
    242c:	2f41 0036      	movel %d1,%sp@(54)
    2430:	082f 0005 008b 	btst #5,%sp@(139)
    2436:	6600 017e      	bnew 25b6 <_ntoa_long+0x1ca>
    243a:	7061           	moveq #97,%d0
    243c:	41ef 0040      	lea %sp@(64),%a0
    2440:	2f48 002e      	movel %a0,%sp@(46)
    2444:	4def 0060      	lea %sp@(96),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2448:	2808           	movel %a0,%d4
    244a:	49f9 0000 33e0 	lea 33e0 <__umodsi3>,%a4
    2450:	47f9 0000 3384 	lea 3384 <__udivsi3>,%a3
    2456:	1200           	moveb %d0,%d1
    2458:	0601 fff6      	addib #-10,%d1
    245c:	2f4a 003a      	movel %a2,%sp@(58)
    2460:	2a45           	moveal %d5,%a5
    2462:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    2464:	2f03           	movel %d3,%sp@-
    2466:	2f02           	movel %d2,%sp@-
    2468:	4e94           	jsr %a4@
    246a:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    246c:	7209           	moveq #9,%d1
    246e:	b280           	cmpl %d0,%d1
    2470:	652a           	bcss 249c <_ntoa_long+0xb0>
    2472:	0600 0030      	addib #48,%d0
    2476:	2444           	moveal %d4,%a2
    2478:	14c0           	moveb %d0,%a2@+
      value /= base;
    247a:	2f03           	movel %d3,%sp@-
    247c:	2f02           	movel %d2,%sp@-
    247e:	4e93           	jsr %a3@
    2480:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2482:	b682           	cmpl %d2,%d3
    2484:	6228           	bhis 24ae <_ntoa_long+0xc2>
    2486:	bdca           	cmpal %a2,%fp
    2488:	6724           	beqs 24ae <_ntoa_long+0xc2>
    248a:	280a           	movel %a2,%d4
      value /= base;
    248c:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    248e:	2f03           	movel %d3,%sp@-
    2490:	2f02           	movel %d2,%sp@-
    2492:	4e94           	jsr %a4@
    2494:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2496:	7209           	moveq #9,%d1
    2498:	b280           	cmpl %d0,%d1
    249a:	64d6           	bccs 2472 <_ntoa_long+0x86>
    249c:	d005           	addb %d5,%d0
    249e:	2444           	moveal %d4,%a2
    24a0:	14c0           	moveb %d0,%a2@+
      value /= base;
    24a2:	2f03           	movel %d3,%sp@-
    24a4:	2f02           	movel %d2,%sp@-
    24a6:	4e93           	jsr %a3@
    24a8:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    24aa:	b682           	cmpl %d2,%d3
    24ac:	63d8           	blss 2486 <_ntoa_long+0x9a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    24ae:	246f 003a      	moveal %sp@(58),%a2
    24b2:	2a0d           	movel %a5,%d5
    24b4:	307c 0001      	moveaw #1,%a0
    24b8:	91ef 002e      	subal %sp@(46),%a0
    24bc:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    24be:	082f 0001 008b 	btst #1,%sp@(139)
    24c4:	6700 013e      	beqw 2604 <_ntoa_long+0x218>
    24c8:	3c7c 0002      	moveaw #2,%fp
  if (flags & FLAGS_HASH) {
    24cc:	4aaf 0036      	tstl %sp@(54)
    24d0:	6700 023c      	beqw 270e <_ntoa_long+0x322>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    24d4:	4aaf 0032      	tstl %sp@(50)
    24d8:	6600 01aa      	bnew 2684 <_ntoa_long+0x298>
    24dc:	4a84           	tstl %d4
    24de:	6600 0324      	bnew 2804 <_ntoa_long+0x418>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    24e2:	7010           	moveq #16,%d0
    24e4:	b083           	cmpl %d3,%d0
    24e6:	6700 0412      	beqw 28fa <_ntoa_long+0x50e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    24ea:	5583           	subql #2,%d3
    24ec:	6700 04b0      	beqw 299e <_ntoa_long+0x5b2>
      buf[len++] = '0';
    24f0:	1f7c 0030 0040 	moveb #48,%sp@(64)
    24f6:	202f 0088      	movel %sp@(136),%d0
    24fa:	7401           	moveq #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    24fc:	7203           	moveq #3,%d1
    24fe:	c280           	andl %d0,%d1
      buf[len++] = '-';
    2500:	2802           	movel %d2,%d4
    if (negative) {
    2502:	4a2f 003f      	tstb %sp@(63)
    2506:	6700 02dc      	beqw 27e4 <_ntoa_long+0x3f8>
      buf[len++] = '-';
    250a:	5284           	addql #1,%d4
    250c:	1fbc 002d 2840 	moveb #45,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2512:	4a81           	tstl %d1
    2514:	6600 0194      	bnew 26aa <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2518:	b887           	cmpl %d7,%d4
    251a:	6400 018e      	bccw 26aa <_ntoa_long+0x2be>
    251e:	242f 006c      	movel %sp@(108),%d2
    2522:	2604           	movel %d4,%d3
    2524:	9682           	subl %d2,%d3
      out(' ', buffer, idx++, maxlen);
    2526:	2002           	movel %d2,%d0
    2528:	5282           	addql #1,%d2
    252a:	2f06           	movel %d6,%sp@-
    252c:	2f00           	movel %d0,%sp@-
    252e:	2f05           	movel %d5,%sp@-
    2530:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2534:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    2536:	2003           	movel %d3,%d0
    2538:	d082           	addl %d2,%d0
    253a:	4fef 0010      	lea %sp@(16),%sp
    253e:	be80           	cmpl %d0,%d7
    2540:	62e4           	bhis 2526 <_ntoa_long+0x13a>
    2542:	2004           	movel %d4,%d0
    2544:	5280           	addql #1,%d0
    2546:	be80           	cmpl %d0,%d7
    2548:	6500 033e      	bcsw 2888 <_ntoa_long+0x49c>
    254c:	2047           	moveal %d7,%a0
    254e:	5388           	subql #1,%a0
    2550:	91c4           	subal %d4,%a0
    2552:	226f 006c      	moveal %sp@(108),%a1
    2556:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    255a:	2609           	movel %a1,%d3
  while (len) {
    255c:	4a84           	tstl %d4
    255e:	6600 014e      	bnew 26ae <_ntoa_long+0x2c2>
    2562:	2403           	movel %d3,%d2
  if (flags & FLAGS_LEFT) {
    2564:	bcfc 0000      	cmpaw #0,%fp
    2568:	6722           	beqs 258c <_ntoa_long+0x1a0>
    while (idx - start_idx < width) {
    256a:	2602           	movel %d2,%d3
    256c:	96af 006c      	subl %sp@(108),%d3
    2570:	be83           	cmpl %d3,%d7
    2572:	6318           	blss 258c <_ntoa_long+0x1a0>
      out(' ', buffer, idx++, maxlen);
    2574:	2f06           	movel %d6,%sp@-
    2576:	2f02           	movel %d2,%sp@-
    2578:	5282           	addql #1,%d2
    257a:	2f05           	movel %d5,%sp@-
    257c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2580:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    2582:	5283           	addql #1,%d3
    2584:	4fef 0010      	lea %sp@(16),%sp
    2588:	be83           	cmpl %d3,%d7
    258a:	62e8           	bhis 2574 <_ntoa_long+0x188>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    258c:	2002           	movel %d2,%d0
    258e:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2592:	4fef 0034      	lea %sp@(52),%sp
    2596:	4e75           	rts
    flags &= ~FLAGS_HASH;
    2598:	70ef           	moveq #-17,%d0
    259a:	c0af 0088      	andl %sp@(136),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    259e:	4aaf 0032      	tstl %sp@(50)
    25a2:	6640           	bnes 25e4 <_ntoa_long+0x1f8>
    25a4:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    25a8:	2f40 0088      	movel %d0,%sp@(136)
    25ac:	082f 0005 008b 	btst #5,%sp@(139)
    25b2:	6700 fe86      	beqw 243a <_ntoa_long+0x4e>
    25b6:	7041           	moveq #65,%d0
    25b8:	41ef 0040      	lea %sp@(64),%a0
    25bc:	2f48 002e      	movel %a0,%sp@(46)
    25c0:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    25c4:	2808           	movel %a0,%d4
    25c6:	49f9 0000 33e0 	lea 33e0 <__umodsi3>,%a4
    25cc:	47f9 0000 3384 	lea 3384 <__udivsi3>,%a3
    25d2:	1200           	moveb %d0,%d1
    25d4:	0601 fff6      	addib #-10,%d1
    25d8:	2f4a 003a      	movel %a2,%sp@(58)
    25dc:	2a45           	moveal %d5,%a5
    25de:	1a01           	moveb %d1,%d5
    25e0:	6000 fe82      	braw 2464 <_ntoa_long+0x78>
  if (!(flags & FLAGS_LEFT)) {
    25e4:	7802           	moveq #2,%d4
    25e6:	c8af 0088      	andl %sp@(136),%d4
    25ea:	082f 0001 008b 	btst #1,%sp@(139)
    25f0:	6600 01e0      	bnew 27d2 <_ntoa_long+0x3e6>
    25f4:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    25f8:	2f40 0088      	movel %d0,%sp@(136)
  if (!(flags & FLAGS_PRECISION) || value) {
    25fc:	2f7c 0000 0400 	movel #1024,%sp@(50)
    2602:	0032 
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2604:	4a87           	tstl %d7
    2606:	6700 012e      	beqw 2736 <_ntoa_long+0x34a>
    260a:	7001           	moveq #1,%d0
    260c:	c0af 0088      	andl %sp@(136),%d0
    2610:	2c40           	moveal %d0,%fp
    2612:	082f 0000 008b 	btst #0,%sp@(139)
    2618:	6700 0194      	beqw 27ae <_ntoa_long+0x3c2>
    261c:	4a2f 003f      	tstb %sp@(63)
    2620:	6600 0250      	bnew 2872 <_ntoa_long+0x486>
    2624:	700c           	moveq #12,%d0
    2626:	c0af 0088      	andl %sp@(136),%d0
    262a:	6600 0246      	bnew 2872 <_ntoa_long+0x486>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    262e:	b8af 0080      	cmpl %sp@(128),%d4
    2632:	6400 013a      	bccw 276e <_ntoa_long+0x382>
    2636:	7020           	moveq #32,%d0
    2638:	b084           	cmpl %d4,%d0
    263a:	6700 030a      	beqw 2946 <_ntoa_long+0x55a>
    263e:	41f7 4840      	lea %sp@(40,%d4:l),%a0
    2642:	202f 0080      	movel %sp@(128),%d0
      buf[len++] = '0';
    2646:	5284           	addql #1,%d4
    2648:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    264c:	b880           	cmpl %d0,%d4
    264e:	6400 0116      	bccw 2766 <_ntoa_long+0x37a>
    2652:	7220           	moveq #32,%d1
    2654:	b284           	cmpl %d4,%d1
    2656:	66ee           	bnes 2646 <_ntoa_long+0x25a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2658:	bcfc 0000      	cmpaw #0,%fp
    265c:	6700 0140      	beqw 279e <_ntoa_long+0x3b2>
    2660:	7020           	moveq #32,%d0
    2662:	b087           	cmpl %d7,%d0
    2664:	6400 0138      	bccw 279e <_ntoa_long+0x3b2>
  if (flags & FLAGS_HASH) {
    2668:	4aaf 0036      	tstl %sp@(54)
    266c:	6700 020a      	beqw 2878 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2670:	4aaf 0032      	tstl %sp@(50)
    2674:	6600 0390      	bnew 2a06 <_ntoa_long+0x61a>
    2678:	7020           	moveq #32,%d0
    267a:	9dce           	subal %fp,%fp
    267c:	b0af 0080      	cmpl %sp@(128),%d0
    2680:	6700 02e8      	beqw 296a <_ntoa_long+0x57e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2684:	7003           	moveq #3,%d0
    2686:	c0af 0088      	andl %sp@(136),%d0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    268a:	7210           	moveq #16,%d1
    268c:	b283           	cmpl %d3,%d1
    268e:	6700 0220      	beqw 28b0 <_ntoa_long+0x4c4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2692:	5583           	subql #2,%d3
    2694:	6700 01bc      	beqw 2852 <_ntoa_long+0x466>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2698:	7220           	moveq #32,%d1
    269a:	b284           	cmpl %d4,%d1
    269c:	6666           	bnes 2704 <_ntoa_long+0x318>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    269e:	4a80           	tstl %d0
    26a0:	6608           	bnes 26aa <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    26a2:	7220           	moveq #32,%d1
    26a4:	b287           	cmpl %d7,%d1
    26a6:	6500 fe76      	bcsw 251e <_ntoa_long+0x132>
  if (flags & FLAGS_HASH) {
    26aa:	262f 006c      	movel %sp@(108),%d3
    26ae:	4bef 0040      	lea %sp@(64),%a5
    26b2:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    26b6:	d684           	addl %d4,%d3
    26b8:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    26bc:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    26be:	2f06           	movel %d6,%sp@-
    26c0:	200c           	movel %a4,%d0
    26c2:	908b           	subl %a3,%d0
    26c4:	2f00           	movel %d0,%sp@-
    26c6:	2f05           	movel %d5,%sp@-
    26c8:	1023           	moveb %a3@-,%d0
    26ca:	4880           	extw %d0
    26cc:	3040           	moveaw %d0,%a0
    26ce:	2f08           	movel %a0,%sp@-
    26d0:	4e92           	jsr %a2@
  while (len) {
    26d2:	4fef 0010      	lea %sp@(16),%sp
    26d6:	b7cd           	cmpal %a5,%a3
    26d8:	6700 fe8a      	beqw 2564 <_ntoa_long+0x178>
    26dc:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    26de:	2f06           	movel %d6,%sp@-
    26e0:	200c           	movel %a4,%d0
    26e2:	908b           	subl %a3,%d0
    26e4:	2f00           	movel %d0,%sp@-
    26e6:	2f05           	movel %d5,%sp@-
    26e8:	1023           	moveb %a3@-,%d0
    26ea:	4880           	extw %d0
    26ec:	3040           	moveaw %d0,%a0
    26ee:	2f08           	movel %a0,%sp@-
    26f0:	4e92           	jsr %a2@
  while (len) {
    26f2:	4fef 0010      	lea %sp@(16),%sp
    26f6:	b7cd           	cmpal %a5,%a3
    26f8:	66c2           	bnes 26bc <_ntoa_long+0x2d0>
    26fa:	6000 fe68      	braw 2564 <_ntoa_long+0x178>
      buf[len++] = 'X';
    26fe:	5384           	subql #1,%d4
    2700:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    2704:	2004           	movel %d4,%d0
    2706:	5284           	addql #1,%d4
    2708:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    270e:	7020           	moveq #32,%d0
    2710:	b084           	cmpl %d4,%d0
    2712:	6600 0134      	bnew 2848 <_ntoa_long+0x45c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2716:	7003           	moveq #3,%d0
    2718:	c0af 0088      	andl %sp@(136),%d0
    271c:	6700 00a8      	beqw 27c6 <_ntoa_long+0x3da>
  if (flags & FLAGS_HASH) {
    2720:	262f 006c      	movel %sp@(108),%d3
    2724:	7820           	moveq #32,%d4
    2726:	4bef 0040      	lea %sp@(64),%a5
    272a:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    272e:	d684           	addl %d4,%d3
    2730:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2734:	6086           	bras 26bc <_ntoa_long+0x2d0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2736:	b8af 0080      	cmpl %sp@(128),%d4
    273a:	6400 0280      	bccw 29bc <_ntoa_long+0x5d0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    273e:	7201           	moveq #1,%d1
    2740:	c2af 0088      	andl %sp@(136),%d1
    2744:	2c41           	moveal %d1,%fp
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2746:	7020           	moveq #32,%d0
    2748:	b084           	cmpl %d4,%d0
    274a:	6600 fef2      	bnew 263e <_ntoa_long+0x252>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    274e:	4a81           	tstl %d1
    2750:	6700 02ba      	beqw 2a0c <_ntoa_long+0x620>
  if (flags & FLAGS_HASH) {
    2754:	4aaf 0036      	tstl %sp@(54)
    2758:	6600 02ba      	bnew 2a14 <_ntoa_long+0x628>
    275c:	9dce           	subal %fp,%fp
    275e:	262f 006c      	movel %sp@(108),%d3
    2762:	7820           	moveq #32,%d4
    2764:	60c0           	bras 2726 <_ntoa_long+0x33a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2766:	bcfc 0000      	cmpaw #0,%fp
    276a:	6700 fd60      	beqw 24cc <_ntoa_long+0xe0>
    276e:	be84           	cmpl %d4,%d7
    2770:	6300 024a      	blsw 29bc <_ntoa_long+0x5d0>
    2774:	7220           	moveq #32,%d1
    2776:	b284           	cmpl %d4,%d1
    2778:	6700 0270      	beqw 29ea <_ntoa_long+0x5fe>
    277c:	43ef 0040      	lea %sp@(64),%a1
    2780:	41f1 4800      	lea %a1@(0,%d4:l),%a0
    2784:	2009           	movel %a1,%d0
    2786:	d087           	addl %d7,%d0
    2788:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = '0';
    278c:	10bc 0030      	moveb #48,%a0@
    2790:	2208           	movel %a0,%d1
    2792:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2794:	b1c0           	cmpal %d0,%a0
    2796:	6700 0100      	beqw 2898 <_ntoa_long+0x4ac>
    279a:	bdc8           	cmpal %a0,%fp
    279c:	66ee           	bnes 278c <_ntoa_long+0x3a0>
  if (flags & FLAGS_HASH) {
    279e:	4aaf 0036      	tstl %sp@(54)
    27a2:	6700 00d4      	beqw 2878 <_ntoa_long+0x48c>
    27a6:	9dce           	subal %fp,%fp
    27a8:	7820           	moveq #32,%d4
    27aa:	6000 fd28      	braw 24d4 <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27ae:	b8af 0080      	cmpl %sp@(128),%d4
    27b2:	6400 fd18      	bccw 24cc <_ntoa_long+0xe0>
    27b6:	7220           	moveq #32,%d1
    27b8:	b284           	cmpl %d4,%d1
    27ba:	6600 fe82      	bnew 263e <_ntoa_long+0x252>
  if (flags & FLAGS_HASH) {
    27be:	4aaf 0036      	tstl %sp@(54)
    27c2:	6600 0250      	bnew 2a14 <_ntoa_long+0x628>
    for (size_t i = len; i < width; i++) {
    27c6:	7820           	moveq #32,%d4
    27c8:	b887           	cmpl %d7,%d4
    27ca:	6500 fd52      	bcsw 251e <_ntoa_long+0x132>
    27ce:	6000 feda      	braw 26aa <_ntoa_long+0x2be>
  if (!(flags & FLAGS_LEFT)) {
    27d2:	3c7c 0002      	moveaw #2,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27d6:	7203           	moveq #3,%d1
    27d8:	c280           	andl %d0,%d1
      buf[len++] = '-';
    27da:	2802           	movel %d2,%d4
    if (negative) {
    27dc:	4a2f 003f      	tstb %sp@(63)
    27e0:	6600 fd28      	bnew 250a <_ntoa_long+0x11e>
    else if (flags & FLAGS_PLUS) {
    27e4:	0800 0002      	btst #2,%d0
    27e8:	6700 00e8      	beqw 28d2 <_ntoa_long+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    27ec:	5284           	addql #1,%d4
    27ee:	1fbc 002b 2840 	moveb #43,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27f4:	4a81           	tstl %d1
    27f6:	6600 feb2      	bnew 26aa <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    27fa:	b887           	cmpl %d7,%d4
    27fc:	6500 fd20      	bcsw 251e <_ntoa_long+0x132>
    2800:	6000 fea8      	braw 26aa <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2804:	b8af 0080      	cmpl %sp@(128),%d4
    2808:	6706           	beqs 2810 <_ntoa_long+0x424>
    280a:	be84           	cmpl %d4,%d7
    280c:	6600 fe76      	bnew 2684 <_ntoa_long+0x298>
      len--;
    2810:	2004           	movel %d4,%d0
    2812:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    2814:	7201           	moveq #1,%d1
    2816:	b284           	cmpl %d4,%d1
    2818:	6700 fcc8      	beqw 24e2 <_ntoa_long+0xf6>
    281c:	7210           	moveq #16,%d1
    281e:	b283           	cmpl %d3,%d1
    2820:	6700 01a8      	beqw 29ca <_ntoa_long+0x5de>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2824:	7202           	moveq #2,%d1
      len--;
    2826:	2800           	movel %d0,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2828:	b283           	cmpl %d3,%d1
    282a:	6600 feda      	bnew 2706 <_ntoa_long+0x31a>
    282e:	7003           	moveq #3,%d0
    2830:	c0af 0088      	andl %sp@(136),%d0
      buf[len++] = 'b';
    2834:	1fbc 0062 4840 	moveb #98,%sp@(40,%d4:l)
    283a:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    283c:	7220           	moveq #32,%d1
    283e:	b284           	cmpl %d4,%d1
    2840:	6700 fe5c      	beqw 269e <_ntoa_long+0x2b2>
    2844:	6000 febe      	braw 2704 <_ntoa_long+0x318>
    2848:	202f 0088      	movel %sp@(136),%d0
    284c:	2404           	movel %d4,%d2
    284e:	6000 fcac      	braw 24fc <_ntoa_long+0x110>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2852:	7220           	moveq #32,%d1
    2854:	b284           	cmpl %d4,%d1
    2856:	66dc           	bnes 2834 <_ntoa_long+0x448>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2858:	4a80           	tstl %d0
    285a:	6600 fe4e      	bnew 26aa <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    285e:	7020           	moveq #32,%d0
    2860:	b087           	cmpl %d7,%d0
    2862:	6400 fe46      	bccw 26aa <_ntoa_long+0x2be>
    2866:	242f 006c      	movel %sp@(108),%d2
    286a:	2604           	movel %d4,%d3
    286c:	9682           	subl %d2,%d3
    286e:	6000 fcb6      	braw 2526 <_ntoa_long+0x13a>
      width--;
    2872:	5387           	subql #1,%d7
    2874:	6000 fdb8      	braw 262e <_ntoa_long+0x242>
  if (flags & FLAGS_HASH) {
    2878:	9dce           	subal %fp,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    287a:	7003           	moveq #3,%d0
    287c:	c0af 0088      	andl %sp@(136),%d0
    2880:	6600 fe9e      	bnew 2720 <_ntoa_long+0x334>
    2884:	6000 ff40      	braw 27c6 <_ntoa_long+0x3da>
    2888:	91c8           	subal %a0,%a0
    288a:	226f 006c      	moveal %sp@(108),%a1
    288e:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    2892:	2609           	movel %a1,%d3
    2894:	6000 fcc6      	braw 255c <_ntoa_long+0x170>
      buf[len++] = '0';
    2898:	307c 0001      	moveaw #1,%a0
    289c:	91c9           	subal %a1,%a0
    289e:	2808           	movel %a0,%d4
    28a0:	d881           	addl %d1,%d4
    28a2:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    28a4:	4aaf 0036      	tstl %sp@(54)
    28a8:	6600 fc2a      	bnew 24d4 <_ntoa_long+0xe8>
    28ac:	6000 fe60      	braw 270e <_ntoa_long+0x322>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28b0:	7220           	moveq #32,%d1
    28b2:	082f 0005 008b 	btst #5,%sp@(139)
    28b8:	6600 00ca      	bnew 2984 <_ntoa_long+0x598>
    28bc:	b284           	cmpl %d4,%d1
    28be:	6600 00b0      	bnew 2970 <_ntoa_long+0x584>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    28c2:	4a80           	tstl %d0
    28c4:	6600 fde4      	bnew 26aa <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    28c8:	b287           	cmpl %d7,%d1
    28ca:	6500 fc52      	bcsw 251e <_ntoa_long+0x132>
    28ce:	6000 fdda      	braw 26aa <_ntoa_long+0x2be>
    else if (flags & FLAGS_SPACE) {
    28d2:	0800 0003      	btst #3,%d0
    28d6:	6640           	bnes 2918 <_ntoa_long+0x52c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    28d8:	4a81           	tstl %d1
    28da:	6600 00d8      	bnew 29b4 <_ntoa_long+0x5c8>
    for (size_t i = len; i < width; i++) {
    28de:	b487           	cmpl %d7,%d2
    28e0:	6500 fc3c      	bcsw 251e <_ntoa_long+0x132>
  while (len) {
    28e4:	4a82           	tstl %d2
    28e6:	6600 fdc2      	bnew 26aa <_ntoa_long+0x2be>
    28ea:	242f 006c      	movel %sp@(108),%d2
}
    28ee:	2002           	movel %d2,%d0
    28f0:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    28f4:	4fef 0034      	lea %sp@(52),%sp
    28f8:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28fa:	082f 0005 008b 	btst #5,%sp@(139)
    2900:	662e           	bnes 2930 <_ntoa_long+0x544>
      buf[len++] = 'x';
    2902:	1f7c 0078 0040 	moveb #120,%sp@(64)
      buf[len++] = '0';
    2908:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    290e:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2912:	7402           	moveq #2,%d2
    2914:	6000 fbe6      	braw 24fc <_ntoa_long+0x110>
      buf[len++] = ' ';
    2918:	5284           	addql #1,%d4
    291a:	1fbc 0020 2840 	moveb #32,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2920:	4a81           	tstl %d1
    2922:	6600 fd86      	bnew 26aa <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2926:	b887           	cmpl %d7,%d4
    2928:	6500 fbf4      	bcsw 251e <_ntoa_long+0x132>
    292c:	6000 fd7c      	braw 26aa <_ntoa_long+0x2be>
      buf[len++] = 'X';
    2930:	1f7c 0058 0040 	moveb #88,%sp@(64)
      buf[len++] = '0';
    2936:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    293c:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2940:	7402           	moveq #2,%d2
    2942:	6000 fbb8      	braw 24fc <_ntoa_long+0x110>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2946:	7220           	moveq #32,%d1
    2948:	b287           	cmpl %d7,%d1
    294a:	6400 fe08      	bccw 2754 <_ntoa_long+0x368>
  if (flags & FLAGS_HASH) {
    294e:	4aaf 0036      	tstl %sp@(54)
    2952:	6700 ff24      	beqw 2878 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2956:	4aaf 0032      	tstl %sp@(50)
    295a:	6600 00aa      	bnew 2a06 <_ntoa_long+0x61a>
    295e:	7220           	moveq #32,%d1
    2960:	9dce           	subal %fp,%fp
    2962:	b2af 0080      	cmpl %sp@(128),%d1
    2966:	6600 fd1c      	bnew 2684 <_ntoa_long+0x298>
      len--;
    296a:	701f           	moveq #31,%d0
    296c:	6000 feae      	braw 281c <_ntoa_long+0x430>
      buf[len++] = 'x';
    2970:	1fbc 0078 4840 	moveb #120,%sp@(40,%d4:l)
    2976:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2978:	7220           	moveq #32,%d1
    297a:	b284           	cmpl %d4,%d1
    297c:	6700 fd20      	beqw 269e <_ntoa_long+0x2b2>
    2980:	6000 fd82      	braw 2704 <_ntoa_long+0x318>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2984:	b284           	cmpl %d4,%d1
    2986:	6700 fed0      	beqw 2858 <_ntoa_long+0x46c>
      buf[len++] = 'X';
    298a:	1fbc 0058 4840 	moveb #88,%sp@(40,%d4:l)
    2990:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2992:	7220           	moveq #32,%d1
    2994:	b284           	cmpl %d4,%d1
    2996:	6700 fd06      	beqw 269e <_ntoa_long+0x2b2>
    299a:	6000 fd68      	braw 2704 <_ntoa_long+0x318>
      buf[len++] = 'b';
    299e:	1f7c 0062 0040 	moveb #98,%sp@(64)
      buf[len++] = '0';
    29a4:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    29aa:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    29ae:	7402           	moveq #2,%d2
    29b0:	6000 fb4a      	braw 24fc <_ntoa_long+0x110>
    29b4:	262f 006c      	movel %sp@(108),%d3
    29b8:	6000 fba2      	braw 255c <_ntoa_long+0x170>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29bc:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    29be:	4aaf 0036      	tstl %sp@(54)
    29c2:	6600 fb10      	bnew 24d4 <_ntoa_long+0xe8>
    29c6:	6000 fd46      	braw 270e <_ntoa_long+0x322>
      buf[len++] = 'x';
    29ca:	41f7 483e      	lea %sp@(3e,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29ce:	082f 0005 008b 	btst #5,%sp@(139)
    29d4:	6600 fd28      	bnew 26fe <_ntoa_long+0x312>
      buf[len++] = 'x';
    29d8:	2004           	movel %d4,%d0
    29da:	5380           	subql #1,%d0
    29dc:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    29e0:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
    29e6:	6000 fd26      	braw 270e <_ntoa_long+0x322>
  if (flags & FLAGS_HASH) {
    29ea:	4aaf 0036      	tstl %sp@(54)
    29ee:	6700 fe88      	beqw 2878 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    29f2:	4aaf 0032      	tstl %sp@(50)
    29f6:	660e           	bnes 2a06 <_ntoa_long+0x61a>
    29f8:	7020           	moveq #32,%d0
    29fa:	b0af 0080      	cmpl %sp@(128),%d0
    29fe:	6738           	beqs 2a38 <_ntoa_long+0x64c>
    2a00:	7220           	moveq #32,%d1
    2a02:	b287           	cmpl %d7,%d1
    2a04:	6732           	beqs 2a38 <_ntoa_long+0x64c>
    2a06:	9dce           	subal %fp,%fp
    2a08:	6000 fc7a      	braw 2684 <_ntoa_long+0x298>
  if (flags & FLAGS_HASH) {
    2a0c:	4aaf 0036      	tstl %sp@(54)
    2a10:	6700 fc98      	beqw 26aa <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2a14:	4aaf 0032      	tstl %sp@(50)
    2a18:	6708           	beqs 2a22 <_ntoa_long+0x636>
    2a1a:	9dce           	subal %fp,%fp
    2a1c:	7820           	moveq #32,%d4
    2a1e:	6000 fc64      	braw 2684 <_ntoa_long+0x298>
    2a22:	7020           	moveq #32,%d0
    2a24:	7820           	moveq #32,%d4
    2a26:	b0af 0080      	cmpl %sp@(128),%d0
    2a2a:	6714           	beqs 2a40 <_ntoa_long+0x654>
    2a2c:	9dce           	subal %fp,%fp
    2a2e:	be84           	cmpl %d4,%d7
    2a30:	6600 fc52      	bnew 2684 <_ntoa_long+0x298>
    2a34:	6000 fdda      	braw 2810 <_ntoa_long+0x424>
    2a38:	9dce           	subal %fp,%fp
      len--;
    2a3a:	701f           	moveq #31,%d0
    2a3c:	6000 fdde      	braw 281c <_ntoa_long+0x430>
    2a40:	701f           	moveq #31,%d0
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2a42:	9dce           	subal %fp,%fp
    2a44:	6000 fdd6      	braw 281c <_ntoa_long+0x430>

00002a48 <_out_char>:
{
    2a48:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    2a4c:	4a00           	tstb %d0
    2a4e:	6602           	bnes 2a52 <_out_char+0xa>
}
    2a50:	4e75           	rts
    _putchar(character);
    2a52:	4880           	extw %d0
    2a54:	3040           	moveaw %d0,%a0
    2a56:	2f48 0004      	movel %a0,%sp@(4)
    2a5a:	4ef9 0000 3294 	jmp 3294 <_putchar>

00002a60 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2a60:	4fef fff4      	lea %sp@(-12),%sp
    2a64:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2a68:	2a6f 003c      	moveal %sp@(60),%a5
    2a6c:	2c2f 0040      	movel %sp@(64),%d6
    2a70:	242f 0044      	movel %sp@(68),%d2
    2a74:	286f 0048      	moveal %sp@(72),%a4
    2a78:	262f 004c      	movel %sp@(76),%d3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2a7c:	4a86           	tstl %d6
    2a7e:	6700 023e      	beqw 2cbe <_vsnprintf+0x25e>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2a82:	1014           	moveb %a4@,%d0
    2a84:	95ca           	subal %a2,%a2
    2a86:	4a00           	tstb %d0
    2a88:	6700 0244      	beqw 2cce <_vsnprintf+0x26e>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2a8c:	2c7c 0000 2afc 	moveal #11004,%fp
      format++;
    2a92:	528c           	addql #1,%a4
    if (*format != '%') {
    2a94:	0c00 0025      	cmpib #37,%d0
    2a98:	6740           	beqs 2ada <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    2a9a:	280a           	movel %a2,%d4
    2a9c:	5284           	addql #1,%d4
    2a9e:	2f02           	movel %d2,%sp@-
    2aa0:	2f0a           	movel %a2,%sp@-
    2aa2:	2f06           	movel %d6,%sp@-
    2aa4:	4880           	extw %d0
    2aa6:	3040           	moveaw %d0,%a0
    2aa8:	2f08           	movel %a0,%sp@-
    2aaa:	4e95           	jsr %a5@
      continue;
    2aac:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    2ab0:	2444           	moveal %d4,%a2
  while (*format)
    2ab2:	1014           	moveb %a4@,%d0
    2ab4:	66dc           	bnes 2a92 <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    2ab6:	260a           	movel %a2,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2ab8:	b5c2           	cmpal %d2,%a2
    2aba:	6504           	bcss 2ac0 <_vsnprintf+0x60>
    2abc:	2442           	moveal %d2,%a2
    2abe:	538a           	subql #1,%a2
    2ac0:	2f02           	movel %d2,%sp@-
    2ac2:	2f0a           	movel %a2,%sp@-
    2ac4:	2f06           	movel %d6,%sp@-
    2ac6:	42a7           	clrl %sp@-
    2ac8:	4e95           	jsr %a5@
  return (int)idx;
    2aca:	4fef 0010      	lea %sp@(16),%sp
}
    2ace:	2003           	movel %d3,%d0
    2ad0:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2ad4:	4fef 000c      	lea %sp@(12),%sp
    2ad8:	4e75           	rts
    flags = 0U;
    2ada:	7200           	moveq #0,%d1
      switch (*format) {
    2adc:	204c           	moveal %a4,%a0
    2ade:	1018           	moveb %a0@+,%d0
    2ae0:	1800           	moveb %d0,%d4
    2ae2:	0604 ffe0      	addib #-32,%d4
    2ae6:	0c04 0010      	cmpib #16,%d4
    2aea:	6232           	bhis 2b1e <_vsnprintf+0xbe>
    2aec:	0284 0000 00ff 	andil #255,%d4
    2af2:	d884           	addl %d4,%d4
    2af4:	3276 4800      	moveaw %fp@(0,%d4:l),%a1
    2af8:	4efb 9002      	jmp %pc@(2afc <_vsnprintf+0x9c>,%a1:w)
    2afc:	00e2           	.short 0x00e2
    2afe:	0022 0022      	orib #34,%a2@-
    2b02:	00d8           	.short 0x00d8
    2b04:	0022 0022      	orib #34,%a2@-
    2b08:	0022 0022      	orib #34,%a2@-
    2b0c:	0022 0022      	orib #34,%a2@-
    2b10:	0022 00ce      	orib #-50,%a2@-
    2b14:	0022 00c4      	orib #-60,%a2@-
    2b18:	0022 0022      	orib #34,%a2@-
    2b1c:	00ba           	.short 0x00ba
  return (ch >= '0') && (ch <= '9');
    2b1e:	1800           	moveb %d0,%d4
    2b20:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2b24:	0c04 0009      	cmpib #9,%d4
    2b28:	6300 00be      	blsw 2be8 <_vsnprintf+0x188>
    else if (*format == '*') {
    2b2c:	0c00 002a      	cmpib #42,%d0
    2b30:	6700 0172      	beqw 2ca4 <_vsnprintf+0x244>
    width = 0U;
    2b34:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2b36:	0c00 002e      	cmpib #46,%d0
    2b3a:	6700 00fc      	beqw 2c38 <_vsnprintf+0x1d8>
    precision = 0U;
    2b3e:	7e00           	moveq #0,%d7
        format++;
    2b40:	2808           	movel %a0,%d4
    switch (*format) {
    2b42:	0c00 006c      	cmpib #108,%d0
    2b46:	6700 011e      	beqw 2c66 <_vsnprintf+0x206>
    2b4a:	0c00 006c      	cmpib #108,%d0
    2b4e:	6e00 0136      	bgtw 2c86 <_vsnprintf+0x226>
    2b52:	0c00 0068      	cmpib #104,%d0
    2b56:	6700 02c8      	beqw 2e20 <_vsnprintf+0x3c0>
    2b5a:	0c00 006a      	cmpib #106,%d0
    2b5e:	6600 017a      	bnew 2cda <_vsnprintf+0x27a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2b62:	0041 0200      	oriw #512,%d1
        if (*format == 'l') {
    2b66:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2b6a:	2844           	moveal %d4,%a4
    2b6c:	528c           	addql #1,%a4
    switch (*format) {
    2b6e:	0c00 0078      	cmpib #120,%d0
    2b72:	6e00 0198      	bgtw 2d0c <_vsnprintf+0x2ac>
    2b76:	0c00 0063      	cmpib #99,%d0
    2b7a:	6e00 0168      	bgtw 2ce4 <_vsnprintf+0x284>
    2b7e:	0c00 0062      	cmpib #98,%d0
    2b82:	6700 05de      	beqw 3162 <_vsnprintf+0x702>
    2b86:	0c00 0063      	cmpib #99,%d0
    2b8a:	6700 0362      	beqw 2eee <_vsnprintf+0x48e>
    2b8e:	0c00 0025      	cmpib #37,%d0
    2b92:	6600 050a      	bnew 309e <_vsnprintf+0x63e>
        out('%', buffer, idx++, maxlen);
    2b96:	280a           	movel %a2,%d4
    2b98:	5284           	addql #1,%d4
    2b9a:	2f02           	movel %d2,%sp@-
    2b9c:	2f0a           	movel %a2,%sp@-
    2b9e:	2f06           	movel %d6,%sp@-
    2ba0:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2ba4:	4e95           	jsr %a5@
        break;
    2ba6:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2baa:	2444           	moveal %d4,%a2
  while (*format)
    2bac:	1014           	moveb %a4@,%d0
    2bae:	6600 fee2      	bnew 2a92 <_vsnprintf+0x32>
    2bb2:	6000 ff02      	braw 2ab6 <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2bb6:	7001           	moveq #1,%d0
    2bb8:	8280           	orl %d0,%d1
  while (*format)
    2bba:	2848           	moveal %a0,%a4
    2bbc:	6000 ff1e      	braw 2adc <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2bc0:	7a02           	moveq #2,%d5
    2bc2:	8285           	orl %d5,%d1
  while (*format)
    2bc4:	2848           	moveal %a0,%a4
    2bc6:	6000 ff14      	braw 2adc <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2bca:	7004           	moveq #4,%d0
    2bcc:	8280           	orl %d0,%d1
  while (*format)
    2bce:	2848           	moveal %a0,%a4
    2bd0:	6000 ff0a      	braw 2adc <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2bd4:	7010           	moveq #16,%d0
    2bd6:	8280           	orl %d0,%d1
  while (*format)
    2bd8:	2848           	moveal %a0,%a4
    2bda:	6000 ff00      	braw 2adc <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2bde:	7a08           	moveq #8,%d5
    2be0:	8285           	orl %d5,%d1
  while (*format)
    2be2:	2848           	moveal %a0,%a4
    2be4:	6000 fef6      	braw 2adc <_vsnprintf+0x7c>
  unsigned int i = 0U;
    2be8:	97cb           	subal %a3,%a3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2bea:	2848           	moveal %a0,%a4
    2bec:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2bf0:	d3c9           	addal %a1,%a1
    2bf2:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2bf6:	d7cb           	addal %a3,%a3
    2bf8:	4880           	extw %d0
    2bfa:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2bfe:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2c00:	1800           	moveb %d0,%d4
    2c02:	0604 ffd0      	addib #-48,%d4
    2c06:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2c08:	0c04 0009      	cmpib #9,%d4
    2c0c:	6200 ff28      	bhiw 2b36 <_vsnprintf+0xd6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2c10:	2848           	moveal %a0,%a4
    2c12:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2c16:	d3c9           	addal %a1,%a1
    2c18:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2c1c:	d7cb           	addal %a3,%a3
    2c1e:	4880           	extw %d0
    2c20:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2c24:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2c26:	1800           	moveb %d0,%d4
    2c28:	0604 ffd0      	addib #-48,%d4
    2c2c:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2c2e:	0c04 0009      	cmpib #9,%d4
    2c32:	63b6           	blss 2bea <_vsnprintf+0x18a>
    2c34:	6000 ff00      	braw 2b36 <_vsnprintf+0xd6>
      flags |= FLAGS_PRECISION;
    2c38:	0041 0400      	oriw #1024,%d1
      if (_is_digit(*format)) {
    2c3c:	102c 0001      	moveb %a4@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2c40:	1a00           	moveb %d0,%d5
    2c42:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2c46:	0c05 0009      	cmpib #9,%d5
    2c4a:	6300 02f6      	blsw 2f42 <_vsnprintf+0x4e2>
      else if (*format == '*') {
    2c4e:	0c00 002a      	cmpib #42,%d0
    2c52:	6700 0334      	beqw 2f88 <_vsnprintf+0x528>
      format++;
    2c56:	2848           	moveal %a0,%a4
    precision = 0U;
    2c58:	7e00           	moveq #0,%d7
    2c5a:	5288           	addql #1,%a0
        format++;
    2c5c:	2808           	movel %a0,%d4
    switch (*format) {
    2c5e:	0c00 006c      	cmpib #108,%d0
    2c62:	6600 fee6      	bnew 2b4a <_vsnprintf+0xea>
        if (*format == 'l') {
    2c66:	102c 0001      	moveb %a4@(1),%d0
    2c6a:	0c00 006c      	cmpib #108,%d0
    2c6e:	6700 040a      	beqw 307a <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2c72:	0041 0100      	oriw #256,%d1
        format++;
    2c76:	2844           	moveal %d4,%a4
    2c78:	528c           	addql #1,%a4
    switch (*format) {
    2c7a:	0c00 0078      	cmpib #120,%d0
    2c7e:	6f00 fef6      	blew 2b76 <_vsnprintf+0x116>
    2c82:	6000 0088      	braw 2d0c <_vsnprintf+0x2ac>
    switch (*format) {
    2c86:	0c00 007a      	cmpib #122,%d0
    2c8a:	6600 00a2      	bnew 2d2e <_vsnprintf+0x2ce>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2c8e:	0041 0100      	oriw #256,%d1
        if (*format == 'l') {
    2c92:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2c96:	2844           	moveal %d4,%a4
    2c98:	528c           	addql #1,%a4
    switch (*format) {
    2c9a:	0c00 0078      	cmpib #120,%d0
    2c9e:	6f00 fed6      	blew 2b76 <_vsnprintf+0x116>
    2ca2:	6068           	bras 2d0c <_vsnprintf+0x2ac>
      const int w = va_arg(va, int);
    2ca4:	2243           	moveal %d3,%a1
    2ca6:	2659           	moveal %a1@+,%a3
    2ca8:	2609           	movel %a1,%d3
      if (w < 0) {
    2caa:	b6fc 0000      	cmpaw #0,%a3
    2cae:	6d00 0124      	bltw 2dd4 <_vsnprintf+0x374>
    if (*format == '.') {
    2cb2:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2cb6:	2848           	moveal %a0,%a4
    2cb8:	5288           	addql #1,%a0
    2cba:	6000 fe7a      	braw 2b36 <_vsnprintf+0xd6>
    out = _out_null;
    2cbe:	4bf9 0000 23ea 	lea 23ea <_out_null>,%a5
  while (*format)
    2cc4:	1014           	moveb %a4@,%d0
    2cc6:	95ca           	subal %a2,%a2
    2cc8:	4a00           	tstb %d0
    2cca:	6600 fdc0      	bnew 2a8c <_vsnprintf+0x2c>
    2cce:	7600           	moveq #0,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2cd0:	b5c2           	cmpal %d2,%a2
    2cd2:	6500 fdec      	bcsw 2ac0 <_vsnprintf+0x60>
    2cd6:	6000 fde4      	braw 2abc <_vsnprintf+0x5c>
        format++;
    2cda:	2848           	moveal %a0,%a4
    switch (*format) {
    2cdc:	0c00 0063      	cmpib #99,%d0
    2ce0:	6f00 fe9c      	blew 2b7e <_vsnprintf+0x11e>
    2ce4:	1a00           	moveb %d0,%d5
    2ce6:	0605 ff9c      	addib #-100,%d5
    2cea:	0285 0000 00ff 	andil #255,%d5
    2cf0:	7801           	moveq #1,%d4
    2cf2:	ebac           	lsll %d5,%d4
    2cf4:	0284 0012 0821 	andil #1181729,%d4
    2cfa:	6652           	bnes 2d4e <_vsnprintf+0x2ee>
    2cfc:	0c00 0073      	cmpib #115,%d0
    2d00:	6700 0140      	beqw 2e42 <_vsnprintf+0x3e2>
    2d04:	0c00 0070      	cmpib #112,%d0
    2d08:	6700 00e0      	beqw 2dea <_vsnprintf+0x38a>
        out(*format, buffer, idx++, maxlen);
    2d0c:	280a           	movel %a2,%d4
    2d0e:	5284           	addql #1,%d4
    2d10:	2f02           	movel %d2,%sp@-
    2d12:	2f0a           	movel %a2,%sp@-
    2d14:	2f06           	movel %d6,%sp@-
    2d16:	4880           	extw %d0
    2d18:	3240           	moveaw %d0,%a1
    2d1a:	2f09           	movel %a1,%sp@-
    2d1c:	4e95           	jsr %a5@
        break;
    2d1e:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2d22:	2444           	moveal %d4,%a2
  while (*format)
    2d24:	1014           	moveb %a4@,%d0
    2d26:	6600 fd6a      	bnew 2a92 <_vsnprintf+0x32>
    2d2a:	6000 fd8a      	braw 2ab6 <_vsnprintf+0x56>
        format++;
    2d2e:	2848           	moveal %a0,%a4
    switch (*format) {
    2d30:	0c00 0078      	cmpib #120,%d0
    2d34:	6ed6           	bgts 2d0c <_vsnprintf+0x2ac>
    2d36:	1a00           	moveb %d0,%d5
    2d38:	0605 ff9c      	addib #-100,%d5
    2d3c:	0285 0000 00ff 	andil #255,%d5
    2d42:	7801           	moveq #1,%d4
    2d44:	ebac           	lsll %d5,%d4
    2d46:	0284 0012 0821 	andil #1181729,%d4
    2d4c:	67ae           	beqs 2cfc <_vsnprintf+0x29c>
        if (*format == 'x' || *format == 'X') {
    2d4e:	0c00 006f      	cmpib #111,%d0
    2d52:	6700 025c      	beqw 2fb0 <_vsnprintf+0x550>
    2d56:	6e00 03f2      	bgtw 314a <_vsnprintf+0x6ea>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2d5a:	78ef           	moveq #-17,%d4
    2d5c:	c881           	andl %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    2d5e:	0c00 0069      	cmpib #105,%d0
    2d62:	6600 045e      	bnew 31c2 <_vsnprintf+0x762>
        if (flags & FLAGS_PRECISION) {
    2d66:	0801 000a      	btst #10,%d1
    2d6a:	6704           	beqs 2d70 <_vsnprintf+0x310>
          flags &= ~FLAGS_ZEROPAD;
    2d6c:	78ee           	moveq #-18,%d4
    2d6e:	c881           	andl %d1,%d4
          if (flags & FLAGS_LONG_LONG) {
    2d70:	0804 0009      	btst #9,%d4
    2d74:	6600 fd3c      	bnew 2ab2 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2d78:	2a03           	movel %d3,%d5
    2d7a:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    2d7c:	0804 0008      	btst #8,%d4
    2d80:	6600 0470      	bnew 31f2 <_vsnprintf+0x792>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2d84:	0804 0006      	btst #6,%d4
    2d88:	6600 03e0      	bnew 316a <_vsnprintf+0x70a>
    2d8c:	4a04           	tstb %d4
    2d8e:	6a00 04ac      	bplw 323c <_vsnprintf+0x7dc>
    2d92:	2043           	moveal %d3,%a0
    2d94:	2010           	movel %a0@,%d0
    2d96:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2d98:	2f04           	movel %d4,%sp@-
    2d9a:	2f0b           	movel %a3,%sp@-
    2d9c:	2f07           	movel %d7,%sp@-
    2d9e:	4878 000a      	pea a <DUART_IMR>
    2da2:	2200           	movel %d0,%d1
    2da4:	d281           	addl %d1,%d1
    2da6:	9381           	subxl %d1,%d1
    2da8:	4481           	negl %d1
    2daa:	2f01           	movel %d1,%sp@-
    2dac:	4a80           	tstl %d0
    2dae:	6d00 03dc      	bltw 318c <_vsnprintf+0x72c>
    2db2:	2f00           	movel %d0,%sp@-
    2db4:	2f02           	movel %d2,%sp@-
    2db6:	2f0a           	movel %a2,%sp@-
    2db8:	2f06           	movel %d6,%sp@-
    2dba:	2f0d           	movel %a5,%sp@-
    2dbc:	4eb9 0000 23ec 	jsr 23ec <_ntoa_long>
    2dc2:	2440           	moveal %d0,%a2
    2dc4:	4fef 0028      	lea %sp@(40),%sp
    2dc8:	2605           	movel %d5,%d3
  while (*format)
    2dca:	1014           	moveb %a4@,%d0
    2dcc:	6600 fcc4      	bnew 2a92 <_vsnprintf+0x32>
    2dd0:	6000 fce4      	braw 2ab6 <_vsnprintf+0x56>
        flags |= FLAGS_LEFT;    // reverse padding
    2dd4:	7002           	moveq #2,%d0
    2dd6:	8280           	orl %d0,%d1
        width = (unsigned int)-w;
    2dd8:	2a0b           	movel %a3,%d5
    2dda:	4485           	negl %d5
    2ddc:	2645           	moveal %d5,%a3
    if (*format == '.') {
    2dde:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2de2:	2848           	moveal %a0,%a4
    2de4:	5288           	addql #1,%a0
    2de6:	6000 fd4e      	braw 2b36 <_vsnprintf+0xd6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2dea:	7021           	moveq #33,%d0
    2dec:	8081           	orl %d1,%d0
    2dee:	2f00           	movel %d0,%sp@-
    2df0:	4878 0008      	pea 8 <DUART_ACR>
    2df4:	2f07           	movel %d7,%sp@-
    2df6:	4878 0010      	pea 10 <DUART_MR1B>
    2dfa:	42a7           	clrl %sp@-
    2dfc:	2043           	moveal %d3,%a0
    2dfe:	2f18           	movel %a0@+,%sp@-
    2e00:	2608           	movel %a0,%d3
    2e02:	2f02           	movel %d2,%sp@-
    2e04:	2f0a           	movel %a2,%sp@-
    2e06:	2f06           	movel %d6,%sp@-
    2e08:	2f0d           	movel %a5,%sp@-
    2e0a:	4eb9 0000 23ec 	jsr 23ec <_ntoa_long>
    2e10:	2440           	moveal %d0,%a2
        break;
    2e12:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2e16:	1014           	moveb %a4@,%d0
    2e18:	6600 fc78      	bnew 2a92 <_vsnprintf+0x32>
    2e1c:	6000 fc98      	braw 2ab6 <_vsnprintf+0x56>
        if (*format == 'h') {
    2e20:	102c 0001      	moveb %a4@(1),%d0
    2e24:	0c00 0068      	cmpib #104,%d0
    2e28:	6700 0232      	beqw 305c <_vsnprintf+0x5fc>
        flags |= FLAGS_SHORT;
    2e2c:	7a7f           	moveq #127,%d5
    2e2e:	4605           	notb %d5
    2e30:	8285           	orl %d5,%d1
        format++;
    2e32:	2844           	moveal %d4,%a4
    2e34:	528c           	addql #1,%a4
    switch (*format) {
    2e36:	0c00 0078      	cmpib #120,%d0
    2e3a:	6f00 fd3a      	blew 2b76 <_vsnprintf+0x116>
    2e3e:	6000 fecc      	braw 2d0c <_vsnprintf+0x2ac>
        const char* p = va_arg(va, char*);
    2e42:	2f43 0030      	movel %d3,%sp@(48)
    2e46:	2243           	moveal %d3,%a1
    2e48:	58af 0030      	addql #4,%sp@(48)
    2e4c:	2619           	movel %a1@+,%d3
  for (s = str; *s && maxsize--; ++s);
    2e4e:	2043           	moveal %d3,%a0
    2e50:	1f50 002f      	moveb %a0@,%sp@(47)
    2e54:	102f 002f      	moveb %sp@(47),%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2e58:	4a87           	tstl %d7
    2e5a:	6700 0118      	beqw 2f74 <_vsnprintf+0x514>
  for (s = str; *s && maxsize--; ++s);
    2e5e:	4a00           	tstb %d0
    2e60:	671a           	beqs 2e7c <_vsnprintf+0x41c>
    2e62:	2807           	movel %d7,%d4
    2e64:	5384           	subql #1,%d4
    2e66:	2043           	moveal %d3,%a0
    2e68:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2e6c:	5288           	addql #1,%a0
    2e6e:	4a10           	tstb %a0@
    2e70:	6700 01e2      	beqw 3054 <_vsnprintf+0x5f4>
    2e74:	b1c9           	cmpal %a1,%a0
    2e76:	66f4           	bnes 2e6c <_vsnprintf+0x40c>
  return (unsigned int)(s - str);
    2e78:	2809           	movel %a1,%d4
    2e7a:	9883           	subl %d3,%d4
        if (flags & FLAGS_PRECISION) {
    2e7c:	2a01           	movel %d1,%d5
    2e7e:	0285 0000 0400 	andil #1024,%d5
    2e84:	2245           	moveal %d5,%a1
    2e86:	0801 000a      	btst #10,%d1
    2e8a:	6706           	beqs 2e92 <_vsnprintf+0x432>
          l = (l < precision ? l : precision);
    2e8c:	be84           	cmpl %d4,%d7
    2e8e:	6402           	bccs 2e92 <_vsnprintf+0x432>
    2e90:	2807           	movel %d7,%d4
        if (!(flags & FLAGS_LEFT)) {
    2e92:	7a02           	moveq #2,%d5
    2e94:	ca81           	andl %d1,%d5
    2e96:	2f45 0034      	movel %d5,%sp@(52)
    2e9a:	0801 0001      	btst #1,%d1
    2e9e:	6700 0258      	beqw 30f8 <_vsnprintf+0x698>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2ea2:	4a2f 002f      	tstb %sp@(47)
    2ea6:	6700 017a      	beqw 3022 <_vsnprintf+0x5c2>
    2eaa:	220a           	movel %a2,%d1
    2eac:	2a09           	movel %a1,%d5
    2eae:	204b           	moveal %a3,%a0
    2eb0:	2643           	moveal %d3,%a3
    2eb2:	224c           	moveal %a4,%a1
    2eb4:	284a           	moveal %a2,%a4
    2eb6:	2447           	moveal %d7,%a2
    2eb8:	2e09           	movel %a1,%d7
    2eba:	2608           	movel %a0,%d3
    2ebc:	4a85           	tstl %d5
    2ebe:	670e           	beqs 2ece <_vsnprintf+0x46e>
    2ec0:	41ea ffff      	lea %a2@(-1),%a0
    2ec4:	b4fc 0000      	cmpaw #0,%a2
    2ec8:	6700 014c      	beqw 3016 <_vsnprintf+0x5b6>
    2ecc:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    2ece:	528c           	addql #1,%a4
    2ed0:	528b           	addql #1,%a3
    2ed2:	2f02           	movel %d2,%sp@-
    2ed4:	2f01           	movel %d1,%sp@-
    2ed6:	2f06           	movel %d6,%sp@-
    2ed8:	4880           	extw %d0
    2eda:	3240           	moveaw %d0,%a1
    2edc:	2f09           	movel %a1,%sp@-
    2ede:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2ee0:	1013           	moveb %a3@,%d0
    2ee2:	4fef 0010      	lea %sp@(16),%sp
    2ee6:	6700 012e      	beqw 3016 <_vsnprintf+0x5b6>
    2eea:	220c           	movel %a4,%d1
    2eec:	60ce           	bras 2ebc <_vsnprintf+0x45c>
      out(*format, buffer, idx++, maxlen);
    2eee:	280a           	movel %a2,%d4
    2ef0:	5284           	addql #1,%d4
            const long value = va_arg(va, long);
    2ef2:	2a03           	movel %d3,%d5
    2ef4:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    2ef6:	0801 0001      	btst #1,%d1
    2efa:	6700 01b6      	beqw 30b2 <_vsnprintf+0x652>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2efe:	2f02           	movel %d2,%sp@-
    2f00:	2f0a           	movel %a2,%sp@-
    2f02:	2f06           	movel %d6,%sp@-
    2f04:	2043           	moveal %d3,%a0
    2f06:	2010           	movel %a0@,%d0
    2f08:	4880           	extw %d0
    2f0a:	3240           	moveaw %d0,%a1
    2f0c:	2f09           	movel %a1,%sp@-
    2f0e:	4e95           	jsr %a5@
          while (l++ < width) {
    2f10:	4fef 0010      	lea %sp@(16),%sp
    2f14:	d5cb           	addal %a3,%a2
    2f16:	7001           	moveq #1,%d0
    2f18:	b08b           	cmpl %a3,%d0
    2f1a:	6400 02ce      	bccw 31ea <_vsnprintf+0x78a>
            out(' ', buffer, idx++, maxlen);
    2f1e:	2004           	movel %d4,%d0
    2f20:	5284           	addql #1,%d4
    2f22:	2f02           	movel %d2,%sp@-
    2f24:	2f00           	movel %d0,%sp@-
    2f26:	2f06           	movel %d6,%sp@-
    2f28:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2f2c:	4e95           	jsr %a5@
          while (l++ < width) {
    2f2e:	4fef 0010      	lea %sp@(16),%sp
    2f32:	b5c4           	cmpal %d4,%a2
    2f34:	66e8           	bnes 2f1e <_vsnprintf+0x4be>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2f36:	2605           	movel %d5,%d3
  while (*format)
    2f38:	1014           	moveb %a4@,%d0
    2f3a:	6600 fb56      	bnew 2a92 <_vsnprintf+0x32>
    2f3e:	6000 fb76      	braw 2ab6 <_vsnprintf+0x56>
  unsigned int i = 0U;
    2f42:	7e00           	moveq #0,%d7
    2f44:	2848           	moveal %a0,%a4
    2f46:	2047           	moveal %d7,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2f48:	528c           	addql #1,%a4
    2f4a:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    2f4e:	d3c9           	addal %a1,%a1
    2f50:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    2f54:	d1c8           	addal %a0,%a0
    2f56:	4880           	extw %d0
    2f58:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    2f5c:	1014           	moveb %a4@,%d0
  return (ch >= '0') && (ch <= '9');
    2f5e:	1800           	moveb %d0,%d4
    2f60:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2f64:	0c04 0009      	cmpib #9,%d4
    2f68:	63de           	blss 2f48 <_vsnprintf+0x4e8>
    2f6a:	2e08           	movel %a0,%d7
    2f6c:	41ec 0001      	lea %a4@(1),%a0
    2f70:	6000 fbce      	braw 2b40 <_vsnprintf+0xe0>
  for (s = str; *s && maxsize--; ++s);
    2f74:	4a2f 002f      	tstb %sp@(47)
    2f78:	6700 ff02      	beqw 2e7c <_vsnprintf+0x41c>
    2f7c:	78fe           	moveq #-2,%d4
    2f7e:	2043           	moveal %d3,%a0
    2f80:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2f84:	6000 fee6      	braw 2e6c <_vsnprintf+0x40c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2f88:	2043           	moveal %d3,%a0
    2f8a:	2e18           	movel %a0@+,%d7
    2f8c:	2608           	movel %a0,%d3
    2f8e:	4a87           	tstl %d7
    2f90:	6d0e           	blts 2fa0 <_vsnprintf+0x540>
    switch (*format) {
    2f92:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2f96:	548c           	addql #2,%a4
    2f98:	41ec 0001      	lea %a4@(1),%a0
    2f9c:	6000 fba2      	braw 2b40 <_vsnprintf+0xe0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2fa0:	7e00           	moveq #0,%d7
    switch (*format) {
    2fa2:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2fa6:	548c           	addql #2,%a4
    2fa8:	41ec 0001      	lea %a4@(1),%a0
    2fac:	6000 fb92      	braw 2b40 <_vsnprintf+0xe0>
    switch (*format) {
    2fb0:	307c 0008      	moveaw #8,%a0
        if (flags & FLAGS_PRECISION) {
    2fb4:	0801 000a      	btst #10,%d1
    2fb8:	6600 00dc      	bnew 3096 <_vsnprintf+0x636>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2fbc:	70f3           	moveq #-13,%d0
    2fbe:	c280           	andl %d0,%d1
          if (flags & FLAGS_LONG_LONG) {
    2fc0:	0801 0009      	btst #9,%d1
    2fc4:	6600 faec      	bnew 2ab2 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2fc8:	2803           	movel %d3,%d4
    2fca:	5884           	addql #4,%d4
          else if (flags & FLAGS_LONG) {
    2fcc:	0801 0008      	btst #8,%d1
    2fd0:	6600 0242      	bnew 3214 <_vsnprintf+0x7b4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2fd4:	0801 0006      	btst #6,%d1
    2fd8:	6600 01d0      	bnew 31aa <_vsnprintf+0x74a>
    2fdc:	2243           	moveal %d3,%a1
    2fde:	2011           	movel %a1@,%d0
    2fe0:	4a01           	tstb %d1
    2fe2:	6a06           	bpls 2fea <_vsnprintf+0x58a>
    2fe4:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2fea:	2f01           	movel %d1,%sp@-
    2fec:	2f0b           	movel %a3,%sp@-
    2fee:	2f07           	movel %d7,%sp@-
    2ff0:	2f08           	movel %a0,%sp@-
    2ff2:	42a7           	clrl %sp@-
    2ff4:	2f00           	movel %d0,%sp@-
    2ff6:	2f02           	movel %d2,%sp@-
    2ff8:	2f0a           	movel %a2,%sp@-
    2ffa:	2f06           	movel %d6,%sp@-
    2ffc:	2f0d           	movel %a5,%sp@-
    2ffe:	4eb9 0000 23ec 	jsr 23ec <_ntoa_long>
    3004:	2440           	moveal %d0,%a2
    3006:	4fef 0028      	lea %sp@(40),%sp
    300a:	2604           	movel %d4,%d3
  while (*format)
    300c:	1014           	moveb %a4@,%d0
    300e:	6600 fa82      	bnew 2a92 <_vsnprintf+0x32>
    3012:	6000 faa2      	braw 2ab6 <_vsnprintf+0x56>
    3016:	2643           	moveal %d3,%a3
    3018:	244c           	moveal %a4,%a2
    301a:	2847           	moveal %d7,%a4
        if (flags & FLAGS_LEFT) {
    301c:	4aaf 0034      	tstl %sp@(52)
    3020:	6724           	beqs 3046 <_vsnprintf+0x5e6>
    3022:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    3024:	b88b           	cmpl %a3,%d4
    3026:	641e           	bccs 3046 <_vsnprintf+0x5e6>
    3028:	45f3 a800      	lea %a3@(0,%a2:l),%a2
    302c:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    302e:	2005           	movel %d5,%d0
    3030:	5285           	addql #1,%d5
    3032:	2f02           	movel %d2,%sp@-
    3034:	2f00           	movel %d0,%sp@-
    3036:	2f06           	movel %d6,%sp@-
    3038:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    303c:	4e95           	jsr %a5@
          while (l++ < width) {
    303e:	4fef 0010      	lea %sp@(16),%sp
    3042:	ba8a           	cmpl %a2,%d5
    3044:	66e8           	bnes 302e <_vsnprintf+0x5ce>
        const char* p = va_arg(va, char*);
    3046:	262f 0030      	movel %sp@(48),%d3
  while (*format)
    304a:	1014           	moveb %a4@,%d0
    304c:	6600 fa44      	bnew 2a92 <_vsnprintf+0x32>
    3050:	6000 fa64      	braw 2ab6 <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    3054:	2808           	movel %a0,%d4
    3056:	9883           	subl %d3,%d4
    3058:	6000 fe22      	braw 2e7c <_vsnprintf+0x41c>
          flags |= FLAGS_CHAR;
    305c:	703f           	moveq #63,%d0
    305e:	4600           	notb %d0
    3060:	8280           	orl %d0,%d1
          format++;
    3062:	280c           	movel %a4,%d4
    3064:	5484           	addql #2,%d4
    switch (*format) {
    3066:	102c 0002      	moveb %a4@(2),%d0
        format++;
    306a:	2844           	moveal %d4,%a4
    306c:	528c           	addql #1,%a4
    switch (*format) {
    306e:	0c00 0078      	cmpib #120,%d0
    3072:	6f00 fb02      	blew 2b76 <_vsnprintf+0x116>
    3076:	6000 fc94      	braw 2d0c <_vsnprintf+0x2ac>
          flags |= FLAGS_LONG_LONG;
    307a:	0041 0300      	oriw #768,%d1
          format++;
    307e:	280c           	movel %a4,%d4
    3080:	5484           	addql #2,%d4
    switch (*format) {
    3082:	102c 0002      	moveb %a4@(2),%d0
        format++;
    3086:	2844           	moveal %d4,%a4
    3088:	528c           	addql #1,%a4
    switch (*format) {
    308a:	0c00 0078      	cmpib #120,%d0
    308e:	6f00 fae6      	blew 2b76 <_vsnprintf+0x116>
    3092:	6000 fc78      	braw 2d0c <_vsnprintf+0x2ac>
          flags &= ~FLAGS_ZEROPAD;
    3096:	70f2           	moveq #-14,%d0
    3098:	c280           	andl %d0,%d1
        if ((*format == 'i') || (*format == 'd')) {
    309a:	6000 ff24      	braw 2fc0 <_vsnprintf+0x560>
    switch (*format) {
    309e:	0c00 0058      	cmpib #88,%d0
    30a2:	6600 fc68      	bnew 2d0c <_vsnprintf+0x2ac>
          flags |= FLAGS_UPPERCASE;
    30a6:	7a20           	moveq #32,%d5
    30a8:	8285           	orl %d5,%d1
    30aa:	307c 0010      	moveaw #16,%a0
    30ae:	6000 ff04      	braw 2fb4 <_vsnprintf+0x554>
          while (l++ < width) {
    30b2:	7001           	moveq #1,%d0
    30b4:	b08b           	cmpl %a3,%d0
    30b6:	6400 011c      	bccw 31d4 <_vsnprintf+0x774>
    30ba:	41f3 a8ff      	lea %a3@(ffffffffffffffff,%a2:l),%a0
    30be:	2e08           	movel %a0,%d7
    30c0:	280a           	movel %a2,%d4
            out(' ', buffer, idx++, maxlen);
    30c2:	2004           	movel %d4,%d0
    30c4:	5284           	addql #1,%d4
    30c6:	2f02           	movel %d2,%sp@-
    30c8:	2f00           	movel %d0,%sp@-
    30ca:	2f06           	movel %d6,%sp@-
    30cc:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    30d0:	4e95           	jsr %a5@
          while (l++ < width) {
    30d2:	4fef 0010      	lea %sp@(16),%sp
    30d6:	b887           	cmpl %d7,%d4
    30d8:	66e8           	bnes 30c2 <_vsnprintf+0x662>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    30da:	d5cb           	addal %a3,%a2
    30dc:	2f02           	movel %d2,%sp@-
    30de:	2f07           	movel %d7,%sp@-
    30e0:	2f06           	movel %d6,%sp@-
    30e2:	2243           	moveal %d3,%a1
    30e4:	2011           	movel %a1@,%d0
    30e6:	4880           	extw %d0
    30e8:	3040           	moveaw %d0,%a0
    30ea:	2f08           	movel %a0,%sp@-
    30ec:	4e95           	jsr %a5@
    30ee:	4fef 0010      	lea %sp@(16),%sp
    30f2:	2605           	movel %d5,%d3
    30f4:	6000 fe42      	braw 2f38 <_vsnprintf+0x4d8>
          while (l++ < width) {
    30f8:	b88b           	cmpl %a3,%d4
    30fa:	6400 0162      	bccw 325e <_vsnprintf+0x7fe>
    30fe:	200b           	movel %a3,%d0
    3100:	d08a           	addl %a2,%d0
    3102:	9084           	subl %d4,%d0
    3104:	2800           	movel %d0,%d4
    3106:	2a09           	movel %a1,%d5
            out(' ', buffer, idx++, maxlen);
    3108:	200a           	movel %a2,%d0
    310a:	528a           	addql #1,%a2
    310c:	2f02           	movel %d2,%sp@-
    310e:	2f00           	movel %d0,%sp@-
    3110:	2f06           	movel %d6,%sp@-
    3112:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3116:	4e95           	jsr %a5@
          while (l++ < width) {
    3118:	4fef 0010      	lea %sp@(16),%sp
    311c:	b5c4           	cmpal %d4,%a2
    311e:	66e8           	bnes 3108 <_vsnprintf+0x6a8>
    3120:	2245           	moveal %d5,%a1
    3122:	280b           	movel %a3,%d4
    3124:	5284           	addql #1,%d4
    3126:	2043           	moveal %d3,%a0
    3128:	1f50 002f      	moveb %a0@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    312c:	102f 002f      	moveb %sp@(47),%d0
    3130:	6700 ff14      	beqw 3046 <_vsnprintf+0x5e6>
    3134:	220a           	movel %a2,%d1
    3136:	2a09           	movel %a1,%d5
    3138:	204b           	moveal %a3,%a0
    313a:	2643           	moveal %d3,%a3
    313c:	224c           	moveal %a4,%a1
    313e:	284a           	moveal %a2,%a4
    3140:	2447           	moveal %d7,%a2
    3142:	2e09           	movel %a1,%d7
    3144:	2608           	movel %a0,%d3
    3146:	6000 fd74      	braw 2ebc <_vsnprintf+0x45c>
    switch (*format) {
    314a:	307c 0010      	moveaw #16,%a0
    314e:	0c00 0078      	cmpib #120,%d0
    3152:	6700 fe60      	beqw 2fb4 <_vsnprintf+0x554>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    3156:	70ef           	moveq #-17,%d0
    3158:	c280           	andl %d0,%d1
    315a:	307c 000a      	moveaw #10,%a0
    315e:	6000 fe54      	braw 2fb4 <_vsnprintf+0x554>
    switch (*format) {
    3162:	307c 0002      	moveaw #2,%a0
    3166:	6000 fe4c      	braw 2fb4 <_vsnprintf+0x554>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    316a:	2243           	moveal %d3,%a1
    316c:	2011           	movel %a1@,%d0
    316e:	4880           	extw %d0
    3170:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3172:	2f04           	movel %d4,%sp@-
    3174:	2f0b           	movel %a3,%sp@-
    3176:	2f07           	movel %d7,%sp@-
    3178:	4878 000a      	pea a <DUART_IMR>
    317c:	2200           	movel %d0,%d1
    317e:	d281           	addl %d1,%d1
    3180:	9381           	subxl %d1,%d1
    3182:	4481           	negl %d1
    3184:	2f01           	movel %d1,%sp@-
    3186:	4a80           	tstl %d0
    3188:	6c00 fc28      	bgew 2db2 <_vsnprintf+0x352>
    318c:	4480           	negl %d0
    318e:	2f00           	movel %d0,%sp@-
    3190:	2f02           	movel %d2,%sp@-
    3192:	2f0a           	movel %a2,%sp@-
    3194:	2f06           	movel %d6,%sp@-
    3196:	2f0d           	movel %a5,%sp@-
    3198:	4eb9 0000 23ec 	jsr 23ec <_ntoa_long>
    319e:	2440           	moveal %d0,%a2
    31a0:	4fef 0028      	lea %sp@(40),%sp
    31a4:	2605           	movel %d5,%d3
    31a6:	6000 fc22      	braw 2dca <_vsnprintf+0x36a>
    31aa:	7000           	moveq #0,%d0
    31ac:	4600           	notb %d0
    31ae:	2243           	moveal %d3,%a1
    31b0:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    31b2:	2f01           	movel %d1,%sp@-
    31b4:	2f0b           	movel %a3,%sp@-
    31b6:	2f07           	movel %d7,%sp@-
    31b8:	2f08           	movel %a0,%sp@-
    31ba:	42a7           	clrl %sp@-
    31bc:	2f00           	movel %d0,%sp@-
    31be:	6000 fe36      	braw 2ff6 <_vsnprintf+0x596>
        if ((*format != 'i') && (*format != 'd')) {
    31c2:	0c00 0064      	cmpib #100,%d0
    31c6:	6700 fb9e      	beqw 2d66 <_vsnprintf+0x306>
    31ca:	2204           	movel %d4,%d1
    31cc:	307c 000a      	moveaw #10,%a0
    31d0:	6000 fde2      	braw 2fb4 <_vsnprintf+0x554>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    31d4:	2f02           	movel %d2,%sp@-
    31d6:	2f0a           	movel %a2,%sp@-
    31d8:	2f06           	movel %d6,%sp@-
    31da:	2043           	moveal %d3,%a0
    31dc:	2010           	movel %a0@,%d0
    31de:	4880           	extw %d0
    31e0:	3240           	moveaw %d0,%a1
    31e2:	2f09           	movel %a1,%sp@-
    31e4:	4e95           	jsr %a5@
    31e6:	4fef 0010      	lea %sp@(16),%sp
    31ea:	2444           	moveal %d4,%a2
    31ec:	2605           	movel %d5,%d3
    31ee:	6000 fd48      	braw 2f38 <_vsnprintf+0x4d8>
            const long value = va_arg(va, long);
    31f2:	2043           	moveal %d3,%a0
    31f4:	2010           	movel %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    31f6:	2f04           	movel %d4,%sp@-
    31f8:	2f0b           	movel %a3,%sp@-
    31fa:	2f07           	movel %d7,%sp@-
    31fc:	4878 000a      	pea a <DUART_IMR>
    3200:	2200           	movel %d0,%d1
    3202:	d281           	addl %d1,%d1
    3204:	9381           	subxl %d1,%d1
    3206:	4481           	negl %d1
    3208:	2f01           	movel %d1,%sp@-
    320a:	4a80           	tstl %d0
    320c:	6c00 fba4      	bgew 2db2 <_vsnprintf+0x352>
    3210:	6000 ff7a      	braw 318c <_vsnprintf+0x72c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3214:	2f01           	movel %d1,%sp@-
    3216:	2f0b           	movel %a3,%sp@-
    3218:	2f07           	movel %d7,%sp@-
    321a:	2f08           	movel %a0,%sp@-
    321c:	42a7           	clrl %sp@-
    321e:	2043           	moveal %d3,%a0
    3220:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3222:	2f02           	movel %d2,%sp@-
    3224:	2f0a           	movel %a2,%sp@-
    3226:	2f06           	movel %d6,%sp@-
    3228:	2f0d           	movel %a5,%sp@-
    322a:	4eb9 0000 23ec 	jsr 23ec <_ntoa_long>
    3230:	2440           	moveal %d0,%a2
    3232:	4fef 0028      	lea %sp@(40),%sp
    3236:	2604           	movel %d4,%d3
        break;
    3238:	6000 fdd2      	braw 300c <_vsnprintf+0x5ac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    323c:	2243           	moveal %d3,%a1
    323e:	2011           	movel %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3240:	2f04           	movel %d4,%sp@-
    3242:	2f0b           	movel %a3,%sp@-
    3244:	2f07           	movel %d7,%sp@-
    3246:	4878 000a      	pea a <DUART_IMR>
    324a:	2200           	movel %d0,%d1
    324c:	d281           	addl %d1,%d1
    324e:	9381           	subxl %d1,%d1
    3250:	4481           	negl %d1
    3252:	2f01           	movel %d1,%sp@-
    3254:	4a80           	tstl %d0
    3256:	6c00 fb5a      	bgew 2db2 <_vsnprintf+0x352>
    325a:	6000 ff30      	braw 318c <_vsnprintf+0x72c>
          while (l++ < width) {
    325e:	5284           	addql #1,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3260:	102f 002f      	moveb %sp@(47),%d0
    3264:	6600 fece      	bnew 3134 <_vsnprintf+0x6d4>
    3268:	6000 fddc      	braw 3046 <_vsnprintf+0x5e6>

0000326c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    326c:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3270:	486e 000c      	pea %fp@(12)
    3274:	2f2e 0008      	movel %fp@(8),%sp@-
    3278:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    327c:	486e ffff      	pea %fp@(-1)
    3280:	4879 0000 2a48 	pea 2a48 <_out_char>
    3286:	4eb9 0000 2a60 	jsr 2a60 <_vsnprintf>
  va_end(va);
  return ret;
    328c:	4fef 0014      	lea %sp@(20),%sp
}
    3290:	4e5e           	unlk %fp
    3292:	4e75           	rts

00003294 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3294:	2f02           	movel %d2,%sp@-
    3296:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    329a:	0c02 000a      	cmpib #10,%d2
    329e:	6714           	beqs 32b4 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    32a0:	41f9 0000 345c 	lea 345c <buf>,%a0
    32a6:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    32a8:	2f48 0008      	movel %a0,%sp@(8)
}
    32ac:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    32ae:	4ef9 0000 32d6 	jmp 32d6 <mcPrint>
    mcPrint(crbuf);
    32b4:	4879 0000 3458 	pea 3458 <crbuf>
    32ba:	4eb9 0000 32d6 	jsr 32d6 <mcPrint>
    32c0:	588f           	addql #4,%sp
  buf[0] = chr;
    32c2:	41f9 0000 345c 	lea 345c <buf>,%a0
    32c8:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    32ca:	2f48 0008      	movel %a0,%sp@(8)
}
    32ce:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    32d0:	4ef9 0000 32d6 	jmp 32d6 <mcPrint>

000032d6 <mcPrint>:
    32d6:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    32da:	206f 0010      	moveal %sp@(16),%a0
    32de:	7200           	moveq #0,%d1
    32e0:	4e4e           	trap #14
    32e2:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    32e6:	4e75           	rts

000032e8 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    32e8:	41f9 0000 345c 	lea 345c <buf>,%a0
    32ee:	b1fc 0000 6c68 	cmpal #27752,%a0
    32f4:	641c           	bccs 3312 <__kinit+0x2a>
    32f6:	203c 0000 6c68 	movel #27752,%d0
    32fc:	0480 0000 345d 	subil #13405,%d0
    3302:	72fc           	moveq #-4,%d1
    3304:	c081           	andl %d1,%d0
    3306:	0680 0000 3460 	addil #13408,%d0
    330c:	4298           	clrl %a0@+
    330e:	b088           	cmpl %a0,%d0
    3310:	66fa           	bnes 330c <__kinit+0x24>
}
    3312:	4e75           	rts

00003314 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    3314:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    3318:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    331c:	7200           	moveq #0,%d1
    331e:	3239 0000 3464 	movew 3464 <cxa_atexit_count>,%d1
    3324:	2401           	movel %d1,%d2
    3326:	5382           	subql #1,%d2
    3328:	4a81           	tstl %d1
    332a:	6738           	beqs 3364 <__cxa_finalize+0x50>
    332c:	2001           	movel %d1,%d0
    332e:	e788           	lsll #3,%d0
    3330:	2440           	moveal %d0,%a2
    3332:	95c1           	subal %d1,%a2
    3334:	d5ca           	addal %a2,%a2
    3336:	d5fc 0000 3458 	addal #13400,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    333c:	4a83           	tstl %d3
    333e:	662a           	bnes 336a <__cxa_finalize+0x56>
    3340:	4a2a 000c      	tstb %a2@(12)
    3344:	6610           	bnes 3356 <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    3346:	2f2a 0004      	movel %a2@(4),%sp@-
    334a:	2052           	moveal %a2@,%a0
    334c:	4e90           	jsr %a0@
            entry->done = true;
    334e:	157c 0001 000c 	moveb #1,%a2@(12)
    3354:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3356:	45ea fff2      	lea %a2@(-14),%a2
    335a:	51ca ffe0      	dbf %d2,333c <__cxa_finalize+0x28>
    335e:	4242           	clrw %d2
    3360:	5382           	subql #1,%d2
    3362:	64d8           	bccs 333c <__cxa_finalize+0x28>
        }
    }
}
    3364:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3368:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    336a:	b6aa 0008      	cmpl %a2@(8),%d3
    336e:	67d0           	beqs 3340 <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3370:	45ea fff2      	lea %a2@(-14),%a2
    3374:	51ca fff4      	dbf %d2,336a <__cxa_finalize+0x56>
    3378:	4242           	clrw %d2
    337a:	5382           	subql #1,%d2
    337c:	64ec           	bccs 336a <__cxa_finalize+0x56>
}
    337e:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3382:	4e75           	rts

00003384 <__udivsi3>:
    3384:	2f02           	movel %d2,%sp@-
    3386:	222f 000c      	movel %sp@(12),%d1
    338a:	202f 0008      	movel %sp@(8),%d0
    338e:	0c81 0001 0000 	cmpil #65536,%d1
    3394:	6416           	bccs 33ac <L3>
    3396:	2400           	movel %d0,%d2
    3398:	4242           	clrw %d2
    339a:	4842           	swap %d2
    339c:	84c1           	divuw %d1,%d2
    339e:	3002           	movew %d2,%d0
    33a0:	4840           	swap %d0
    33a2:	342f 000a      	movew %sp@(10),%d2
    33a6:	84c1           	divuw %d1,%d2
    33a8:	3002           	movew %d2,%d0
    33aa:	6030           	bras 33dc <L6>

000033ac <L3>:
    33ac:	2401           	movel %d1,%d2

000033ae <L4>:
    33ae:	e289           	lsrl #1,%d1
    33b0:	e288           	lsrl #1,%d0
    33b2:	0c81 0001 0000 	cmpil #65536,%d1
    33b8:	64f4           	bccs 33ae <L4>
    33ba:	80c1           	divuw %d1,%d0
    33bc:	0280 0000 ffff 	andil #65535,%d0
    33c2:	2202           	movel %d2,%d1
    33c4:	c2c0           	muluw %d0,%d1
    33c6:	4842           	swap %d2
    33c8:	c4c0           	muluw %d0,%d2
    33ca:	4842           	swap %d2
    33cc:	4a42           	tstw %d2
    33ce:	660a           	bnes 33da <L5>
    33d0:	d282           	addl %d2,%d1
    33d2:	6506           	bcss 33da <L5>
    33d4:	b2af 0008      	cmpl %sp@(8),%d1
    33d8:	6302           	blss 33dc <L6>

000033da <L5>:
    33da:	5380           	subql #1,%d0

000033dc <L6>:
    33dc:	241f           	movel %sp@+,%d2
    33de:	4e75           	rts

000033e0 <__umodsi3>:
    33e0:	222f 0008      	movel %sp@(8),%d1
    33e4:	202f 0004      	movel %sp@(4),%d0
    33e8:	2f01           	movel %d1,%sp@-
    33ea:	2f00           	movel %d0,%sp@-
    33ec:	4eb9 0000 3384 	jsr 3384 <__udivsi3>
    33f2:	508f           	addql #8,%sp
    33f4:	222f 0008      	movel %sp@(8),%d1
    33f8:	2f01           	movel %d1,%sp@-
    33fa:	2f00           	movel %d0,%sp@-
    33fc:	4eb9 0000 3410 	jsr 3410 <__mulsi3>
    3402:	508f           	addql #8,%sp
    3404:	222f 0004      	movel %sp@(4),%d1
    3408:	9280           	subl %d0,%d1
    340a:	2001           	movel %d1,%d0
    340c:	4e75           	rts
	...

00003410 <__mulsi3>:
    3410:	302f 0004      	movew %sp@(4),%d0
    3414:	c0ef 000a      	muluw %sp@(10),%d0
    3418:	322f 0006      	movew %sp@(6),%d1
    341c:	c2ef 0008      	muluw %sp@(8),%d1
    3420:	d041           	addw %d1,%d0
    3422:	4840           	swap %d0
    3424:	4240           	clrw %d0
    3426:	322f 0006      	movew %sp@(6),%d1
    342a:	c2ef 000a      	muluw %sp@(10),%d1
    342e:	d081           	addl %d1,%d0
    3430:	4e75           	rts
    3432:	416e           	.short 0x416e
    3434:	7377           	.short 0x7377
    3436:	6572           	bcss 34aa <cxa_atexits+0x44>
    3438:	2028 696e      	movel %a0@(26990),%d0
    343c:	7429           	moveq #41,%d2
    343e:	2025           	movel %a5@-,%d0
    3440:	643d           	bccs 347f <cxa_atexits+0x19>
    3442:	3136 0a00      	movew %fp@(0,%d0:l:2),%a0@-
