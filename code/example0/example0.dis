
example0.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 3454 	movel #13396,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,3460 <SAVE_PROG_EXIT>
    2048:	3460 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 32ec 	lea 32ec <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 20c4 	lea 20c4 <_postinit_end>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 3460 	movel 3460 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 3318 	lea 3318 <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 3450 	lea 3450 <crbuf>,%a2
    208a:	47f9 0000 3450 	lea 3450 <crbuf>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 3450 	lea 3450 <crbuf>,%a2
    20ac:	47f9 0000 3450 	lea 3450 <crbuf>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <kmain>:
 */

#include "stdio.h"
#include "debug_stub.h"

int kmain() {
    20c4:	4fef fff0      	lea %sp@(-16),%sp
    debug_stub();
    20c8:	4eb9 0000 211c 	jsr 211c <debug_stub>
    double a, b; 

    a = 5.8;
    20ce:	2f7c 4017 3333 	movel #1075262259,%sp@(8)
    20d4:	0008 
    20d6:	2f7c 3333 3333 	movel #858993459,%sp@(12)
    20dc:	000c 
    b = 2.8;
    20de:	2ebc 4006 6666 	movel #1074161254,%sp@
    20e4:	2f7c 6666 6666 	movel #1717986918,%sp@(4)
    20ea:	0004 

    printf("Answer (int) %d=16\n", (int)(a * b));
    20ec:	f22f 5480 0008 	fmoved %sp@(8),%fp1
    20f2:	f217 5400      	fmoved %sp@,%fp0
    20f6:	f200 0423      	fmulx %fp1,%fp0
    20fa:	f200 0003      	fintrzx %fp0,%fp0
    20fe:	f200 6000      	fmovel %fp0,%d0
    2102:	2f00           	movel %d0,%sp@-
    2104:	4879 0000 3436 	pea 3436 <__mulsi3+0x22>
    210a:	4eb9 0000 3270 	jsr 3270 <printf_>
    2110:	508f           	addql #8,%sp

    return 0;
    2112:	4280           	clrl %d0
}
    2114:	4fef 0010      	lea %sp@(16),%sp
    2118:	4e75           	rts
	...

0000211c <debug_stub>:
    211c:	700a           	moveq #10,%d0
    211e:	43f8 0008      	lea 8 <DUART_ACR>,%a1
    2122:	41fa 00fc      	lea %pc@(2220 <debug_stub+0x104>),%a0
    2126:	22c8           	movel %a0,%a1@+
    2128:	41e8 000c      	lea %a0@(12),%a0
    212c:	5380           	subql #1,%d0
    212e:	66f6           	bnes 2126 <debug_stub+0xa>
    2130:	4e75           	rts
    2132:	4275 7320 6572 	clrw %a5@(6572,%d7:w:2)
    2138:	726f           	moveq #111,%d1
    213a:	7200           	moveq #0,%d1
    213c:	4164           	.short 0x4164
    213e:	6472           	bccs 21b2 <debug_stub+0x96>
    2140:	6573           	bcss 21b5 <debug_stub+0x99>
    2142:	7320           	.short 0x7320
    2144:	6572           	bcss 21b8 <debug_stub+0x9c>
    2146:	726f           	moveq #111,%d1
    2148:	7200           	moveq #0,%d1
    214a:	496c           	.short 0x496c
    214c:	6c65           	bges 21b3 <debug_stub+0x97>
    214e:	6761           	beqs 21b1 <debug_stub+0x95>
    2150:	6c20           	bges 2172 <debug_stub+0x56>
    2152:	696e           	bvss 21c2 <debug_stub+0xa6>
    2154:	7374           	.short 0x7374
    2156:	7275           	moveq #117,%d1
    2158:	6374           	blss 21ce <debug_stub+0xb2>
    215a:	696f           	bvss 21cb <debug_stub+0xaf>
    215c:	6e00 4469      	bgtw 65c7 <cxa_atexits+0x3161>
    2160:	7669           	moveq #105,%d3
    2162:	7369           	.short 0x7369
    2164:	6f6e           	bles 21d4 <debug_stub+0xb8>
    2166:	2062           	moveal %a2@-,%a0
    2168:	7920           	.short 0x7920
    216a:	7a65           	moveq #101,%d5
    216c:	726f           	moveq #111,%d1
    216e:	0043 484b      	oriw #18507,%d3
    2172:	2069 6e73      	moveal %a1@(28275),%a0
    2176:	7472           	moveq #114,%d2
    2178:	7563           	.short 0x7563
    217a:	7469           	moveq #105,%d2
    217c:	6f6e           	bles 21ec <debug_stub+0xd0>
    217e:	0054 5241      	oriw #21057,%a4@
    2182:	5056           	addqw #8,%fp@
    2184:	2069 6e73      	moveal %a1@(28275),%a0
    2188:	7472           	moveq #114,%d2
    218a:	7563           	.short 0x7563
    218c:	7469           	moveq #105,%d2
    218e:	6f6e           	bles 21fe <debug_stub+0xe2>
    2190:	0050 7269      	oriw #29289,%a0@
    2194:	7669           	moveq #105,%d3
    2196:	6c65           	bges 21fd <debug_stub+0xe1>
    2198:	6765           	beqs 21ff <debug_stub+0xe3>
    219a:	2076 696f 6c61 	moveal %fp@(6c61)@(74696f6e),%a0
    21a0:	7469 6f6e 
    21a4:	0054 7261      	oriw #29281,%a4@
    21a8:	6365           	blss 220f <debug_stub+0xf3>
    21aa:	0024 4178      	orib #120,%a4@-
    21ae:	7878           	moveq #120,%d4
    21b0:	2069 6e73      	moveal %a1@(28275),%a0
    21b4:	7472           	moveq #114,%d2
    21b6:	7563           	.short 0x7563
    21b8:	7469           	moveq #105,%d2
    21ba:	6f6e           	bles 222a <debug_stub+0x10e>
    21bc:	0024 4678      	orib #120,%a4@-
    21c0:	7878           	moveq #120,%d4
    21c2:	204c           	moveal %a4,%a0
    21c4:	4942           	.short 0x4942
    21c6:	2069 6e73      	moveal %a1@(28275),%a0
    21ca:	7472           	moveq #114,%d2
    21cc:	7563           	.short 0x7563
    21ce:	7469           	moveq #105,%d2
    21d0:	6f6e           	bles 2240 <debug_stub+0x124>
    21d2:	000d           	.short 0x000d
    21d4:	0a07 2a2a      	eorib #42,%d7
    21d8:	2a20           	movel %a0@-,%d5
    21da:	536f 6674      	subqw #1,%sp@(26228)
    21de:	7761           	.short 0x7761
    21e0:	7265           	moveq #101,%d1
    21e2:	2046           	moveal %d6,%a0
    21e4:	6169           	bsrs 224f <debug_stub+0x133>
    21e6:	6c75           	bges 225d <debug_stub+0x141>
    21e8:	7265           	moveq #101,%d1
    21ea:	3a20           	movew %a0@-,%d5
    21ec:	0020 2866      	orib #102,%a0@-
    21f0:	6175           	bsrs 2267 <debug_stub+0x14b>
    21f2:	6c74           	bges 2268 <debug_stub+0x14c>
    21f4:	2061           	moveal %a1@-,%a0
    21f6:	6464           	bccs 225c <debug_stub+0x140>
    21f8:	7220           	moveq #32,%d1
    21fa:	0029 000d 0a50 	orib #13,%a1@(2640)
    2200:	433d           	.short 0x433d
    2202:	0020 6f70      	orib #112,%a0@-
    2206:	3d00           	movew %d0,%fp@-
    2208:	2020           	movel %a0@-,%d0
    220a:	2020           	movel %a0@-,%d0
    220c:	2053           	moveal %a3@,%a0
    220e:	523d           	.short 0x523d
    2210:	0020 2020      	orib #32,%a0@-
    2214:	2055           	moveal %a5@,%a0
    2216:	5350           	subqw #1,%a0@
    2218:	3d00           	movew %d0,%fp@-
    221a:	0d0a 0000      	movepw %a2@(0),%d6
    221e:	0000 007c      	orib #124,%d0
    2222:	0700           	btst %d3,%d0
    2224:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2228:	7400           	moveq #0,%d2
    222a:	606a           	bras 2296 <debug_stub+0x17a>
    222c:	007c 0700      	oriw #1792,%sr
    2230:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2234:	7402           	moveq #2,%d2
    2236:	605e           	bras 2296 <debug_stub+0x17a>
    2238:	007c 0700      	oriw #1792,%sr
    223c:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2240:	7404           	moveq #4,%d2
    2242:	6052           	bras 2296 <debug_stub+0x17a>
    2244:	007c 0700      	oriw #1792,%sr
    2248:	48e7 ffff      	moveml %d0-%sp,%sp@-
    224c:	7406           	moveq #6,%d2
    224e:	6046           	bras 2296 <debug_stub+0x17a>
    2250:	007c 0700      	oriw #1792,%sr
    2254:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2258:	7408           	moveq #8,%d2
    225a:	603a           	bras 2296 <debug_stub+0x17a>
    225c:	007c 0700      	oriw #1792,%sr
    2260:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2264:	740a           	moveq #10,%d2
    2266:	602e           	bras 2296 <debug_stub+0x17a>
    2268:	007c 0700      	oriw #1792,%sr
    226c:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2270:	740c           	moveq #12,%d2
    2272:	6022           	bras 2296 <debug_stub+0x17a>
    2274:	007c 0700      	oriw #1792,%sr
    2278:	48e7 ffff      	moveml %d0-%sp,%sp@-
    227c:	740e           	moveq #14,%d2
    227e:	6016           	bras 2296 <debug_stub+0x17a>
    2280:	007c 0700      	oriw #1792,%sr
    2284:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2288:	7410           	moveq #16,%d2
    228a:	600a           	bras 2296 <debug_stub+0x17a>
    228c:	007c 0700      	oriw #1792,%sr
    2290:	48e7 ffff      	moveml %d0-%sp,%sp@-
    2294:	7412           	moveq #18,%d2
    2296:	3f6f 0040 fffe 	movew %sp@(64),%sp@(-2)
    229c:	206f 0042      	moveal %sp@(66),%a0
    22a0:	2f48 fffa      	movel %a0,%sp@(-6)
    22a4:	3f50 fff8      	movew %a0@,%sp@(-8)
    22a8:	42af fff4      	clrl %sp@(-12)
    22ac:	b47c 0004      	cmpw #4,%d2
    22b0:	6c1c           	bges 22ce <debug_stub+0x1b2>
    22b2:	2f6f 004a fff4 	movel %sp@(74),%sp@(-12)
    22b8:	6014           	bras 22ce <debug_stub+0x1b2>
    22ba:	fe78           	.short 0xfe78
    22bc:	fe82           	.short 0xfe82
    22be:	fe90           	.short 0xfe90
    22c0:	fea4           	.short 0xfea4
    22c2:	feb5           	.short 0xfeb5
    22c4:	fec5           	.short 0xfec5
    22c6:	fed7           	.short 0xfed7
    22c8:	feeb           	.short 0xfeeb
    22ca:	fef1           	.short 0xfef1
    22cc:	ff03           	.short 0xff03
    22ce:	4fef fff4      	lea %sp@(-12),%sp
    22d2:	43fa 00f4      	lea %pc@(23c8 <stub_print>),%a1
    22d6:	41fa fefb      	lea %pc@(21d3 <debug_stub+0xb7>),%a0
    22da:	4e91           	jsr %a1@
    22dc:	303b 20dc      	movew %pc@(22ba <debug_stub+0x19e>,%d2:w),%d0
    22e0:	41fb 00d8      	lea %pc@(22ba <debug_stub+0x19e>,%d0:w),%a0
    22e4:	4e91           	jsr %a1@
    22e6:	2417           	movel %sp@,%d2
    22e8:	6710           	beqs 22fa <debug_stub+0x1de>
    22ea:	41fa ff01      	lea %pc@(21ed <debug_stub+0xd1>),%a0
    22ee:	4e91           	jsr %a1@
    22f0:	6100 0098      	bsrw 238a <printhex>
    22f4:	41fa ff05      	lea %pc@(21fb <debug_stub+0xdf>),%a0
    22f8:	4e91           	jsr %a1@
    22fa:	41fa ff01      	lea %pc@(21fd <debug_stub+0xe1>),%a0
    22fe:	4e91           	jsr %a1@
    2300:	242f 0006      	movel %sp@(6),%d2
    2304:	6100 0084      	bsrw 238a <printhex>
    2308:	41fa fef9      	lea %pc@(2203 <debug_stub+0xe7>),%a0
    230c:	4e91           	jsr %a1@
    230e:	206f 0006      	moveal %sp@(6),%a0
    2312:	2410           	movel %a0@,%d2
    2314:	7604           	moveq #4,%d3
    2316:	6174           	bsrs 238c <printhex_n>
    2318:	41fa feee      	lea %pc@(2208 <debug_stub+0xec>),%a0
    231c:	4e91           	jsr %a1@
    231e:	242f 000a      	movel %sp@(10),%d2
    2322:	7604           	moveq #4,%d3
    2324:	6166           	bsrs 238c <printhex_n>
    2326:	41fa fee9      	lea %pc@(2211 <debug_stub+0xf5>),%a0
    232a:	4e91           	jsr %a1@
    232c:	4fef 000c      	lea %sp@(12),%sp
    2330:	4e68           	movel %usp,%a0
    2332:	2408           	movel %a0,%d2
    2334:	6154           	bsrs 238a <printhex>
    2336:	41fa fee2      	lea %pc@(221a <debug_stub+0xfe>),%a0
    233a:	4e91           	jsr %a1@
    233c:	7800           	moveq #0,%d4
    233e:	41fa 0070      	lea %pc@(23b0 <stub_prchar>),%a0
    2342:	244f           	moveal %sp,%a2
    2344:	7064           	moveq #100,%d0
    2346:	b83c 0008      	cmpb #8,%d4
    234a:	6d02           	blts 234e <debug_stub+0x232>
    234c:	7061           	moveq #97,%d0
    234e:	4e90           	jsr %a0@
    2350:	2004           	movel %d4,%d0
    2352:	c03c 0007      	andb #7,%d0
    2356:	614a           	bsrs 23a2 <hexdigit>
    2358:	4e90           	jsr %a0@
    235a:	703d           	moveq #61,%d0
    235c:	4e90           	jsr %a0@
    235e:	241a           	movel %a2@+,%d2
    2360:	6128           	bsrs 238a <printhex>
    2362:	5284           	addql #1,%d4
    2364:	1004           	moveb %d4,%d0
    2366:	c03c 0003      	andb #3,%d0
    236a:	6706           	beqs 2372 <debug_stub+0x256>
    236c:	7020           	moveq #32,%d0
    236e:	4e90           	jsr %a0@
    2370:	60d2           	bras 2344 <debug_stub+0x228>
    2372:	700d           	moveq #13,%d0
    2374:	4e90           	jsr %a0@
    2376:	700a           	moveq #10,%d0
    2378:	4e90           	jsr %a0@
    237a:	b83c 0010      	cmpb #16,%d4
    237e:	6dc4           	blts 2344 <debug_stub+0x228>
    2380:	027c f0ff      	andiw #-3841,%sr
    2384:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    2388:	4ed0           	jmp %a0@

0000238a <printhex>:
    238a:	7608           	moveq #8,%d3

0000238c <printhex_n>:
    238c:	41fa 0022      	lea %pc@(23b0 <stub_prchar>),%a0
    2390:	e99a           	roll #4,%d2
    2392:	1002           	moveb %d2,%d0
    2394:	c07c 000f      	andw #15,%d0
    2398:	6108           	bsrs 23a2 <hexdigit>
    239a:	4e90           	jsr %a0@
    239c:	5303           	subqb #1,%d3
    239e:	66f0           	bnes 2390 <printhex_n+0x4>
    23a0:	4e75           	rts

000023a2 <hexdigit>:
    23a2:	b03c 000a      	cmpb #10,%d0
    23a6:	6d02           	blts 23aa <hexdigit+0x8>
    23a8:	5e00           	addqb #7,%d0
    23aa:	d07c 0030      	addw #48,%d0
    23ae:	4e75           	rts

000023b0 <stub_prchar>:
    23b0:	2f08           	movel %a0,%sp@-
    23b2:	2078 0428      	moveal 428 <_EFP_PRINTCHAR>,%a0
    23b6:	4e90           	jsr %a0@
    23b8:	b1f8 0430      	cmpal 430 <_EFP_SENDCHAR>,%a0
    23bc:	6706           	beqs 23c4 <stub_prchar+0x14>
    23be:	2078 0430      	moveal 430 <_EFP_SENDCHAR>,%a0
    23c2:	4e90           	jsr %a0@
    23c4:	205f           	moveal %sp@+,%a0
    23c6:	4e75           	rts

000023c8 <stub_print>:
    23c8:	2f09           	movel %a1,%sp@-
    23ca:	2f08           	movel %a0,%sp@-
    23cc:	2278 0420      	moveal 420 <_EFP_PRINT>,%a1
    23d0:	4e91           	jsr %a1@
    23d2:	2278 0428      	moveal 428 <_EFP_PRINTCHAR>,%a1
    23d6:	b3f8 0430      	cmpal 430 <_EFP_SENDCHAR>,%a1
    23da:	205f           	moveal %sp@+,%a0
    23dc:	670c           	beqs 23ea <stub_print+0x22>
    23de:	2278 0430      	moveal 430 <_EFP_SENDCHAR>,%a1
    23e2:	1018           	moveb %a0@+,%d0
    23e4:	6704           	beqs 23ea <stub_print+0x22>
    23e6:	4e91           	jsr %a1@
    23e8:	60f8           	bras 23e2 <stub_print+0x1a>
    23ea:	225f           	moveal %sp@+,%a1
    23ec:	4e75           	rts

000023ee <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    23ee:	4e75           	rts

000023f0 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    23f0:	4fef ffcc      	lea %sp@(-52),%sp
    23f4:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    23f8:	246f 0064      	moveal %sp@(100),%a2
    23fc:	2a2f 0068      	movel %sp@(104),%d5
    2400:	2c2f 0070      	movel %sp@(112),%d6
    2404:	242f 0074      	movel %sp@(116),%d2
    2408:	262f 007c      	movel %sp@(124),%d3
    240c:	2e2f 0084      	movel %sp@(132),%d7
    2410:	1f6f 007b 003f 	moveb %sp@(123),%sp@(63)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2416:	222f 0088      	movel %sp@(136),%d1
    241a:	0281 0000 0400 	andil #1024,%d1
    2420:	2f41 0032      	movel %d1,%sp@(50)
  if (!value) {
    2424:	4a82           	tstl %d2
    2426:	6700 0174      	beqw 259c <_ntoa_long+0x1ac>
  if (flags & FLAGS_HASH) {
    242a:	7210           	moveq #16,%d1
    242c:	c2af 0088      	andl %sp@(136),%d1
    2430:	2f41 0036      	movel %d1,%sp@(54)
    2434:	082f 0005 008b 	btst #5,%sp@(139)
    243a:	6600 017e      	bnew 25ba <_ntoa_long+0x1ca>
    243e:	7061           	moveq #97,%d0
    2440:	41ef 0040      	lea %sp@(64),%a0
    2444:	2f48 002e      	movel %a0,%sp@(46)
    2448:	4def 0060      	lea %sp@(96),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    244c:	2808           	movel %a0,%d4
    244e:	49f9 0000 33e4 	lea 33e4 <__umodsi3>,%a4
    2454:	47f9 0000 3388 	lea 3388 <__udivsi3>,%a3
    245a:	1200           	moveb %d0,%d1
    245c:	0601 fff6      	addib #-10,%d1
    2460:	2f4a 003a      	movel %a2,%sp@(58)
    2464:	2a45           	moveal %d5,%a5
    2466:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    2468:	2f03           	movel %d3,%sp@-
    246a:	2f02           	movel %d2,%sp@-
    246c:	4e94           	jsr %a4@
    246e:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2470:	7209           	moveq #9,%d1
    2472:	b280           	cmpl %d0,%d1
    2474:	652a           	bcss 24a0 <_ntoa_long+0xb0>
    2476:	0600 0030      	addib #48,%d0
    247a:	2444           	moveal %d4,%a2
    247c:	14c0           	moveb %d0,%a2@+
      value /= base;
    247e:	2f03           	movel %d3,%sp@-
    2480:	2f02           	movel %d2,%sp@-
    2482:	4e93           	jsr %a3@
    2484:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2486:	b682           	cmpl %d2,%d3
    2488:	6228           	bhis 24b2 <_ntoa_long+0xc2>
    248a:	bdca           	cmpal %a2,%fp
    248c:	6724           	beqs 24b2 <_ntoa_long+0xc2>
    248e:	280a           	movel %a2,%d4
      value /= base;
    2490:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    2492:	2f03           	movel %d3,%sp@-
    2494:	2f02           	movel %d2,%sp@-
    2496:	4e94           	jsr %a4@
    2498:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    249a:	7209           	moveq #9,%d1
    249c:	b280           	cmpl %d0,%d1
    249e:	64d6           	bccs 2476 <_ntoa_long+0x86>
    24a0:	d005           	addb %d5,%d0
    24a2:	2444           	moveal %d4,%a2
    24a4:	14c0           	moveb %d0,%a2@+
      value /= base;
    24a6:	2f03           	movel %d3,%sp@-
    24a8:	2f02           	movel %d2,%sp@-
    24aa:	4e93           	jsr %a3@
    24ac:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    24ae:	b682           	cmpl %d2,%d3
    24b0:	63d8           	blss 248a <_ntoa_long+0x9a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    24b2:	246f 003a      	moveal %sp@(58),%a2
    24b6:	2a0d           	movel %a5,%d5
    24b8:	307c 0001      	moveaw #1,%a0
    24bc:	91ef 002e      	subal %sp@(46),%a0
    24c0:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    24c2:	082f 0001 008b 	btst #1,%sp@(139)
    24c8:	6700 013e      	beqw 2608 <_ntoa_long+0x218>
    24cc:	3c7c 0002      	moveaw #2,%fp
  if (flags & FLAGS_HASH) {
    24d0:	4aaf 0036      	tstl %sp@(54)
    24d4:	6700 023c      	beqw 2712 <_ntoa_long+0x322>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    24d8:	4aaf 0032      	tstl %sp@(50)
    24dc:	6600 01aa      	bnew 2688 <_ntoa_long+0x298>
    24e0:	4a84           	tstl %d4
    24e2:	6600 0324      	bnew 2808 <_ntoa_long+0x418>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    24e6:	7010           	moveq #16,%d0
    24e8:	b083           	cmpl %d3,%d0
    24ea:	6700 0412      	beqw 28fe <_ntoa_long+0x50e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    24ee:	5583           	subql #2,%d3
    24f0:	6700 04b0      	beqw 29a2 <_ntoa_long+0x5b2>
      buf[len++] = '0';
    24f4:	1f7c 0030 0040 	moveb #48,%sp@(64)
    24fa:	202f 0088      	movel %sp@(136),%d0
    24fe:	7401           	moveq #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2500:	7203           	moveq #3,%d1
    2502:	c280           	andl %d0,%d1
      buf[len++] = '-';
    2504:	2802           	movel %d2,%d4
    if (negative) {
    2506:	4a2f 003f      	tstb %sp@(63)
    250a:	6700 02dc      	beqw 27e8 <_ntoa_long+0x3f8>
      buf[len++] = '-';
    250e:	5284           	addql #1,%d4
    2510:	1fbc 002d 2840 	moveb #45,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2516:	4a81           	tstl %d1
    2518:	6600 0194      	bnew 26ae <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    251c:	b887           	cmpl %d7,%d4
    251e:	6400 018e      	bccw 26ae <_ntoa_long+0x2be>
    2522:	242f 006c      	movel %sp@(108),%d2
    2526:	2604           	movel %d4,%d3
    2528:	9682           	subl %d2,%d3
      out(' ', buffer, idx++, maxlen);
    252a:	2002           	movel %d2,%d0
    252c:	5282           	addql #1,%d2
    252e:	2f06           	movel %d6,%sp@-
    2530:	2f00           	movel %d0,%sp@-
    2532:	2f05           	movel %d5,%sp@-
    2534:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2538:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    253a:	2003           	movel %d3,%d0
    253c:	d082           	addl %d2,%d0
    253e:	4fef 0010      	lea %sp@(16),%sp
    2542:	be80           	cmpl %d0,%d7
    2544:	62e4           	bhis 252a <_ntoa_long+0x13a>
    2546:	2004           	movel %d4,%d0
    2548:	5280           	addql #1,%d0
    254a:	be80           	cmpl %d0,%d7
    254c:	6500 033e      	bcsw 288c <_ntoa_long+0x49c>
    2550:	2047           	moveal %d7,%a0
    2552:	5388           	subql #1,%a0
    2554:	91c4           	subal %d4,%a0
    2556:	226f 006c      	moveal %sp@(108),%a1
    255a:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    255e:	2609           	movel %a1,%d3
  while (len) {
    2560:	4a84           	tstl %d4
    2562:	6600 014e      	bnew 26b2 <_ntoa_long+0x2c2>
    2566:	2403           	movel %d3,%d2
  if (flags & FLAGS_LEFT) {
    2568:	bcfc 0000      	cmpaw #0,%fp
    256c:	6722           	beqs 2590 <_ntoa_long+0x1a0>
    while (idx - start_idx < width) {
    256e:	2602           	movel %d2,%d3
    2570:	96af 006c      	subl %sp@(108),%d3
    2574:	be83           	cmpl %d3,%d7
    2576:	6318           	blss 2590 <_ntoa_long+0x1a0>
      out(' ', buffer, idx++, maxlen);
    2578:	2f06           	movel %d6,%sp@-
    257a:	2f02           	movel %d2,%sp@-
    257c:	5282           	addql #1,%d2
    257e:	2f05           	movel %d5,%sp@-
    2580:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2584:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    2586:	5283           	addql #1,%d3
    2588:	4fef 0010      	lea %sp@(16),%sp
    258c:	be83           	cmpl %d3,%d7
    258e:	62e8           	bhis 2578 <_ntoa_long+0x188>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    2590:	2002           	movel %d2,%d0
    2592:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2596:	4fef 0034      	lea %sp@(52),%sp
    259a:	4e75           	rts
    flags &= ~FLAGS_HASH;
    259c:	70ef           	moveq #-17,%d0
    259e:	c0af 0088      	andl %sp@(136),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    25a2:	4aaf 0032      	tstl %sp@(50)
    25a6:	6640           	bnes 25e8 <_ntoa_long+0x1f8>
    25a8:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    25ac:	2f40 0088      	movel %d0,%sp@(136)
    25b0:	082f 0005 008b 	btst #5,%sp@(139)
    25b6:	6700 fe86      	beqw 243e <_ntoa_long+0x4e>
    25ba:	7041           	moveq #65,%d0
    25bc:	41ef 0040      	lea %sp@(64),%a0
    25c0:	2f48 002e      	movel %a0,%sp@(46)
    25c4:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    25c8:	2808           	movel %a0,%d4
    25ca:	49f9 0000 33e4 	lea 33e4 <__umodsi3>,%a4
    25d0:	47f9 0000 3388 	lea 3388 <__udivsi3>,%a3
    25d6:	1200           	moveb %d0,%d1
    25d8:	0601 fff6      	addib #-10,%d1
    25dc:	2f4a 003a      	movel %a2,%sp@(58)
    25e0:	2a45           	moveal %d5,%a5
    25e2:	1a01           	moveb %d1,%d5
    25e4:	6000 fe82      	braw 2468 <_ntoa_long+0x78>
  if (!(flags & FLAGS_LEFT)) {
    25e8:	7802           	moveq #2,%d4
    25ea:	c8af 0088      	andl %sp@(136),%d4
    25ee:	082f 0001 008b 	btst #1,%sp@(139)
    25f4:	6600 01e0      	bnew 27d6 <_ntoa_long+0x3e6>
    25f8:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    25fc:	2f40 0088      	movel %d0,%sp@(136)
  if (!(flags & FLAGS_PRECISION) || value) {
    2600:	2f7c 0000 0400 	movel #1024,%sp@(50)
    2606:	0032 
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2608:	4a87           	tstl %d7
    260a:	6700 012e      	beqw 273a <_ntoa_long+0x34a>
    260e:	7001           	moveq #1,%d0
    2610:	c0af 0088      	andl %sp@(136),%d0
    2614:	2c40           	moveal %d0,%fp
    2616:	082f 0000 008b 	btst #0,%sp@(139)
    261c:	6700 0194      	beqw 27b2 <_ntoa_long+0x3c2>
    2620:	4a2f 003f      	tstb %sp@(63)
    2624:	6600 0250      	bnew 2876 <_ntoa_long+0x486>
    2628:	700c           	moveq #12,%d0
    262a:	c0af 0088      	andl %sp@(136),%d0
    262e:	6600 0246      	bnew 2876 <_ntoa_long+0x486>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2632:	b8af 0080      	cmpl %sp@(128),%d4
    2636:	6400 013a      	bccw 2772 <_ntoa_long+0x382>
    263a:	7020           	moveq #32,%d0
    263c:	b084           	cmpl %d4,%d0
    263e:	6700 030a      	beqw 294a <_ntoa_long+0x55a>
    2642:	41f7 4840      	lea %sp@(40,%d4:l),%a0
    2646:	202f 0080      	movel %sp@(128),%d0
      buf[len++] = '0';
    264a:	5284           	addql #1,%d4
    264c:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2650:	b880           	cmpl %d0,%d4
    2652:	6400 0116      	bccw 276a <_ntoa_long+0x37a>
    2656:	7220           	moveq #32,%d1
    2658:	b284           	cmpl %d4,%d1
    265a:	66ee           	bnes 264a <_ntoa_long+0x25a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    265c:	bcfc 0000      	cmpaw #0,%fp
    2660:	6700 0140      	beqw 27a2 <_ntoa_long+0x3b2>
    2664:	7020           	moveq #32,%d0
    2666:	b087           	cmpl %d7,%d0
    2668:	6400 0138      	bccw 27a2 <_ntoa_long+0x3b2>
  if (flags & FLAGS_HASH) {
    266c:	4aaf 0036      	tstl %sp@(54)
    2670:	6700 020a      	beqw 287c <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2674:	4aaf 0032      	tstl %sp@(50)
    2678:	6600 0390      	bnew 2a0a <_ntoa_long+0x61a>
    267c:	7020           	moveq #32,%d0
    267e:	9dce           	subal %fp,%fp
    2680:	b0af 0080      	cmpl %sp@(128),%d0
    2684:	6700 02e8      	beqw 296e <_ntoa_long+0x57e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2688:	7003           	moveq #3,%d0
    268a:	c0af 0088      	andl %sp@(136),%d0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    268e:	7210           	moveq #16,%d1
    2690:	b283           	cmpl %d3,%d1
    2692:	6700 0220      	beqw 28b4 <_ntoa_long+0x4c4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2696:	5583           	subql #2,%d3
    2698:	6700 01bc      	beqw 2856 <_ntoa_long+0x466>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    269c:	7220           	moveq #32,%d1
    269e:	b284           	cmpl %d4,%d1
    26a0:	6666           	bnes 2708 <_ntoa_long+0x318>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    26a2:	4a80           	tstl %d0
    26a4:	6608           	bnes 26ae <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    26a6:	7220           	moveq #32,%d1
    26a8:	b287           	cmpl %d7,%d1
    26aa:	6500 fe76      	bcsw 2522 <_ntoa_long+0x132>
  if (flags & FLAGS_HASH) {
    26ae:	262f 006c      	movel %sp@(108),%d3
    26b2:	4bef 0040      	lea %sp@(64),%a5
    26b6:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    26ba:	d684           	addl %d4,%d3
    26bc:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    26c0:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    26c2:	2f06           	movel %d6,%sp@-
    26c4:	200c           	movel %a4,%d0
    26c6:	908b           	subl %a3,%d0
    26c8:	2f00           	movel %d0,%sp@-
    26ca:	2f05           	movel %d5,%sp@-
    26cc:	1023           	moveb %a3@-,%d0
    26ce:	4880           	extw %d0
    26d0:	3040           	moveaw %d0,%a0
    26d2:	2f08           	movel %a0,%sp@-
    26d4:	4e92           	jsr %a2@
  while (len) {
    26d6:	4fef 0010      	lea %sp@(16),%sp
    26da:	b7cd           	cmpal %a5,%a3
    26dc:	6700 fe8a      	beqw 2568 <_ntoa_long+0x178>
    26e0:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    26e2:	2f06           	movel %d6,%sp@-
    26e4:	200c           	movel %a4,%d0
    26e6:	908b           	subl %a3,%d0
    26e8:	2f00           	movel %d0,%sp@-
    26ea:	2f05           	movel %d5,%sp@-
    26ec:	1023           	moveb %a3@-,%d0
    26ee:	4880           	extw %d0
    26f0:	3040           	moveaw %d0,%a0
    26f2:	2f08           	movel %a0,%sp@-
    26f4:	4e92           	jsr %a2@
  while (len) {
    26f6:	4fef 0010      	lea %sp@(16),%sp
    26fa:	b7cd           	cmpal %a5,%a3
    26fc:	66c2           	bnes 26c0 <_ntoa_long+0x2d0>
    26fe:	6000 fe68      	braw 2568 <_ntoa_long+0x178>
      buf[len++] = 'X';
    2702:	5384           	subql #1,%d4
    2704:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    2708:	2004           	movel %d4,%d0
    270a:	5284           	addql #1,%d4
    270c:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2712:	7020           	moveq #32,%d0
    2714:	b084           	cmpl %d4,%d0
    2716:	6600 0134      	bnew 284c <_ntoa_long+0x45c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    271a:	7003           	moveq #3,%d0
    271c:	c0af 0088      	andl %sp@(136),%d0
    2720:	6700 00a8      	beqw 27ca <_ntoa_long+0x3da>
  if (flags & FLAGS_HASH) {
    2724:	262f 006c      	movel %sp@(108),%d3
    2728:	7820           	moveq #32,%d4
    272a:	4bef 0040      	lea %sp@(64),%a5
    272e:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    2732:	d684           	addl %d4,%d3
    2734:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2738:	6086           	bras 26c0 <_ntoa_long+0x2d0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    273a:	b8af 0080      	cmpl %sp@(128),%d4
    273e:	6400 0280      	bccw 29c0 <_ntoa_long+0x5d0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2742:	7201           	moveq #1,%d1
    2744:	c2af 0088      	andl %sp@(136),%d1
    2748:	2c41           	moveal %d1,%fp
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    274a:	7020           	moveq #32,%d0
    274c:	b084           	cmpl %d4,%d0
    274e:	6600 fef2      	bnew 2642 <_ntoa_long+0x252>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2752:	4a81           	tstl %d1
    2754:	6700 02ba      	beqw 2a10 <_ntoa_long+0x620>
  if (flags & FLAGS_HASH) {
    2758:	4aaf 0036      	tstl %sp@(54)
    275c:	6600 02ba      	bnew 2a18 <_ntoa_long+0x628>
    2760:	9dce           	subal %fp,%fp
    2762:	262f 006c      	movel %sp@(108),%d3
    2766:	7820           	moveq #32,%d4
    2768:	60c0           	bras 272a <_ntoa_long+0x33a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    276a:	bcfc 0000      	cmpaw #0,%fp
    276e:	6700 fd60      	beqw 24d0 <_ntoa_long+0xe0>
    2772:	be84           	cmpl %d4,%d7
    2774:	6300 024a      	blsw 29c0 <_ntoa_long+0x5d0>
    2778:	7220           	moveq #32,%d1
    277a:	b284           	cmpl %d4,%d1
    277c:	6700 0270      	beqw 29ee <_ntoa_long+0x5fe>
    2780:	43ef 0040      	lea %sp@(64),%a1
    2784:	41f1 4800      	lea %a1@(0,%d4:l),%a0
    2788:	2009           	movel %a1,%d0
    278a:	d087           	addl %d7,%d0
    278c:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = '0';
    2790:	10bc 0030      	moveb #48,%a0@
    2794:	2208           	movel %a0,%d1
    2796:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2798:	b1c0           	cmpal %d0,%a0
    279a:	6700 0100      	beqw 289c <_ntoa_long+0x4ac>
    279e:	bdc8           	cmpal %a0,%fp
    27a0:	66ee           	bnes 2790 <_ntoa_long+0x3a0>
  if (flags & FLAGS_HASH) {
    27a2:	4aaf 0036      	tstl %sp@(54)
    27a6:	6700 00d4      	beqw 287c <_ntoa_long+0x48c>
    27aa:	9dce           	subal %fp,%fp
    27ac:	7820           	moveq #32,%d4
    27ae:	6000 fd28      	braw 24d8 <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27b2:	b8af 0080      	cmpl %sp@(128),%d4
    27b6:	6400 fd18      	bccw 24d0 <_ntoa_long+0xe0>
    27ba:	7220           	moveq #32,%d1
    27bc:	b284           	cmpl %d4,%d1
    27be:	6600 fe82      	bnew 2642 <_ntoa_long+0x252>
  if (flags & FLAGS_HASH) {
    27c2:	4aaf 0036      	tstl %sp@(54)
    27c6:	6600 0250      	bnew 2a18 <_ntoa_long+0x628>
    for (size_t i = len; i < width; i++) {
    27ca:	7820           	moveq #32,%d4
    27cc:	b887           	cmpl %d7,%d4
    27ce:	6500 fd52      	bcsw 2522 <_ntoa_long+0x132>
    27d2:	6000 feda      	braw 26ae <_ntoa_long+0x2be>
  if (!(flags & FLAGS_LEFT)) {
    27d6:	3c7c 0002      	moveaw #2,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27da:	7203           	moveq #3,%d1
    27dc:	c280           	andl %d0,%d1
      buf[len++] = '-';
    27de:	2802           	movel %d2,%d4
    if (negative) {
    27e0:	4a2f 003f      	tstb %sp@(63)
    27e4:	6600 fd28      	bnew 250e <_ntoa_long+0x11e>
    else if (flags & FLAGS_PLUS) {
    27e8:	0800 0002      	btst #2,%d0
    27ec:	6700 00e8      	beqw 28d6 <_ntoa_long+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    27f0:	5284           	addql #1,%d4
    27f2:	1fbc 002b 2840 	moveb #43,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27f8:	4a81           	tstl %d1
    27fa:	6600 feb2      	bnew 26ae <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    27fe:	b887           	cmpl %d7,%d4
    2800:	6500 fd20      	bcsw 2522 <_ntoa_long+0x132>
    2804:	6000 fea8      	braw 26ae <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2808:	b8af 0080      	cmpl %sp@(128),%d4
    280c:	6706           	beqs 2814 <_ntoa_long+0x424>
    280e:	be84           	cmpl %d4,%d7
    2810:	6600 fe76      	bnew 2688 <_ntoa_long+0x298>
      len--;
    2814:	2004           	movel %d4,%d0
    2816:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    2818:	7201           	moveq #1,%d1
    281a:	b284           	cmpl %d4,%d1
    281c:	6700 fcc8      	beqw 24e6 <_ntoa_long+0xf6>
    2820:	7210           	moveq #16,%d1
    2822:	b283           	cmpl %d3,%d1
    2824:	6700 01a8      	beqw 29ce <_ntoa_long+0x5de>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2828:	7202           	moveq #2,%d1
      len--;
    282a:	2800           	movel %d0,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    282c:	b283           	cmpl %d3,%d1
    282e:	6600 feda      	bnew 270a <_ntoa_long+0x31a>
    2832:	7003           	moveq #3,%d0
    2834:	c0af 0088      	andl %sp@(136),%d0
      buf[len++] = 'b';
    2838:	1fbc 0062 4840 	moveb #98,%sp@(40,%d4:l)
    283e:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2840:	7220           	moveq #32,%d1
    2842:	b284           	cmpl %d4,%d1
    2844:	6700 fe5c      	beqw 26a2 <_ntoa_long+0x2b2>
    2848:	6000 febe      	braw 2708 <_ntoa_long+0x318>
    284c:	202f 0088      	movel %sp@(136),%d0
    2850:	2404           	movel %d4,%d2
    2852:	6000 fcac      	braw 2500 <_ntoa_long+0x110>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2856:	7220           	moveq #32,%d1
    2858:	b284           	cmpl %d4,%d1
    285a:	66dc           	bnes 2838 <_ntoa_long+0x448>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    285c:	4a80           	tstl %d0
    285e:	6600 fe4e      	bnew 26ae <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2862:	7020           	moveq #32,%d0
    2864:	b087           	cmpl %d7,%d0
    2866:	6400 fe46      	bccw 26ae <_ntoa_long+0x2be>
    286a:	242f 006c      	movel %sp@(108),%d2
    286e:	2604           	movel %d4,%d3
    2870:	9682           	subl %d2,%d3
    2872:	6000 fcb6      	braw 252a <_ntoa_long+0x13a>
      width--;
    2876:	5387           	subql #1,%d7
    2878:	6000 fdb8      	braw 2632 <_ntoa_long+0x242>
  if (flags & FLAGS_HASH) {
    287c:	9dce           	subal %fp,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    287e:	7003           	moveq #3,%d0
    2880:	c0af 0088      	andl %sp@(136),%d0
    2884:	6600 fe9e      	bnew 2724 <_ntoa_long+0x334>
    2888:	6000 ff40      	braw 27ca <_ntoa_long+0x3da>
    288c:	91c8           	subal %a0,%a0
    288e:	226f 006c      	moveal %sp@(108),%a1
    2892:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    2896:	2609           	movel %a1,%d3
    2898:	6000 fcc6      	braw 2560 <_ntoa_long+0x170>
      buf[len++] = '0';
    289c:	307c 0001      	moveaw #1,%a0
    28a0:	91c9           	subal %a1,%a0
    28a2:	2808           	movel %a0,%d4
    28a4:	d881           	addl %d1,%d4
    28a6:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    28a8:	4aaf 0036      	tstl %sp@(54)
    28ac:	6600 fc2a      	bnew 24d8 <_ntoa_long+0xe8>
    28b0:	6000 fe60      	braw 2712 <_ntoa_long+0x322>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28b4:	7220           	moveq #32,%d1
    28b6:	082f 0005 008b 	btst #5,%sp@(139)
    28bc:	6600 00ca      	bnew 2988 <_ntoa_long+0x598>
    28c0:	b284           	cmpl %d4,%d1
    28c2:	6600 00b0      	bnew 2974 <_ntoa_long+0x584>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    28c6:	4a80           	tstl %d0
    28c8:	6600 fde4      	bnew 26ae <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    28cc:	b287           	cmpl %d7,%d1
    28ce:	6500 fc52      	bcsw 2522 <_ntoa_long+0x132>
    28d2:	6000 fdda      	braw 26ae <_ntoa_long+0x2be>
    else if (flags & FLAGS_SPACE) {
    28d6:	0800 0003      	btst #3,%d0
    28da:	6640           	bnes 291c <_ntoa_long+0x52c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    28dc:	4a81           	tstl %d1
    28de:	6600 00d8      	bnew 29b8 <_ntoa_long+0x5c8>
    for (size_t i = len; i < width; i++) {
    28e2:	b487           	cmpl %d7,%d2
    28e4:	6500 fc3c      	bcsw 2522 <_ntoa_long+0x132>
  while (len) {
    28e8:	4a82           	tstl %d2
    28ea:	6600 fdc2      	bnew 26ae <_ntoa_long+0x2be>
    28ee:	242f 006c      	movel %sp@(108),%d2
}
    28f2:	2002           	movel %d2,%d0
    28f4:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    28f8:	4fef 0034      	lea %sp@(52),%sp
    28fc:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28fe:	082f 0005 008b 	btst #5,%sp@(139)
    2904:	662e           	bnes 2934 <_ntoa_long+0x544>
      buf[len++] = 'x';
    2906:	1f7c 0078 0040 	moveb #120,%sp@(64)
      buf[len++] = '0';
    290c:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2912:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2916:	7402           	moveq #2,%d2
    2918:	6000 fbe6      	braw 2500 <_ntoa_long+0x110>
      buf[len++] = ' ';
    291c:	5284           	addql #1,%d4
    291e:	1fbc 0020 2840 	moveb #32,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2924:	4a81           	tstl %d1
    2926:	6600 fd86      	bnew 26ae <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    292a:	b887           	cmpl %d7,%d4
    292c:	6500 fbf4      	bcsw 2522 <_ntoa_long+0x132>
    2930:	6000 fd7c      	braw 26ae <_ntoa_long+0x2be>
      buf[len++] = 'X';
    2934:	1f7c 0058 0040 	moveb #88,%sp@(64)
      buf[len++] = '0';
    293a:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2940:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2944:	7402           	moveq #2,%d2
    2946:	6000 fbb8      	braw 2500 <_ntoa_long+0x110>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    294a:	7220           	moveq #32,%d1
    294c:	b287           	cmpl %d7,%d1
    294e:	6400 fe08      	bccw 2758 <_ntoa_long+0x368>
  if (flags & FLAGS_HASH) {
    2952:	4aaf 0036      	tstl %sp@(54)
    2956:	6700 ff24      	beqw 287c <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    295a:	4aaf 0032      	tstl %sp@(50)
    295e:	6600 00aa      	bnew 2a0a <_ntoa_long+0x61a>
    2962:	7220           	moveq #32,%d1
    2964:	9dce           	subal %fp,%fp
    2966:	b2af 0080      	cmpl %sp@(128),%d1
    296a:	6600 fd1c      	bnew 2688 <_ntoa_long+0x298>
      len--;
    296e:	701f           	moveq #31,%d0
    2970:	6000 feae      	braw 2820 <_ntoa_long+0x430>
      buf[len++] = 'x';
    2974:	1fbc 0078 4840 	moveb #120,%sp@(40,%d4:l)
    297a:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    297c:	7220           	moveq #32,%d1
    297e:	b284           	cmpl %d4,%d1
    2980:	6700 fd20      	beqw 26a2 <_ntoa_long+0x2b2>
    2984:	6000 fd82      	braw 2708 <_ntoa_long+0x318>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2988:	b284           	cmpl %d4,%d1
    298a:	6700 fed0      	beqw 285c <_ntoa_long+0x46c>
      buf[len++] = 'X';
    298e:	1fbc 0058 4840 	moveb #88,%sp@(40,%d4:l)
    2994:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2996:	7220           	moveq #32,%d1
    2998:	b284           	cmpl %d4,%d1
    299a:	6700 fd06      	beqw 26a2 <_ntoa_long+0x2b2>
    299e:	6000 fd68      	braw 2708 <_ntoa_long+0x318>
      buf[len++] = 'b';
    29a2:	1f7c 0062 0040 	moveb #98,%sp@(64)
      buf[len++] = '0';
    29a8:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    29ae:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    29b2:	7402           	moveq #2,%d2
    29b4:	6000 fb4a      	braw 2500 <_ntoa_long+0x110>
    29b8:	262f 006c      	movel %sp@(108),%d3
    29bc:	6000 fba2      	braw 2560 <_ntoa_long+0x170>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29c0:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    29c2:	4aaf 0036      	tstl %sp@(54)
    29c6:	6600 fb10      	bnew 24d8 <_ntoa_long+0xe8>
    29ca:	6000 fd46      	braw 2712 <_ntoa_long+0x322>
      buf[len++] = 'x';
    29ce:	41f7 483e      	lea %sp@(3e,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29d2:	082f 0005 008b 	btst #5,%sp@(139)
    29d8:	6600 fd28      	bnew 2702 <_ntoa_long+0x312>
      buf[len++] = 'x';
    29dc:	2004           	movel %d4,%d0
    29de:	5380           	subql #1,%d0
    29e0:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    29e4:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
    29ea:	6000 fd26      	braw 2712 <_ntoa_long+0x322>
  if (flags & FLAGS_HASH) {
    29ee:	4aaf 0036      	tstl %sp@(54)
    29f2:	6700 fe88      	beqw 287c <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    29f6:	4aaf 0032      	tstl %sp@(50)
    29fa:	660e           	bnes 2a0a <_ntoa_long+0x61a>
    29fc:	7020           	moveq #32,%d0
    29fe:	b0af 0080      	cmpl %sp@(128),%d0
    2a02:	6738           	beqs 2a3c <_ntoa_long+0x64c>
    2a04:	7220           	moveq #32,%d1
    2a06:	b287           	cmpl %d7,%d1
    2a08:	6732           	beqs 2a3c <_ntoa_long+0x64c>
    2a0a:	9dce           	subal %fp,%fp
    2a0c:	6000 fc7a      	braw 2688 <_ntoa_long+0x298>
  if (flags & FLAGS_HASH) {
    2a10:	4aaf 0036      	tstl %sp@(54)
    2a14:	6700 fc98      	beqw 26ae <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2a18:	4aaf 0032      	tstl %sp@(50)
    2a1c:	6708           	beqs 2a26 <_ntoa_long+0x636>
    2a1e:	9dce           	subal %fp,%fp
    2a20:	7820           	moveq #32,%d4
    2a22:	6000 fc64      	braw 2688 <_ntoa_long+0x298>
    2a26:	7020           	moveq #32,%d0
    2a28:	7820           	moveq #32,%d4
    2a2a:	b0af 0080      	cmpl %sp@(128),%d0
    2a2e:	6714           	beqs 2a44 <_ntoa_long+0x654>
    2a30:	9dce           	subal %fp,%fp
    2a32:	be84           	cmpl %d4,%d7
    2a34:	6600 fc52      	bnew 2688 <_ntoa_long+0x298>
    2a38:	6000 fdda      	braw 2814 <_ntoa_long+0x424>
    2a3c:	9dce           	subal %fp,%fp
      len--;
    2a3e:	701f           	moveq #31,%d0
    2a40:	6000 fdde      	braw 2820 <_ntoa_long+0x430>
    2a44:	701f           	moveq #31,%d0
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2a46:	9dce           	subal %fp,%fp
    2a48:	6000 fdd6      	braw 2820 <_ntoa_long+0x430>

00002a4c <_out_char>:
{
    2a4c:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    2a50:	4a00           	tstb %d0
    2a52:	6602           	bnes 2a56 <_out_char+0xa>
}
    2a54:	4e75           	rts
    _putchar(character);
    2a56:	4880           	extw %d0
    2a58:	3040           	moveaw %d0,%a0
    2a5a:	2f48 0004      	movel %a0,%sp@(4)
    2a5e:	4ef9 0000 3298 	jmp 3298 <_putchar>

00002a64 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2a64:	4fef fff4      	lea %sp@(-12),%sp
    2a68:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2a6c:	2a6f 003c      	moveal %sp@(60),%a5
    2a70:	2c2f 0040      	movel %sp@(64),%d6
    2a74:	242f 0044      	movel %sp@(68),%d2
    2a78:	286f 0048      	moveal %sp@(72),%a4
    2a7c:	262f 004c      	movel %sp@(76),%d3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2a80:	4a86           	tstl %d6
    2a82:	6700 023e      	beqw 2cc2 <_vsnprintf+0x25e>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2a86:	1014           	moveb %a4@,%d0
    2a88:	95ca           	subal %a2,%a2
    2a8a:	4a00           	tstb %d0
    2a8c:	6700 0244      	beqw 2cd2 <_vsnprintf+0x26e>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2a90:	2c7c 0000 2b00 	moveal #11008,%fp
      format++;
    2a96:	528c           	addql #1,%a4
    if (*format != '%') {
    2a98:	0c00 0025      	cmpib #37,%d0
    2a9c:	6740           	beqs 2ade <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    2a9e:	280a           	movel %a2,%d4
    2aa0:	5284           	addql #1,%d4
    2aa2:	2f02           	movel %d2,%sp@-
    2aa4:	2f0a           	movel %a2,%sp@-
    2aa6:	2f06           	movel %d6,%sp@-
    2aa8:	4880           	extw %d0
    2aaa:	3040           	moveaw %d0,%a0
    2aac:	2f08           	movel %a0,%sp@-
    2aae:	4e95           	jsr %a5@
      continue;
    2ab0:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    2ab4:	2444           	moveal %d4,%a2
  while (*format)
    2ab6:	1014           	moveb %a4@,%d0
    2ab8:	66dc           	bnes 2a96 <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    2aba:	260a           	movel %a2,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2abc:	b5c2           	cmpal %d2,%a2
    2abe:	6504           	bcss 2ac4 <_vsnprintf+0x60>
    2ac0:	2442           	moveal %d2,%a2
    2ac2:	538a           	subql #1,%a2
    2ac4:	2f02           	movel %d2,%sp@-
    2ac6:	2f0a           	movel %a2,%sp@-
    2ac8:	2f06           	movel %d6,%sp@-
    2aca:	42a7           	clrl %sp@-
    2acc:	4e95           	jsr %a5@
  return (int)idx;
    2ace:	4fef 0010      	lea %sp@(16),%sp
}
    2ad2:	2003           	movel %d3,%d0
    2ad4:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2ad8:	4fef 000c      	lea %sp@(12),%sp
    2adc:	4e75           	rts
    flags = 0U;
    2ade:	7200           	moveq #0,%d1
      switch (*format) {
    2ae0:	204c           	moveal %a4,%a0
    2ae2:	1018           	moveb %a0@+,%d0
    2ae4:	1800           	moveb %d0,%d4
    2ae6:	0604 ffe0      	addib #-32,%d4
    2aea:	0c04 0010      	cmpib #16,%d4
    2aee:	6232           	bhis 2b22 <_vsnprintf+0xbe>
    2af0:	0284 0000 00ff 	andil #255,%d4
    2af6:	d884           	addl %d4,%d4
    2af8:	3276 4800      	moveaw %fp@(0,%d4:l),%a1
    2afc:	4efb 9002      	jmp %pc@(2b00 <_vsnprintf+0x9c>,%a1:w)
    2b00:	00e2           	.short 0x00e2
    2b02:	0022 0022      	orib #34,%a2@-
    2b06:	00d8           	.short 0x00d8
    2b08:	0022 0022      	orib #34,%a2@-
    2b0c:	0022 0022      	orib #34,%a2@-
    2b10:	0022 0022      	orib #34,%a2@-
    2b14:	0022 00ce      	orib #-50,%a2@-
    2b18:	0022 00c4      	orib #-60,%a2@-
    2b1c:	0022 0022      	orib #34,%a2@-
    2b20:	00ba           	.short 0x00ba
  return (ch >= '0') && (ch <= '9');
    2b22:	1800           	moveb %d0,%d4
    2b24:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2b28:	0c04 0009      	cmpib #9,%d4
    2b2c:	6300 00be      	blsw 2bec <_vsnprintf+0x188>
    else if (*format == '*') {
    2b30:	0c00 002a      	cmpib #42,%d0
    2b34:	6700 0172      	beqw 2ca8 <_vsnprintf+0x244>
    width = 0U;
    2b38:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2b3a:	0c00 002e      	cmpib #46,%d0
    2b3e:	6700 00fc      	beqw 2c3c <_vsnprintf+0x1d8>
    precision = 0U;
    2b42:	7e00           	moveq #0,%d7
        format++;
    2b44:	2808           	movel %a0,%d4
    switch (*format) {
    2b46:	0c00 006c      	cmpib #108,%d0
    2b4a:	6700 011e      	beqw 2c6a <_vsnprintf+0x206>
    2b4e:	0c00 006c      	cmpib #108,%d0
    2b52:	6e00 0136      	bgtw 2c8a <_vsnprintf+0x226>
    2b56:	0c00 0068      	cmpib #104,%d0
    2b5a:	6700 02c8      	beqw 2e24 <_vsnprintf+0x3c0>
    2b5e:	0c00 006a      	cmpib #106,%d0
    2b62:	6600 017a      	bnew 2cde <_vsnprintf+0x27a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2b66:	0041 0200      	oriw #512,%d1
        if (*format == 'l') {
    2b6a:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2b6e:	2844           	moveal %d4,%a4
    2b70:	528c           	addql #1,%a4
    switch (*format) {
    2b72:	0c00 0078      	cmpib #120,%d0
    2b76:	6e00 0198      	bgtw 2d10 <_vsnprintf+0x2ac>
    2b7a:	0c00 0063      	cmpib #99,%d0
    2b7e:	6e00 0168      	bgtw 2ce8 <_vsnprintf+0x284>
    2b82:	0c00 0062      	cmpib #98,%d0
    2b86:	6700 05de      	beqw 3166 <_vsnprintf+0x702>
    2b8a:	0c00 0063      	cmpib #99,%d0
    2b8e:	6700 0362      	beqw 2ef2 <_vsnprintf+0x48e>
    2b92:	0c00 0025      	cmpib #37,%d0
    2b96:	6600 050a      	bnew 30a2 <_vsnprintf+0x63e>
        out('%', buffer, idx++, maxlen);
    2b9a:	280a           	movel %a2,%d4
    2b9c:	5284           	addql #1,%d4
    2b9e:	2f02           	movel %d2,%sp@-
    2ba0:	2f0a           	movel %a2,%sp@-
    2ba2:	2f06           	movel %d6,%sp@-
    2ba4:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2ba8:	4e95           	jsr %a5@
        break;
    2baa:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2bae:	2444           	moveal %d4,%a2
  while (*format)
    2bb0:	1014           	moveb %a4@,%d0
    2bb2:	6600 fee2      	bnew 2a96 <_vsnprintf+0x32>
    2bb6:	6000 ff02      	braw 2aba <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2bba:	7001           	moveq #1,%d0
    2bbc:	8280           	orl %d0,%d1
  while (*format)
    2bbe:	2848           	moveal %a0,%a4
    2bc0:	6000 ff1e      	braw 2ae0 <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2bc4:	7a02           	moveq #2,%d5
    2bc6:	8285           	orl %d5,%d1
  while (*format)
    2bc8:	2848           	moveal %a0,%a4
    2bca:	6000 ff14      	braw 2ae0 <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2bce:	7004           	moveq #4,%d0
    2bd0:	8280           	orl %d0,%d1
  while (*format)
    2bd2:	2848           	moveal %a0,%a4
    2bd4:	6000 ff0a      	braw 2ae0 <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2bd8:	7010           	moveq #16,%d0
    2bda:	8280           	orl %d0,%d1
  while (*format)
    2bdc:	2848           	moveal %a0,%a4
    2bde:	6000 ff00      	braw 2ae0 <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2be2:	7a08           	moveq #8,%d5
    2be4:	8285           	orl %d5,%d1
  while (*format)
    2be6:	2848           	moveal %a0,%a4
    2be8:	6000 fef6      	braw 2ae0 <_vsnprintf+0x7c>
  unsigned int i = 0U;
    2bec:	97cb           	subal %a3,%a3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2bee:	2848           	moveal %a0,%a4
    2bf0:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2bf4:	d3c9           	addal %a1,%a1
    2bf6:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2bfa:	d7cb           	addal %a3,%a3
    2bfc:	4880           	extw %d0
    2bfe:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2c02:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2c04:	1800           	moveb %d0,%d4
    2c06:	0604 ffd0      	addib #-48,%d4
    2c0a:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2c0c:	0c04 0009      	cmpib #9,%d4
    2c10:	6200 ff28      	bhiw 2b3a <_vsnprintf+0xd6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2c14:	2848           	moveal %a0,%a4
    2c16:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2c1a:	d3c9           	addal %a1,%a1
    2c1c:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2c20:	d7cb           	addal %a3,%a3
    2c22:	4880           	extw %d0
    2c24:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2c28:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2c2a:	1800           	moveb %d0,%d4
    2c2c:	0604 ffd0      	addib #-48,%d4
    2c30:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2c32:	0c04 0009      	cmpib #9,%d4
    2c36:	63b6           	blss 2bee <_vsnprintf+0x18a>
    2c38:	6000 ff00      	braw 2b3a <_vsnprintf+0xd6>
      flags |= FLAGS_PRECISION;
    2c3c:	0041 0400      	oriw #1024,%d1
      if (_is_digit(*format)) {
    2c40:	102c 0001      	moveb %a4@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2c44:	1a00           	moveb %d0,%d5
    2c46:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2c4a:	0c05 0009      	cmpib #9,%d5
    2c4e:	6300 02f6      	blsw 2f46 <_vsnprintf+0x4e2>
      else if (*format == '*') {
    2c52:	0c00 002a      	cmpib #42,%d0
    2c56:	6700 0334      	beqw 2f8c <_vsnprintf+0x528>
      format++;
    2c5a:	2848           	moveal %a0,%a4
    precision = 0U;
    2c5c:	7e00           	moveq #0,%d7
    2c5e:	5288           	addql #1,%a0
        format++;
    2c60:	2808           	movel %a0,%d4
    switch (*format) {
    2c62:	0c00 006c      	cmpib #108,%d0
    2c66:	6600 fee6      	bnew 2b4e <_vsnprintf+0xea>
        if (*format == 'l') {
    2c6a:	102c 0001      	moveb %a4@(1),%d0
    2c6e:	0c00 006c      	cmpib #108,%d0
    2c72:	6700 040a      	beqw 307e <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2c76:	0041 0100      	oriw #256,%d1
        format++;
    2c7a:	2844           	moveal %d4,%a4
    2c7c:	528c           	addql #1,%a4
    switch (*format) {
    2c7e:	0c00 0078      	cmpib #120,%d0
    2c82:	6f00 fef6      	blew 2b7a <_vsnprintf+0x116>
    2c86:	6000 0088      	braw 2d10 <_vsnprintf+0x2ac>
    switch (*format) {
    2c8a:	0c00 007a      	cmpib #122,%d0
    2c8e:	6600 00a2      	bnew 2d32 <_vsnprintf+0x2ce>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2c92:	0041 0100      	oriw #256,%d1
        if (*format == 'l') {
    2c96:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2c9a:	2844           	moveal %d4,%a4
    2c9c:	528c           	addql #1,%a4
    switch (*format) {
    2c9e:	0c00 0078      	cmpib #120,%d0
    2ca2:	6f00 fed6      	blew 2b7a <_vsnprintf+0x116>
    2ca6:	6068           	bras 2d10 <_vsnprintf+0x2ac>
      const int w = va_arg(va, int);
    2ca8:	2243           	moveal %d3,%a1
    2caa:	2659           	moveal %a1@+,%a3
    2cac:	2609           	movel %a1,%d3
      if (w < 0) {
    2cae:	b6fc 0000      	cmpaw #0,%a3
    2cb2:	6d00 0124      	bltw 2dd8 <_vsnprintf+0x374>
    if (*format == '.') {
    2cb6:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2cba:	2848           	moveal %a0,%a4
    2cbc:	5288           	addql #1,%a0
    2cbe:	6000 fe7a      	braw 2b3a <_vsnprintf+0xd6>
    out = _out_null;
    2cc2:	4bf9 0000 23ee 	lea 23ee <_out_null>,%a5
  while (*format)
    2cc8:	1014           	moveb %a4@,%d0
    2cca:	95ca           	subal %a2,%a2
    2ccc:	4a00           	tstb %d0
    2cce:	6600 fdc0      	bnew 2a90 <_vsnprintf+0x2c>
    2cd2:	7600           	moveq #0,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2cd4:	b5c2           	cmpal %d2,%a2
    2cd6:	6500 fdec      	bcsw 2ac4 <_vsnprintf+0x60>
    2cda:	6000 fde4      	braw 2ac0 <_vsnprintf+0x5c>
        format++;
    2cde:	2848           	moveal %a0,%a4
    switch (*format) {
    2ce0:	0c00 0063      	cmpib #99,%d0
    2ce4:	6f00 fe9c      	blew 2b82 <_vsnprintf+0x11e>
    2ce8:	1a00           	moveb %d0,%d5
    2cea:	0605 ff9c      	addib #-100,%d5
    2cee:	0285 0000 00ff 	andil #255,%d5
    2cf4:	7801           	moveq #1,%d4
    2cf6:	ebac           	lsll %d5,%d4
    2cf8:	0284 0012 0821 	andil #1181729,%d4
    2cfe:	6652           	bnes 2d52 <_vsnprintf+0x2ee>
    2d00:	0c00 0073      	cmpib #115,%d0
    2d04:	6700 0140      	beqw 2e46 <_vsnprintf+0x3e2>
    2d08:	0c00 0070      	cmpib #112,%d0
    2d0c:	6700 00e0      	beqw 2dee <_vsnprintf+0x38a>
        out(*format, buffer, idx++, maxlen);
    2d10:	280a           	movel %a2,%d4
    2d12:	5284           	addql #1,%d4
    2d14:	2f02           	movel %d2,%sp@-
    2d16:	2f0a           	movel %a2,%sp@-
    2d18:	2f06           	movel %d6,%sp@-
    2d1a:	4880           	extw %d0
    2d1c:	3240           	moveaw %d0,%a1
    2d1e:	2f09           	movel %a1,%sp@-
    2d20:	4e95           	jsr %a5@
        break;
    2d22:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2d26:	2444           	moveal %d4,%a2
  while (*format)
    2d28:	1014           	moveb %a4@,%d0
    2d2a:	6600 fd6a      	bnew 2a96 <_vsnprintf+0x32>
    2d2e:	6000 fd8a      	braw 2aba <_vsnprintf+0x56>
        format++;
    2d32:	2848           	moveal %a0,%a4
    switch (*format) {
    2d34:	0c00 0078      	cmpib #120,%d0
    2d38:	6ed6           	bgts 2d10 <_vsnprintf+0x2ac>
    2d3a:	1a00           	moveb %d0,%d5
    2d3c:	0605 ff9c      	addib #-100,%d5
    2d40:	0285 0000 00ff 	andil #255,%d5
    2d46:	7801           	moveq #1,%d4
    2d48:	ebac           	lsll %d5,%d4
    2d4a:	0284 0012 0821 	andil #1181729,%d4
    2d50:	67ae           	beqs 2d00 <_vsnprintf+0x29c>
        if (*format == 'x' || *format == 'X') {
    2d52:	0c00 006f      	cmpib #111,%d0
    2d56:	6700 025c      	beqw 2fb4 <_vsnprintf+0x550>
    2d5a:	6e00 03f2      	bgtw 314e <_vsnprintf+0x6ea>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2d5e:	78ef           	moveq #-17,%d4
    2d60:	c881           	andl %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    2d62:	0c00 0069      	cmpib #105,%d0
    2d66:	6600 045e      	bnew 31c6 <_vsnprintf+0x762>
        if (flags & FLAGS_PRECISION) {
    2d6a:	0801 000a      	btst #10,%d1
    2d6e:	6704           	beqs 2d74 <_vsnprintf+0x310>
          flags &= ~FLAGS_ZEROPAD;
    2d70:	78ee           	moveq #-18,%d4
    2d72:	c881           	andl %d1,%d4
          if (flags & FLAGS_LONG_LONG) {
    2d74:	0804 0009      	btst #9,%d4
    2d78:	6600 fd3c      	bnew 2ab6 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2d7c:	2a03           	movel %d3,%d5
    2d7e:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    2d80:	0804 0008      	btst #8,%d4
    2d84:	6600 0470      	bnew 31f6 <_vsnprintf+0x792>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2d88:	0804 0006      	btst #6,%d4
    2d8c:	6600 03e0      	bnew 316e <_vsnprintf+0x70a>
    2d90:	4a04           	tstb %d4
    2d92:	6a00 04ac      	bplw 3240 <_vsnprintf+0x7dc>
    2d96:	2043           	moveal %d3,%a0
    2d98:	2010           	movel %a0@,%d0
    2d9a:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2d9c:	2f04           	movel %d4,%sp@-
    2d9e:	2f0b           	movel %a3,%sp@-
    2da0:	2f07           	movel %d7,%sp@-
    2da2:	4878 000a      	pea a <DUART_IMR>
    2da6:	2200           	movel %d0,%d1
    2da8:	d281           	addl %d1,%d1
    2daa:	9381           	subxl %d1,%d1
    2dac:	4481           	negl %d1
    2dae:	2f01           	movel %d1,%sp@-
    2db0:	4a80           	tstl %d0
    2db2:	6d00 03dc      	bltw 3190 <_vsnprintf+0x72c>
    2db6:	2f00           	movel %d0,%sp@-
    2db8:	2f02           	movel %d2,%sp@-
    2dba:	2f0a           	movel %a2,%sp@-
    2dbc:	2f06           	movel %d6,%sp@-
    2dbe:	2f0d           	movel %a5,%sp@-
    2dc0:	4eb9 0000 23f0 	jsr 23f0 <_ntoa_long>
    2dc6:	2440           	moveal %d0,%a2
    2dc8:	4fef 0028      	lea %sp@(40),%sp
    2dcc:	2605           	movel %d5,%d3
  while (*format)
    2dce:	1014           	moveb %a4@,%d0
    2dd0:	6600 fcc4      	bnew 2a96 <_vsnprintf+0x32>
    2dd4:	6000 fce4      	braw 2aba <_vsnprintf+0x56>
        flags |= FLAGS_LEFT;    // reverse padding
    2dd8:	7002           	moveq #2,%d0
    2dda:	8280           	orl %d0,%d1
        width = (unsigned int)-w;
    2ddc:	2a0b           	movel %a3,%d5
    2dde:	4485           	negl %d5
    2de0:	2645           	moveal %d5,%a3
    if (*format == '.') {
    2de2:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2de6:	2848           	moveal %a0,%a4
    2de8:	5288           	addql #1,%a0
    2dea:	6000 fd4e      	braw 2b3a <_vsnprintf+0xd6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2dee:	7021           	moveq #33,%d0
    2df0:	8081           	orl %d1,%d0
    2df2:	2f00           	movel %d0,%sp@-
    2df4:	4878 0008      	pea 8 <DUART_ACR>
    2df8:	2f07           	movel %d7,%sp@-
    2dfa:	4878 0010      	pea 10 <DUART_MR1B>
    2dfe:	42a7           	clrl %sp@-
    2e00:	2043           	moveal %d3,%a0
    2e02:	2f18           	movel %a0@+,%sp@-
    2e04:	2608           	movel %a0,%d3
    2e06:	2f02           	movel %d2,%sp@-
    2e08:	2f0a           	movel %a2,%sp@-
    2e0a:	2f06           	movel %d6,%sp@-
    2e0c:	2f0d           	movel %a5,%sp@-
    2e0e:	4eb9 0000 23f0 	jsr 23f0 <_ntoa_long>
    2e14:	2440           	moveal %d0,%a2
        break;
    2e16:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2e1a:	1014           	moveb %a4@,%d0
    2e1c:	6600 fc78      	bnew 2a96 <_vsnprintf+0x32>
    2e20:	6000 fc98      	braw 2aba <_vsnprintf+0x56>
        if (*format == 'h') {
    2e24:	102c 0001      	moveb %a4@(1),%d0
    2e28:	0c00 0068      	cmpib #104,%d0
    2e2c:	6700 0232      	beqw 3060 <_vsnprintf+0x5fc>
        flags |= FLAGS_SHORT;
    2e30:	7a7f           	moveq #127,%d5
    2e32:	4605           	notb %d5
    2e34:	8285           	orl %d5,%d1
        format++;
    2e36:	2844           	moveal %d4,%a4
    2e38:	528c           	addql #1,%a4
    switch (*format) {
    2e3a:	0c00 0078      	cmpib #120,%d0
    2e3e:	6f00 fd3a      	blew 2b7a <_vsnprintf+0x116>
    2e42:	6000 fecc      	braw 2d10 <_vsnprintf+0x2ac>
        const char* p = va_arg(va, char*);
    2e46:	2f43 0030      	movel %d3,%sp@(48)
    2e4a:	2243           	moveal %d3,%a1
    2e4c:	58af 0030      	addql #4,%sp@(48)
    2e50:	2619           	movel %a1@+,%d3
  for (s = str; *s && maxsize--; ++s);
    2e52:	2043           	moveal %d3,%a0
    2e54:	1f50 002f      	moveb %a0@,%sp@(47)
    2e58:	102f 002f      	moveb %sp@(47),%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2e5c:	4a87           	tstl %d7
    2e5e:	6700 0118      	beqw 2f78 <_vsnprintf+0x514>
  for (s = str; *s && maxsize--; ++s);
    2e62:	4a00           	tstb %d0
    2e64:	671a           	beqs 2e80 <_vsnprintf+0x41c>
    2e66:	2807           	movel %d7,%d4
    2e68:	5384           	subql #1,%d4
    2e6a:	2043           	moveal %d3,%a0
    2e6c:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2e70:	5288           	addql #1,%a0
    2e72:	4a10           	tstb %a0@
    2e74:	6700 01e2      	beqw 3058 <_vsnprintf+0x5f4>
    2e78:	b1c9           	cmpal %a1,%a0
    2e7a:	66f4           	bnes 2e70 <_vsnprintf+0x40c>
  return (unsigned int)(s - str);
    2e7c:	2809           	movel %a1,%d4
    2e7e:	9883           	subl %d3,%d4
        if (flags & FLAGS_PRECISION) {
    2e80:	2a01           	movel %d1,%d5
    2e82:	0285 0000 0400 	andil #1024,%d5
    2e88:	2245           	moveal %d5,%a1
    2e8a:	0801 000a      	btst #10,%d1
    2e8e:	6706           	beqs 2e96 <_vsnprintf+0x432>
          l = (l < precision ? l : precision);
    2e90:	be84           	cmpl %d4,%d7
    2e92:	6402           	bccs 2e96 <_vsnprintf+0x432>
    2e94:	2807           	movel %d7,%d4
        if (!(flags & FLAGS_LEFT)) {
    2e96:	7a02           	moveq #2,%d5
    2e98:	ca81           	andl %d1,%d5
    2e9a:	2f45 0034      	movel %d5,%sp@(52)
    2e9e:	0801 0001      	btst #1,%d1
    2ea2:	6700 0258      	beqw 30fc <_vsnprintf+0x698>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2ea6:	4a2f 002f      	tstb %sp@(47)
    2eaa:	6700 017a      	beqw 3026 <_vsnprintf+0x5c2>
    2eae:	220a           	movel %a2,%d1
    2eb0:	2a09           	movel %a1,%d5
    2eb2:	204b           	moveal %a3,%a0
    2eb4:	2643           	moveal %d3,%a3
    2eb6:	224c           	moveal %a4,%a1
    2eb8:	284a           	moveal %a2,%a4
    2eba:	2447           	moveal %d7,%a2
    2ebc:	2e09           	movel %a1,%d7
    2ebe:	2608           	movel %a0,%d3
    2ec0:	4a85           	tstl %d5
    2ec2:	670e           	beqs 2ed2 <_vsnprintf+0x46e>
    2ec4:	41ea ffff      	lea %a2@(-1),%a0
    2ec8:	b4fc 0000      	cmpaw #0,%a2
    2ecc:	6700 014c      	beqw 301a <_vsnprintf+0x5b6>
    2ed0:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    2ed2:	528c           	addql #1,%a4
    2ed4:	528b           	addql #1,%a3
    2ed6:	2f02           	movel %d2,%sp@-
    2ed8:	2f01           	movel %d1,%sp@-
    2eda:	2f06           	movel %d6,%sp@-
    2edc:	4880           	extw %d0
    2ede:	3240           	moveaw %d0,%a1
    2ee0:	2f09           	movel %a1,%sp@-
    2ee2:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2ee4:	1013           	moveb %a3@,%d0
    2ee6:	4fef 0010      	lea %sp@(16),%sp
    2eea:	6700 012e      	beqw 301a <_vsnprintf+0x5b6>
    2eee:	220c           	movel %a4,%d1
    2ef0:	60ce           	bras 2ec0 <_vsnprintf+0x45c>
      out(*format, buffer, idx++, maxlen);
    2ef2:	280a           	movel %a2,%d4
    2ef4:	5284           	addql #1,%d4
            const long value = va_arg(va, long);
    2ef6:	2a03           	movel %d3,%d5
    2ef8:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    2efa:	0801 0001      	btst #1,%d1
    2efe:	6700 01b6      	beqw 30b6 <_vsnprintf+0x652>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2f02:	2f02           	movel %d2,%sp@-
    2f04:	2f0a           	movel %a2,%sp@-
    2f06:	2f06           	movel %d6,%sp@-
    2f08:	2043           	moveal %d3,%a0
    2f0a:	2010           	movel %a0@,%d0
    2f0c:	4880           	extw %d0
    2f0e:	3240           	moveaw %d0,%a1
    2f10:	2f09           	movel %a1,%sp@-
    2f12:	4e95           	jsr %a5@
          while (l++ < width) {
    2f14:	4fef 0010      	lea %sp@(16),%sp
    2f18:	d5cb           	addal %a3,%a2
    2f1a:	7001           	moveq #1,%d0
    2f1c:	b08b           	cmpl %a3,%d0
    2f1e:	6400 02ce      	bccw 31ee <_vsnprintf+0x78a>
            out(' ', buffer, idx++, maxlen);
    2f22:	2004           	movel %d4,%d0
    2f24:	5284           	addql #1,%d4
    2f26:	2f02           	movel %d2,%sp@-
    2f28:	2f00           	movel %d0,%sp@-
    2f2a:	2f06           	movel %d6,%sp@-
    2f2c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2f30:	4e95           	jsr %a5@
          while (l++ < width) {
    2f32:	4fef 0010      	lea %sp@(16),%sp
    2f36:	b5c4           	cmpal %d4,%a2
    2f38:	66e8           	bnes 2f22 <_vsnprintf+0x4be>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2f3a:	2605           	movel %d5,%d3
  while (*format)
    2f3c:	1014           	moveb %a4@,%d0
    2f3e:	6600 fb56      	bnew 2a96 <_vsnprintf+0x32>
    2f42:	6000 fb76      	braw 2aba <_vsnprintf+0x56>
  unsigned int i = 0U;
    2f46:	7e00           	moveq #0,%d7
    2f48:	2848           	moveal %a0,%a4
    2f4a:	2047           	moveal %d7,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2f4c:	528c           	addql #1,%a4
    2f4e:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    2f52:	d3c9           	addal %a1,%a1
    2f54:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    2f58:	d1c8           	addal %a0,%a0
    2f5a:	4880           	extw %d0
    2f5c:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    2f60:	1014           	moveb %a4@,%d0
  return (ch >= '0') && (ch <= '9');
    2f62:	1800           	moveb %d0,%d4
    2f64:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2f68:	0c04 0009      	cmpib #9,%d4
    2f6c:	63de           	blss 2f4c <_vsnprintf+0x4e8>
    2f6e:	2e08           	movel %a0,%d7
    2f70:	41ec 0001      	lea %a4@(1),%a0
    2f74:	6000 fbce      	braw 2b44 <_vsnprintf+0xe0>
  for (s = str; *s && maxsize--; ++s);
    2f78:	4a2f 002f      	tstb %sp@(47)
    2f7c:	6700 ff02      	beqw 2e80 <_vsnprintf+0x41c>
    2f80:	78fe           	moveq #-2,%d4
    2f82:	2043           	moveal %d3,%a0
    2f84:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2f88:	6000 fee6      	braw 2e70 <_vsnprintf+0x40c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2f8c:	2043           	moveal %d3,%a0
    2f8e:	2e18           	movel %a0@+,%d7
    2f90:	2608           	movel %a0,%d3
    2f92:	4a87           	tstl %d7
    2f94:	6d0e           	blts 2fa4 <_vsnprintf+0x540>
    switch (*format) {
    2f96:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2f9a:	548c           	addql #2,%a4
    2f9c:	41ec 0001      	lea %a4@(1),%a0
    2fa0:	6000 fba2      	braw 2b44 <_vsnprintf+0xe0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2fa4:	7e00           	moveq #0,%d7
    switch (*format) {
    2fa6:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2faa:	548c           	addql #2,%a4
    2fac:	41ec 0001      	lea %a4@(1),%a0
    2fb0:	6000 fb92      	braw 2b44 <_vsnprintf+0xe0>
    switch (*format) {
    2fb4:	307c 0008      	moveaw #8,%a0
        if (flags & FLAGS_PRECISION) {
    2fb8:	0801 000a      	btst #10,%d1
    2fbc:	6600 00dc      	bnew 309a <_vsnprintf+0x636>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2fc0:	70f3           	moveq #-13,%d0
    2fc2:	c280           	andl %d0,%d1
          if (flags & FLAGS_LONG_LONG) {
    2fc4:	0801 0009      	btst #9,%d1
    2fc8:	6600 faec      	bnew 2ab6 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2fcc:	2803           	movel %d3,%d4
    2fce:	5884           	addql #4,%d4
          else if (flags & FLAGS_LONG) {
    2fd0:	0801 0008      	btst #8,%d1
    2fd4:	6600 0242      	bnew 3218 <_vsnprintf+0x7b4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2fd8:	0801 0006      	btst #6,%d1
    2fdc:	6600 01d0      	bnew 31ae <_vsnprintf+0x74a>
    2fe0:	2243           	moveal %d3,%a1
    2fe2:	2011           	movel %a1@,%d0
    2fe4:	4a01           	tstb %d1
    2fe6:	6a06           	bpls 2fee <_vsnprintf+0x58a>
    2fe8:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2fee:	2f01           	movel %d1,%sp@-
    2ff0:	2f0b           	movel %a3,%sp@-
    2ff2:	2f07           	movel %d7,%sp@-
    2ff4:	2f08           	movel %a0,%sp@-
    2ff6:	42a7           	clrl %sp@-
    2ff8:	2f00           	movel %d0,%sp@-
    2ffa:	2f02           	movel %d2,%sp@-
    2ffc:	2f0a           	movel %a2,%sp@-
    2ffe:	2f06           	movel %d6,%sp@-
    3000:	2f0d           	movel %a5,%sp@-
    3002:	4eb9 0000 23f0 	jsr 23f0 <_ntoa_long>
    3008:	2440           	moveal %d0,%a2
    300a:	4fef 0028      	lea %sp@(40),%sp
    300e:	2604           	movel %d4,%d3
  while (*format)
    3010:	1014           	moveb %a4@,%d0
    3012:	6600 fa82      	bnew 2a96 <_vsnprintf+0x32>
    3016:	6000 faa2      	braw 2aba <_vsnprintf+0x56>
    301a:	2643           	moveal %d3,%a3
    301c:	244c           	moveal %a4,%a2
    301e:	2847           	moveal %d7,%a4
        if (flags & FLAGS_LEFT) {
    3020:	4aaf 0034      	tstl %sp@(52)
    3024:	6724           	beqs 304a <_vsnprintf+0x5e6>
    3026:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    3028:	b88b           	cmpl %a3,%d4
    302a:	641e           	bccs 304a <_vsnprintf+0x5e6>
    302c:	45f3 a800      	lea %a3@(0,%a2:l),%a2
    3030:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    3032:	2005           	movel %d5,%d0
    3034:	5285           	addql #1,%d5
    3036:	2f02           	movel %d2,%sp@-
    3038:	2f00           	movel %d0,%sp@-
    303a:	2f06           	movel %d6,%sp@-
    303c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3040:	4e95           	jsr %a5@
          while (l++ < width) {
    3042:	4fef 0010      	lea %sp@(16),%sp
    3046:	ba8a           	cmpl %a2,%d5
    3048:	66e8           	bnes 3032 <_vsnprintf+0x5ce>
        const char* p = va_arg(va, char*);
    304a:	262f 0030      	movel %sp@(48),%d3
  while (*format)
    304e:	1014           	moveb %a4@,%d0
    3050:	6600 fa44      	bnew 2a96 <_vsnprintf+0x32>
    3054:	6000 fa64      	braw 2aba <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    3058:	2808           	movel %a0,%d4
    305a:	9883           	subl %d3,%d4
    305c:	6000 fe22      	braw 2e80 <_vsnprintf+0x41c>
          flags |= FLAGS_CHAR;
    3060:	703f           	moveq #63,%d0
    3062:	4600           	notb %d0
    3064:	8280           	orl %d0,%d1
          format++;
    3066:	280c           	movel %a4,%d4
    3068:	5484           	addql #2,%d4
    switch (*format) {
    306a:	102c 0002      	moveb %a4@(2),%d0
        format++;
    306e:	2844           	moveal %d4,%a4
    3070:	528c           	addql #1,%a4
    switch (*format) {
    3072:	0c00 0078      	cmpib #120,%d0
    3076:	6f00 fb02      	blew 2b7a <_vsnprintf+0x116>
    307a:	6000 fc94      	braw 2d10 <_vsnprintf+0x2ac>
          flags |= FLAGS_LONG_LONG;
    307e:	0041 0300      	oriw #768,%d1
          format++;
    3082:	280c           	movel %a4,%d4
    3084:	5484           	addql #2,%d4
    switch (*format) {
    3086:	102c 0002      	moveb %a4@(2),%d0
        format++;
    308a:	2844           	moveal %d4,%a4
    308c:	528c           	addql #1,%a4
    switch (*format) {
    308e:	0c00 0078      	cmpib #120,%d0
    3092:	6f00 fae6      	blew 2b7a <_vsnprintf+0x116>
    3096:	6000 fc78      	braw 2d10 <_vsnprintf+0x2ac>
          flags &= ~FLAGS_ZEROPAD;
    309a:	70f2           	moveq #-14,%d0
    309c:	c280           	andl %d0,%d1
        if ((*format == 'i') || (*format == 'd')) {
    309e:	6000 ff24      	braw 2fc4 <_vsnprintf+0x560>
    switch (*format) {
    30a2:	0c00 0058      	cmpib #88,%d0
    30a6:	6600 fc68      	bnew 2d10 <_vsnprintf+0x2ac>
          flags |= FLAGS_UPPERCASE;
    30aa:	7a20           	moveq #32,%d5
    30ac:	8285           	orl %d5,%d1
    30ae:	307c 0010      	moveaw #16,%a0
    30b2:	6000 ff04      	braw 2fb8 <_vsnprintf+0x554>
          while (l++ < width) {
    30b6:	7001           	moveq #1,%d0
    30b8:	b08b           	cmpl %a3,%d0
    30ba:	6400 011c      	bccw 31d8 <_vsnprintf+0x774>
    30be:	41f3 a8ff      	lea %a3@(ffffffffffffffff,%a2:l),%a0
    30c2:	2e08           	movel %a0,%d7
    30c4:	280a           	movel %a2,%d4
            out(' ', buffer, idx++, maxlen);
    30c6:	2004           	movel %d4,%d0
    30c8:	5284           	addql #1,%d4
    30ca:	2f02           	movel %d2,%sp@-
    30cc:	2f00           	movel %d0,%sp@-
    30ce:	2f06           	movel %d6,%sp@-
    30d0:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    30d4:	4e95           	jsr %a5@
          while (l++ < width) {
    30d6:	4fef 0010      	lea %sp@(16),%sp
    30da:	b887           	cmpl %d7,%d4
    30dc:	66e8           	bnes 30c6 <_vsnprintf+0x662>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    30de:	d5cb           	addal %a3,%a2
    30e0:	2f02           	movel %d2,%sp@-
    30e2:	2f07           	movel %d7,%sp@-
    30e4:	2f06           	movel %d6,%sp@-
    30e6:	2243           	moveal %d3,%a1
    30e8:	2011           	movel %a1@,%d0
    30ea:	4880           	extw %d0
    30ec:	3040           	moveaw %d0,%a0
    30ee:	2f08           	movel %a0,%sp@-
    30f0:	4e95           	jsr %a5@
    30f2:	4fef 0010      	lea %sp@(16),%sp
    30f6:	2605           	movel %d5,%d3
    30f8:	6000 fe42      	braw 2f3c <_vsnprintf+0x4d8>
          while (l++ < width) {
    30fc:	b88b           	cmpl %a3,%d4
    30fe:	6400 0162      	bccw 3262 <_vsnprintf+0x7fe>
    3102:	200b           	movel %a3,%d0
    3104:	d08a           	addl %a2,%d0
    3106:	9084           	subl %d4,%d0
    3108:	2800           	movel %d0,%d4
    310a:	2a09           	movel %a1,%d5
            out(' ', buffer, idx++, maxlen);
    310c:	200a           	movel %a2,%d0
    310e:	528a           	addql #1,%a2
    3110:	2f02           	movel %d2,%sp@-
    3112:	2f00           	movel %d0,%sp@-
    3114:	2f06           	movel %d6,%sp@-
    3116:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    311a:	4e95           	jsr %a5@
          while (l++ < width) {
    311c:	4fef 0010      	lea %sp@(16),%sp
    3120:	b5c4           	cmpal %d4,%a2
    3122:	66e8           	bnes 310c <_vsnprintf+0x6a8>
    3124:	2245           	moveal %d5,%a1
    3126:	280b           	movel %a3,%d4
    3128:	5284           	addql #1,%d4
    312a:	2043           	moveal %d3,%a0
    312c:	1f50 002f      	moveb %a0@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3130:	102f 002f      	moveb %sp@(47),%d0
    3134:	6700 ff14      	beqw 304a <_vsnprintf+0x5e6>
    3138:	220a           	movel %a2,%d1
    313a:	2a09           	movel %a1,%d5
    313c:	204b           	moveal %a3,%a0
    313e:	2643           	moveal %d3,%a3
    3140:	224c           	moveal %a4,%a1
    3142:	284a           	moveal %a2,%a4
    3144:	2447           	moveal %d7,%a2
    3146:	2e09           	movel %a1,%d7
    3148:	2608           	movel %a0,%d3
    314a:	6000 fd74      	braw 2ec0 <_vsnprintf+0x45c>
    switch (*format) {
    314e:	307c 0010      	moveaw #16,%a0
    3152:	0c00 0078      	cmpib #120,%d0
    3156:	6700 fe60      	beqw 2fb8 <_vsnprintf+0x554>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    315a:	70ef           	moveq #-17,%d0
    315c:	c280           	andl %d0,%d1
    315e:	307c 000a      	moveaw #10,%a0
    3162:	6000 fe54      	braw 2fb8 <_vsnprintf+0x554>
    switch (*format) {
    3166:	307c 0002      	moveaw #2,%a0
    316a:	6000 fe4c      	braw 2fb8 <_vsnprintf+0x554>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    316e:	2243           	moveal %d3,%a1
    3170:	2011           	movel %a1@,%d0
    3172:	4880           	extw %d0
    3174:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3176:	2f04           	movel %d4,%sp@-
    3178:	2f0b           	movel %a3,%sp@-
    317a:	2f07           	movel %d7,%sp@-
    317c:	4878 000a      	pea a <DUART_IMR>
    3180:	2200           	movel %d0,%d1
    3182:	d281           	addl %d1,%d1
    3184:	9381           	subxl %d1,%d1
    3186:	4481           	negl %d1
    3188:	2f01           	movel %d1,%sp@-
    318a:	4a80           	tstl %d0
    318c:	6c00 fc28      	bgew 2db6 <_vsnprintf+0x352>
    3190:	4480           	negl %d0
    3192:	2f00           	movel %d0,%sp@-
    3194:	2f02           	movel %d2,%sp@-
    3196:	2f0a           	movel %a2,%sp@-
    3198:	2f06           	movel %d6,%sp@-
    319a:	2f0d           	movel %a5,%sp@-
    319c:	4eb9 0000 23f0 	jsr 23f0 <_ntoa_long>
    31a2:	2440           	moveal %d0,%a2
    31a4:	4fef 0028      	lea %sp@(40),%sp
    31a8:	2605           	movel %d5,%d3
    31aa:	6000 fc22      	braw 2dce <_vsnprintf+0x36a>
    31ae:	7000           	moveq #0,%d0
    31b0:	4600           	notb %d0
    31b2:	2243           	moveal %d3,%a1
    31b4:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    31b6:	2f01           	movel %d1,%sp@-
    31b8:	2f0b           	movel %a3,%sp@-
    31ba:	2f07           	movel %d7,%sp@-
    31bc:	2f08           	movel %a0,%sp@-
    31be:	42a7           	clrl %sp@-
    31c0:	2f00           	movel %d0,%sp@-
    31c2:	6000 fe36      	braw 2ffa <_vsnprintf+0x596>
        if ((*format != 'i') && (*format != 'd')) {
    31c6:	0c00 0064      	cmpib #100,%d0
    31ca:	6700 fb9e      	beqw 2d6a <_vsnprintf+0x306>
    31ce:	2204           	movel %d4,%d1
    31d0:	307c 000a      	moveaw #10,%a0
    31d4:	6000 fde2      	braw 2fb8 <_vsnprintf+0x554>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    31d8:	2f02           	movel %d2,%sp@-
    31da:	2f0a           	movel %a2,%sp@-
    31dc:	2f06           	movel %d6,%sp@-
    31de:	2043           	moveal %d3,%a0
    31e0:	2010           	movel %a0@,%d0
    31e2:	4880           	extw %d0
    31e4:	3240           	moveaw %d0,%a1
    31e6:	2f09           	movel %a1,%sp@-
    31e8:	4e95           	jsr %a5@
    31ea:	4fef 0010      	lea %sp@(16),%sp
    31ee:	2444           	moveal %d4,%a2
    31f0:	2605           	movel %d5,%d3
    31f2:	6000 fd48      	braw 2f3c <_vsnprintf+0x4d8>
            const long value = va_arg(va, long);
    31f6:	2043           	moveal %d3,%a0
    31f8:	2010           	movel %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    31fa:	2f04           	movel %d4,%sp@-
    31fc:	2f0b           	movel %a3,%sp@-
    31fe:	2f07           	movel %d7,%sp@-
    3200:	4878 000a      	pea a <DUART_IMR>
    3204:	2200           	movel %d0,%d1
    3206:	d281           	addl %d1,%d1
    3208:	9381           	subxl %d1,%d1
    320a:	4481           	negl %d1
    320c:	2f01           	movel %d1,%sp@-
    320e:	4a80           	tstl %d0
    3210:	6c00 fba4      	bgew 2db6 <_vsnprintf+0x352>
    3214:	6000 ff7a      	braw 3190 <_vsnprintf+0x72c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3218:	2f01           	movel %d1,%sp@-
    321a:	2f0b           	movel %a3,%sp@-
    321c:	2f07           	movel %d7,%sp@-
    321e:	2f08           	movel %a0,%sp@-
    3220:	42a7           	clrl %sp@-
    3222:	2043           	moveal %d3,%a0
    3224:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3226:	2f02           	movel %d2,%sp@-
    3228:	2f0a           	movel %a2,%sp@-
    322a:	2f06           	movel %d6,%sp@-
    322c:	2f0d           	movel %a5,%sp@-
    322e:	4eb9 0000 23f0 	jsr 23f0 <_ntoa_long>
    3234:	2440           	moveal %d0,%a2
    3236:	4fef 0028      	lea %sp@(40),%sp
    323a:	2604           	movel %d4,%d3
        break;
    323c:	6000 fdd2      	braw 3010 <_vsnprintf+0x5ac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3240:	2243           	moveal %d3,%a1
    3242:	2011           	movel %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3244:	2f04           	movel %d4,%sp@-
    3246:	2f0b           	movel %a3,%sp@-
    3248:	2f07           	movel %d7,%sp@-
    324a:	4878 000a      	pea a <DUART_IMR>
    324e:	2200           	movel %d0,%d1
    3250:	d281           	addl %d1,%d1
    3252:	9381           	subxl %d1,%d1
    3254:	4481           	negl %d1
    3256:	2f01           	movel %d1,%sp@-
    3258:	4a80           	tstl %d0
    325a:	6c00 fb5a      	bgew 2db6 <_vsnprintf+0x352>
    325e:	6000 ff30      	braw 3190 <_vsnprintf+0x72c>
          while (l++ < width) {
    3262:	5284           	addql #1,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3264:	102f 002f      	moveb %sp@(47),%d0
    3268:	6600 fece      	bnew 3138 <_vsnprintf+0x6d4>
    326c:	6000 fddc      	braw 304a <_vsnprintf+0x5e6>

00003270 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    3270:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3274:	486e 000c      	pea %fp@(12)
    3278:	2f2e 0008      	movel %fp@(8),%sp@-
    327c:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    3280:	486e ffff      	pea %fp@(-1)
    3284:	4879 0000 2a4c 	pea 2a4c <_out_char>
    328a:	4eb9 0000 2a64 	jsr 2a64 <_vsnprintf>
  va_end(va);
  return ret;
    3290:	4fef 0014      	lea %sp@(20),%sp
}
    3294:	4e5e           	unlk %fp
    3296:	4e75           	rts

00003298 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3298:	2f02           	movel %d2,%sp@-
    329a:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    329e:	0c02 000a      	cmpib #10,%d2
    32a2:	6714           	beqs 32b8 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    32a4:	41f9 0000 3454 	lea 3454 <buf>,%a0
    32aa:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    32ac:	2f48 0008      	movel %a0,%sp@(8)
}
    32b0:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    32b2:	4ef9 0000 32da 	jmp 32da <mcPrint>
    mcPrint(crbuf);
    32b8:	4879 0000 3450 	pea 3450 <crbuf>
    32be:	4eb9 0000 32da 	jsr 32da <mcPrint>
    32c4:	588f           	addql #4,%sp
  buf[0] = chr;
    32c6:	41f9 0000 3454 	lea 3454 <buf>,%a0
    32cc:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    32ce:	2f48 0008      	movel %a0,%sp@(8)
}
    32d2:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    32d4:	4ef9 0000 32da 	jmp 32da <mcPrint>

000032da <mcPrint>:
    32da:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    32de:	206f 0010      	moveal %sp@(16),%a0
    32e2:	7200           	moveq #0,%d1
    32e4:	4e4e           	trap #14
    32e6:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    32ea:	4e75           	rts

000032ec <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    32ec:	41f9 0000 3454 	lea 3454 <buf>,%a0
    32f2:	b1fc 0000 6c68 	cmpal #27752,%a0
    32f8:	641c           	bccs 3316 <__kinit+0x2a>
    32fa:	203c 0000 6c68 	movel #27752,%d0
    3300:	0480 0000 3455 	subil #13397,%d0
    3306:	72fc           	moveq #-4,%d1
    3308:	c081           	andl %d1,%d0
    330a:	0680 0000 3458 	addil #13400,%d0
    3310:	4298           	clrl %a0@+
    3312:	b088           	cmpl %a0,%d0
    3314:	66fa           	bnes 3310 <__kinit+0x24>
}
    3316:	4e75           	rts

00003318 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    3318:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    331c:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3320:	7200           	moveq #0,%d1
    3322:	3239 0000 3464 	movew 3464 <cxa_atexit_count>,%d1
    3328:	2401           	movel %d1,%d2
    332a:	5382           	subql #1,%d2
    332c:	4a81           	tstl %d1
    332e:	6738           	beqs 3368 <__cxa_finalize+0x50>
    3330:	2001           	movel %d1,%d0
    3332:	e788           	lsll #3,%d0
    3334:	2440           	moveal %d0,%a2
    3336:	95c1           	subal %d1,%a2
    3338:	d5ca           	addal %a2,%a2
    333a:	d5fc 0000 3458 	addal #13400,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    3340:	4a83           	tstl %d3
    3342:	662a           	bnes 336e <__cxa_finalize+0x56>
    3344:	4a2a 000c      	tstb %a2@(12)
    3348:	6610           	bnes 335a <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    334a:	2f2a 0004      	movel %a2@(4),%sp@-
    334e:	2052           	moveal %a2@,%a0
    3350:	4e90           	jsr %a0@
            entry->done = true;
    3352:	157c 0001 000c 	moveb #1,%a2@(12)
    3358:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    335a:	45ea fff2      	lea %a2@(-14),%a2
    335e:	51ca ffe0      	dbf %d2,3340 <__cxa_finalize+0x28>
    3362:	4242           	clrw %d2
    3364:	5382           	subql #1,%d2
    3366:	64d8           	bccs 3340 <__cxa_finalize+0x28>
        }
    }
}
    3368:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    336c:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    336e:	b6aa 0008      	cmpl %a2@(8),%d3
    3372:	67d0           	beqs 3344 <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3374:	45ea fff2      	lea %a2@(-14),%a2
    3378:	51ca fff4      	dbf %d2,336e <__cxa_finalize+0x56>
    337c:	4242           	clrw %d2
    337e:	5382           	subql #1,%d2
    3380:	64ec           	bccs 336e <__cxa_finalize+0x56>
}
    3382:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3386:	4e75           	rts

00003388 <__udivsi3>:
    3388:	2f02           	movel %d2,%sp@-
    338a:	222f 000c      	movel %sp@(12),%d1
    338e:	202f 0008      	movel %sp@(8),%d0
    3392:	0c81 0001 0000 	cmpil #65536,%d1
    3398:	6416           	bccs 33b0 <L3>
    339a:	2400           	movel %d0,%d2
    339c:	4242           	clrw %d2
    339e:	4842           	swap %d2
    33a0:	84c1           	divuw %d1,%d2
    33a2:	3002           	movew %d2,%d0
    33a4:	4840           	swap %d0
    33a6:	342f 000a      	movew %sp@(10),%d2
    33aa:	84c1           	divuw %d1,%d2
    33ac:	3002           	movew %d2,%d0
    33ae:	6030           	bras 33e0 <L6>

000033b0 <L3>:
    33b0:	2401           	movel %d1,%d2

000033b2 <L4>:
    33b2:	e289           	lsrl #1,%d1
    33b4:	e288           	lsrl #1,%d0
    33b6:	0c81 0001 0000 	cmpil #65536,%d1
    33bc:	64f4           	bccs 33b2 <L4>
    33be:	80c1           	divuw %d1,%d0
    33c0:	0280 0000 ffff 	andil #65535,%d0
    33c6:	2202           	movel %d2,%d1
    33c8:	c2c0           	muluw %d0,%d1
    33ca:	4842           	swap %d2
    33cc:	c4c0           	muluw %d0,%d2
    33ce:	4842           	swap %d2
    33d0:	4a42           	tstw %d2
    33d2:	660a           	bnes 33de <L5>
    33d4:	d282           	addl %d2,%d1
    33d6:	6506           	bcss 33de <L5>
    33d8:	b2af 0008      	cmpl %sp@(8),%d1
    33dc:	6302           	blss 33e0 <L6>

000033de <L5>:
    33de:	5380           	subql #1,%d0

000033e0 <L6>:
    33e0:	241f           	movel %sp@+,%d2
    33e2:	4e75           	rts

000033e4 <__umodsi3>:
    33e4:	222f 0008      	movel %sp@(8),%d1
    33e8:	202f 0004      	movel %sp@(4),%d0
    33ec:	2f01           	movel %d1,%sp@-
    33ee:	2f00           	movel %d0,%sp@-
    33f0:	4eb9 0000 3388 	jsr 3388 <__udivsi3>
    33f6:	508f           	addql #8,%sp
    33f8:	222f 0008      	movel %sp@(8),%d1
    33fc:	2f01           	movel %d1,%sp@-
    33fe:	2f00           	movel %d0,%sp@-
    3400:	4eb9 0000 3414 	jsr 3414 <__mulsi3>
    3406:	508f           	addql #8,%sp
    3408:	222f 0004      	movel %sp@(4),%d1
    340c:	9280           	subl %d0,%d1
    340e:	2001           	movel %d1,%d0
    3410:	4e75           	rts
	...

00003414 <__mulsi3>:
    3414:	302f 0004      	movew %sp@(4),%d0
    3418:	c0ef 000a      	muluw %sp@(10),%d0
    341c:	322f 0006      	movew %sp@(6),%d1
    3420:	c2ef 0008      	muluw %sp@(8),%d1
    3424:	d041           	addw %d1,%d0
    3426:	4840           	swap %d0
    3428:	4240           	clrw %d0
    342a:	322f 0006      	movew %sp@(6),%d1
    342e:	c2ef 000a      	muluw %sp@(10),%d1
    3432:	d081           	addl %d1,%d0
    3434:	4e75           	rts
    3436:	416e           	.short 0x416e
    3438:	7377           	.short 0x7377
    343a:	6572           	bcss 34ae <cxa_atexits+0x48>
    343c:	2028 696e      	movel %a0@(26990),%d0
    3440:	7429           	moveq #41,%d2
    3442:	2025           	movel %a5@-,%d0
    3444:	643d           	bccs 3483 <cxa_atexits+0x1d>
    3446:	3136 0a00      	movew %fp@(0,%d0:l:2),%a0@-
