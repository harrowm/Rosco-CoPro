
rosco_test.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 2234 	movel #8756,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,2240 <SAVE_PROG_EXIT>
    2048:	2240 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 2188 	lea 2188 <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 20c4 	lea 20c4 <_postinit_end>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 2240 	movel 2240 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 21b4 	lea 21b4 <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 2234 	lea 2234 <_bss_start>,%a2
    208a:	47f9 0000 2234 	lea 2234 <_bss_start>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 2234 	lea 2234 <_bss_start>,%a2
    20ac:	47f9 0000 2234 	lea 2234 <_bss_start>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <_code>:
    20c4:	21fc 0000 2128 	movel #8488,2c <R_STOPCNTCMD+0xe>
    20ca:	002c 
    20cc:	23f8 0008 0000 	movel 8 <DUART_ACR>,2144 <BERR>
    20d2:	2144 
    20d4:	21fc 0000 2116 	movel #8470,8 <DUART_ACR>
    20da:	0008 
    20dc:	2039 0010 0000 	movel 100000 <_LOAD_ADDRESS+0xc0000>,%d0
    20e2:	21fa 0060 0008 	movel %pc@(2144 <BERR>),8 <DUART_ACR>
    20e8:	41fa 005e      	lea %pc@(2148 <TEST>),%a0
    20ec:	614a           	bsrs 2138 <mcprintln>
    20ee:	f200 5c00      	fmovecrx #0,%fp0
    20f2:	f200 0003      	fintrzx %fp0,%fp0
    20f6:	f201 6000      	fmovel %fp0,%d1
    20fa:	700f           	moveq #15,%d0
    20fc:	143c 000a      	moveb #10,%d2
    2100:	4e4f           	trap #15
    2102:	41fa 0058      	lea %pc@(215c <BLANK>),%a0
    2106:	6130           	bsrs 2138 <mcprintln>
    2108:	41fa 0053      	lea %pc@(215d <ANSWER>),%a0
    210c:	612a           	bsrs 2138 <mcprintln>
    210e:	41fa 0047      	lea %pc@(2157 <GOOD>),%a0
    2112:	6124           	bsrs 2138 <mcprintln>

00002114 <exit>:
    2114:	4e75           	rts

00002116 <berr>:
    2116:	2f00           	movel %d0,%sp@-
    2118:	302f 000e      	movew %sp@(14),%d0
    211c:	0880 0008      	bclr #8,%d0
    2120:	3f40 000e      	movew %d0,%sp@(14)
    2124:	201f           	movel %sp@+,%d0
    2126:	4e73           	rte

00002128 <trap>:
    2128:	41fa 0026      	lea %pc@(2150 <BANG>),%a0
    212c:	610a           	bsrs 2138 <mcprintln>
    212e:	2f7c 0000 2114 	movel #8468,%sp@(2)
    2134:	0002 
    2136:	4e73           	rte

00002138 <mcprintln>:
    2138:	2f08           	movel %a0,%sp@-
    213a:	4eb9 0000 2176 	jsr 2176 <mcPrintln>
    2140:	588f           	addql #4,%sp
    2142:	4e75           	rts

00002144 <BERR>:
    2144:	0000 0000      	orib #0,%d0

00002148 <TEST>:
    2148:	5445           	addqw #2,%d5
    214a:	5354           	subqw #1,%a4@
    214c:	494e           	.short 0x494e
    214e:	4700           	.short 0x4700

00002150 <BANG>:
    2150:	462d 4c69      	notb %a5@(19561)
    2154:	6e65           	bgts 21bb <__cxa_finalize+0x7>
	...

00002157 <GOOD>:
    2157:	4f6b           	.short 0x4f6b
    2159:	6179           	bsrs 21d4 <__cxa_finalize+0x20>
	...

0000215c <BLANK>:
	...

0000215d <ANSWER>:
    215d:	416e           	.short 0x416e
    215f:	7377           	.short 0x7377
    2161:	6572           	bcss 21d5 <__cxa_finalize+0x21>
    2163:	2061           	moveal %a1@-,%a0
    2165:	626f           	bhis 21d6 <__cxa_finalize+0x22>
    2167:	7665           	moveq #101,%d3
    2169:	2073 686f      	moveal %a3@(6f,%d6:l),%a0
    216d:	756c           	.short 0x756c
    216f:	6420           	bccs 2191 <__kinit+0x9>
    2171:	6265           	bhis 21d8 <__cxa_finalize+0x24>
    2173:	
00002176 <mcPrintln>:
    2176:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    217a:	206f 0010      	moveal %sp@(16),%a0
    217e:	7201           	moveq #1,%d1
    2180:	4e4e           	trap #14
    2182:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    2186:	4e75           	rts

00002188 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    2188:	41f9 0000 2234 	lea 2234 <_ctors>,%a0
    218e:	b1fc 0000 5a48 	cmpal #23112,%a0
    2194:	641c           	bccs 21b2 <__kinit+0x2a>
    2196:	203c 0000 5a48 	movel #23112,%d0
    219c:	0480 0000 2235 	subil #8757,%d0
    21a2:	72fc           	moveq #-4,%d1
    21a4:	c081           	andl %d1,%d0
    21a6:	0680 0000 2238 	addil #8760,%d0
    21ac:	4298           	clrl %a0@+
    21ae:	b088           	cmpl %a0,%d0
    21b0:	66fa           	bnes 21ac <__kinit+0x24>
}
    21b2:	4e75           	rts

000021b4 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    21b4:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    21b8:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    21bc:	7200           	moveq #0,%d1
    21be:	3239 0000 2244 	movew 2244 <cxa_atexit_count>,%d1
    21c4:	2401           	movel %d1,%d2
    21c6:	5382           	subql #1,%d2
    21c8:	4a81           	tstl %d1
    21ca:	6738           	beqs 2204 <__cxa_finalize+0x50>
    21cc:	2001           	movel %d1,%d0
    21ce:	e788           	lsll #3,%d0
    21d0:	2440           	moveal %d0,%a2
    21d2:	95c1           	subal %d1,%a2
    21d4:	d5ca           	addal %a2,%a2
    21d6:	d5fc 0000 2238 	addal #8760,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    21dc:	4a83           	tstl %d3
    21de:	662a           	bnes 220a <__cxa_finalize+0x56>
    21e0:	4a2a 000c      	tstb %a2@(12)
    21e4:	6610           	bnes 21f6 <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    21e6:	2f2a 0004      	movel %a2@(4),%sp@-
    21ea:	2052           	moveal %a2@,%a0
    21ec:	4e90           	jsr %a0@
            entry->done = true;
    21ee:	157c 0001 000c 	moveb #1,%a2@(12)
    21f4:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    21f6:	45ea fff2      	lea %a2@(-14),%a2
    21fa:	51ca ffe0      	dbf %d2,21dc <__cxa_finalize+0x28>
    21fe:	4242           	clrw %d2
    2200:	5382           	subql #1,%d2
    2202:	64d8           	bccs 21dc <__cxa_finalize+0x28>
        }
    }
}
    2204:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    2208:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    220a:	b6aa 0008      	cmpl %a2@(8),%d3
    220e:	67d0           	beqs 21e0 <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    2210:	45ea fff2      	lea %a2@(-14),%a2
    2214:	51ca fff4      	dbf %d2,220a <__cxa_finalize+0x56>
    2218:	4242           	clrw %d2
    221a:	5382           	subql #1,%d2
    221c:	64ec           	bccs 220a <__cxa_finalize+0x56>
}
    221e:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    2222:	4e75           	rts
