
simple_asm.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20ac 	movel #8364,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 21e8 	movel #8680,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	41f9 0000 213a 	lea 213a <__kinit>,%a0
    2048:	4e90           	jsr %a0@
    204a:	611c           	bsrs 2068 <CALL_CTORS>
    204c:	41f9 0000 20ac 	lea 20ac <_postinit_end>,%a0
    2052:	4e90           	jsr %a0@

00002054 <exit>:
    2054:	42a7           	clrl %sp@-
    2056:	41f9 0000 2166 	lea 2166 <__cxa_finalize>,%a0
    205c:	4e90           	jsr %a0@
    205e:	588f           	addql #4,%sp
    2060:	6128           	bsrs 208a <CALL_DTORS>
    2062:	2078 0490      	moveal 490 <EFP_PROG_EXIT>,%a0
    2066:	4ed0           	jmp %a0@

00002068 <CALL_CTORS>:
    2068:	48e7 0038      	moveml %a2-%a4,%sp@-
    206c:	45f9 0000 21e8 	lea 21e8 <cxa_atexit_count>,%a2
    2072:	47f9 0000 21e8 	lea 21e8 <cxa_atexit_count>,%a3
    2078:	598b           	subql #4,%a3
    207a:	b7ca           	cmpal %a2,%a3
    207c:	6506           	bcss 2084 <CALL_CTORS+0x1c>
    207e:	2853           	moveal %a3@,%a4
    2080:	4e94           	jsr %a4@
    2082:	60f4           	bras 2078 <CALL_CTORS+0x10>
    2084:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    2088:	4e75           	rts

0000208a <CALL_DTORS>:
    208a:	48e7 0038      	moveml %a2-%a4,%sp@-
    208e:	45f9 0000 21e8 	lea 21e8 <cxa_atexit_count>,%a2
    2094:	47f9 0000 21e8 	lea 21e8 <cxa_atexit_count>,%a3
    209a:	b5cb           	cmpal %a3,%a2
    209c:	6708           	beqs 20a6 <CALL_DTORS+0x1c>
    209e:	2852           	moveal %a2@,%a4
    20a0:	4e94           	jsr %a4@
    20a2:	588a           	addql #4,%a2
    20a4:	60f4           	bras 209a <CALL_DTORS+0x10>
    20a6:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20aa:	4e75           	rts

Disassembly of section .text:

000020ac <_code>:
    20ac:	41fa 003c      	lea %pc@(20ea <HELLO>),%a0
    20b0:	612c           	bsrs 20de <mcprintln>
    20b2:	720a           	moveq #10,%d1
    20b4:	f201 5080      	fmovew %d1,%fp1
    20b8:	f200 5c00      	fmovecrx #0,%fp0
    20bc:	f200 0423      	fmulx %fp1,%fp0
    20c0:	f200 0003      	fintrzx %fp0,%fp0
    20c4:	f201 7000      	fmovew %fp0,%d1
    20c8:	700f           	moveq #15,%d0
    20ca:	143c 000a      	moveb #10,%d2
    20ce:	4e4f           	trap #15
    20d0:	41fa 003e      	lea %pc@(2110 <BLANK>),%a0
    20d4:	6108           	bsrs 20de <mcprintln>
    20d6:	41fa 0039      	lea %pc@(2111 <GOODBYE>),%a0
    20da:	6102           	bsrs 20de <mcprintln>
    20dc:	4e75           	rts

000020de <mcprintln>:
    20de:	2f08           	movel %a0,%sp@-
    20e0:	4eb9 0000 2128 	jsr 2128 <mcPrintln>
    20e6:	588f           	addql #4,%sp
    20e8:	4e75           	rts

000020ea <HELLO>:
    20ea:	7069           	moveq #105,%d0
    20ec:	2a31 3020      	movel %a1@(20,%d3:w),%d5
    20f0:	6173           	bsrs 2165 <__kinit+0x2b>
    20f2:	2061           	moveal %a1@-,%a0
    20f4:	6e20           	bgts 2116 <GOODBYE+0x5>
    20f6:	696e           	bvss 2166 <__cxa_finalize>
    20f8:	7420           	moveq #32,%d2
    20fa:	6973           	bvss 216f <__cxa_finalize+0x9>
    20fc:	2033 312e 2020 	movel %a3@(2020)@(5468,%d3:w),%d0
    2102:	5468 
    2104:	6520           	bcss 2126 <GOODBYE+0x15>
    2106:	4650           	notw %a0@
    2108:	5520           	subqb #2,%a0@-
    210a:	7361           	.short 0x7361
    210c:	7973           	.short 0x7973
    210e:	3a00           	movew %d0,%d5

00002110 <BLANK>:
	...

00002111 <GOODBYE>:
    2111:	5072 6574 7479 	addqw #8,%a2@(74792065)@(0)
    2117:	2065 
    2119:	7863           	moveq #99,%d4
    211b:	6974           	bvss 2191 <__cxa_finalize+0x2b>
    211d:	696e           	bvss 218d <__cxa_finalize+0x27>
    211f:	6720           	beqs 2141 <__kinit+0x7>
    2121:	7374           	.short 0x7374
    2123:	7566           	.short 0x7566
    2125:	6621           	bnes 2148 <__kinit+0xe>
	...

00002128 <mcPrintln>:
    2128:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    212c:	206f 0010      	moveal %sp@(16),%a0
    2130:	7201           	moveq #1,%d1
    2132:	4e4e           	trap #14
    2134:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    2138:	4e75           	rts

0000213a <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    213a:	41f9 0000 21e8 	lea 21e8 <_ctors>,%a0
    2140:	b1fc 0000 59ec 	cmpal #23020,%a0
    2146:	641c           	bccs 2164 <__kinit+0x2a>
    2148:	203c 0000 59ec 	movel #23020,%d0
    214e:	0480 0000 21e9 	subil #8681,%d0
    2154:	72fc           	moveq #-4,%d1
    2156:	c081           	andl %d1,%d0
    2158:	0680 0000 21ec 	addil #8684,%d0
    215e:	4298           	clrl %a0@+
    2160:	b088           	cmpl %a0,%d0
    2162:	66fa           	bnes 215e <__kinit+0x24>
}
    2164:	4e75           	rts

00002166 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    2166:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    216a:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    216e:	7200           	moveq #0,%d1
    2170:	3239 0000 21e8 	movew 21e8 <_ctors>,%d1
    2176:	2401           	movel %d1,%d2
    2178:	5382           	subql #1,%d2
    217a:	4a81           	tstl %d1
    217c:	6738           	beqs 21b6 <__cxa_finalize+0x50>
    217e:	2001           	movel %d1,%d0
    2180:	e788           	lsll #3,%d0
    2182:	2440           	moveal %d0,%a2
    2184:	95c1           	subal %d1,%a2
    2186:	d5ca           	addal %a2,%a2
    2188:	d5fc 0000 21dc 	addal #8668,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    218e:	4a83           	tstl %d3
    2190:	662a           	bnes 21bc <__cxa_finalize+0x56>
    2192:	4a2a 000c      	tstb %a2@(12)
    2196:	6610           	bnes 21a8 <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    2198:	2f2a 0004      	movel %a2@(4),%sp@-
    219c:	2052           	moveal %a2@,%a0
    219e:	4e90           	jsr %a0@
            entry->done = true;
    21a0:	157c 0001 000c 	moveb #1,%a2@(12)
    21a6:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    21a8:	45ea fff2      	lea %a2@(-14),%a2
    21ac:	51ca ffe0      	dbf %d2,218e <__cxa_finalize+0x28>
    21b0:	4242           	clrw %d2
    21b2:	5382           	subql #1,%d2
    21b4:	64d8           	bccs 218e <__cxa_finalize+0x28>
        }
    }
}
    21b6:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    21ba:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    21bc:	b6aa 0008      	cmpl %a2@(8),%d3
    21c0:	67d0           	beqs 2192 <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    21c2:	45ea fff2      	lea %a2@(-14),%a2
    21c6:	51ca fff4      	dbf %d2,21bc <__cxa_finalize+0x56>
    21ca:	4242           	clrw %d2
    21cc:	5382           	subql #1,%d2
    21ce:	64ec           	bccs 21bc <__cxa_finalize+0x56>
}
    21d0:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    21d4:	4e75           	rts
