
whetstone.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 5de0 	movel #24032,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,5e30 <SAVE_PROG_EXIT>
    2048:	5e30 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 4a0e 	lea 4a0e <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 21ba 	lea 21ba <kmain>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 5e30 	movel 5e30 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 4a3a 	lea 4a3a <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 5dc0 	lea 5dc0 <crbuf>,%a2
    208a:	47f9 0000 5dc0 	lea 5dc0 <crbuf>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 5dc0 	lea 5dc0 <crbuf>,%a2
    20ac:	47f9 0000 5dc0 	lea 5dc0 <crbuf>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <sin>:
})
#endif

__inline extern double
sin (double x)
{
    20c4:	518f           	subql #8,%sp
  double value;

  __asm ("fsin%.x %1,%0"
    20c6:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    20cc:	f200 000e      	fsinx %fp0,%fp0
    20d0:	f217 7400      	fmoved %fp0,%sp@
	 : "=f" (value)
	 : "f" (x));
  return value;
    20d4:	2017           	movel %sp@,%d0
    20d6:	222f 0004      	movel %sp@(4),%d1
    20da:	2f01           	movel %d1,%sp@-
    20dc:	2f00           	movel %d0,%sp@-
    20de:	f21f 5400      	fmoved %sp@+,%fp0
}
    20e2:	508f           	addql #8,%sp
    20e4:	4e75           	rts

000020e6 <cos>:

__inline extern double
cos (double x)
{
    20e6:	518f           	subql #8,%sp
  double value;

  __asm ("fcos%.x %1,%0"
    20e8:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    20ee:	f200 001d      	fcosx %fp0,%fp0
    20f2:	f217 7400      	fmoved %fp0,%sp@
	 : "=f" (value)
	 : "f" (x));
  return value;
    20f6:	2017           	movel %sp@,%d0
    20f8:	222f 0004      	movel %sp@(4),%d1
    20fc:	2f01           	movel %d1,%sp@-
    20fe:	2f00           	movel %d0,%sp@-
    2100:	f21f 5400      	fmoved %sp@+,%fp0
}
    2104:	508f           	addql #8,%sp
    2106:	4e75           	rts

00002108 <atan>:
  return value;
}

__inline extern double
atan (double x)
{
    2108:	518f           	subql #8,%sp
  double value;

  __asm ("fatan%.x %1,%0"
    210a:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    2110:	f200 000a      	fatanx %fp0,%fp0
    2114:	f217 7400      	fmoved %fp0,%sp@
	 : "=f" (value)
	 : "f" (x));
  return value;
    2118:	2017           	movel %sp@,%d0
    211a:	222f 0004      	movel %sp@(4),%d1
    211e:	2f01           	movel %d1,%sp@-
    2120:	2f00           	movel %d0,%sp@-
    2122:	f21f 5400      	fmoved %sp@+,%fp0
}
    2126:	508f           	addql #8,%sp
    2128:	4e75           	rts

0000212a <exp>:
  return value;
}

__inline extern double
exp (double x)
{
    212a:	518f           	subql #8,%sp
  double value;

  __asm ("fetox%.x %1,%0"
    212c:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    2132:	f200 0010      	fetoxx %fp0,%fp0
    2136:	f217 7400      	fmoved %fp0,%sp@
	 : "=f" (value)
	 : "f" (x));
  return value;
    213a:	2017           	movel %sp@,%d0
    213c:	222f 0004      	movel %sp@(4),%d1
    2140:	2f01           	movel %d1,%sp@-
    2142:	2f00           	movel %d0,%sp@-
    2144:	f21f 5400      	fmoved %sp@+,%fp0
}
    2148:	508f           	addql #8,%sp
    214a:	4e75           	rts

0000214c <log>:
  return value;
}

__inline extern double
log (double x)
{
    214c:	518f           	subql #8,%sp
  double value;

  __asm ("flogn%.x %1,%0"
    214e:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    2154:	f200 0014      	flognx %fp0,%fp0
    2158:	f217 7400      	fmoved %fp0,%sp@
	 : "=f" (value)
	 : "f" (x));
  return value;
    215c:	2017           	movel %sp@,%d0
    215e:	222f 0004      	movel %sp@(4),%d1
    2162:	2f01           	movel %d1,%sp@-
    2164:	2f00           	movel %d0,%sp@-
    2166:	f21f 5400      	fmoved %sp@+,%fp0
}
    216a:	508f           	addql #8,%sp
    216c:	4e75           	rts

0000216e <sqrt>:
  return value;
}

__inline extern double
sqrt (double x)
{
    216e:	518f           	subql #8,%sp
  double value;

  __asm ("fsqrt%.x %1,%0"
    2170:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    2176:	f200 0004      	fsqrtx %fp0,%fp0
    217a:	f217 7400      	fmoved %fp0,%sp@
	 : "=f" (value)
	 : "f" (x));
  return value;
    217e:	2017           	movel %sp@,%d0
    2180:	222f 0004      	movel %sp@(4),%d1
    2184:	2f01           	movel %d1,%sp@-
    2186:	2f00           	movel %d0,%sp@-
    2188:	f21f 5400      	fmoved %sp@+,%fp0
}
    218c:	508f           	addql #8,%sp
    218e:	4e75           	rts

00002190 <gettimer>:
#define _TIMER_100HZ  0x40c
#endif

int gettimer() {
#ifdef ROSCO
    return *(int *)_TIMER_100HZ;
    2190:	307c 040c      	moveaw #1036,%a0
    2194:	2010           	movel %a0@,%d0
#else
    return 0;
#endif
}
    2196:	4e75           	rts

00002198 <getduration>:

// Returns the number of 100ths of a second passed
int getduration(int start, int end) {
    return (end > start) ? (end - start) : (0xFFFF - start + end);
    2198:	202f 0008      	movel %sp@(8),%d0
    219c:	b0af 0004      	cmpl %sp@(4),%d0
    21a0:	6f0a           	bles 21ac <getduration+0x14>
    21a2:	202f 0008      	movel %sp@(8),%d0
    21a6:	90af 0004      	subl %sp@(4),%d0
    21aa:	600c           	bras 21b8 <getduration+0x20>
    21ac:	7000           	moveq #0,%d0
    21ae:	4640           	notw %d0
    21b0:	90af 0004      	subl %sp@(4),%d0
    21b4:	d0af 0008      	addl %sp@(8),%d0
}
    21b8:	4e75           	rts

000021ba <kmain>:
#ifdef ROSCO
int kmain()
#else
int main()
#endif
{
    21ba:	4fef ff78      	lea %sp@(-136),%sp
    21be:	f227 e01c      	fmovemx %fp2-%fp4,%sp@-
    21c2:	48e7 3f00      	moveml %d2-%d7,%sp@-
	long loopstart;
	int start, end;
	float KIPS;
	int continuous;

	loopstart = 10000;		/* see the note about LOOP below */
    21c6:	2f7c 0000 2710 	movel #10000,%sp@(136)
    21cc:	0088 
	continuous = 0;
    21ce:	42af 0084      	clrl %sp@(132)

#ifdef PRINTOUT
    printf("loopstart %ld, continuous %d\n", loopstart, continuous);
    21d2:	2f2f 0084      	movel %sp@(132),%sp@-
    21d6:	2f2f 008c      	movel %sp@(140),%sp@-
    21da:	4879 0000 5c32 	pea 5c32 <__gedf2+0x22>
    21e0:	4eb9 0000 4992 	jsr 4992 <printf_>
    21e6:	4fef 000c      	lea %sp@(12),%sp
/*
C
C	Start benchmark timing at this point.
C
*/
	start = gettimer();
    21ea:	4eb9 0000 2190 	jsr 2190 <gettimer>
    21f0:	2f40 0080      	movel %d0,%sp@(128)
/*
C
C	The actual benchmark starts here.
C
*/
	T  = .499975;
    21f4:	23fc 3fdf ff97 	movel #1071644567,5de0 <T>
    21fa:	0000 5de0 
    21fe:	23fc 2474 538f 	movel #611603343,5de4 <T+0x4>
    2204:	0000 5de4 
	T1 = 0.50025;
    2208:	23fc 3fe0 020c 	movel #1071645196,5de8 <T1>
    220e:	0000 5de8 
    2212:	23fc 49ba 5e35 	movel #1236950581,5dec <T1+0x4>
    2218:	0000 5dec 
	T2 = 2.0;
    221c:	23fc 4000 0000 	movel #1073741824,5df0 <T2>
    2222:	0000 5df0 
    2226:	42b9 0000 5df4 	clrl 5df4 <T2+0x4>
C	will be executed in EACH MAJOR LOOP..A MAJOR LOOP IS EXECUTED
C	'II' TIMES TO INCREASE WALL-CLOCK TIMING ACCURACY.
C
	LOOP = 1000;
*/
	LOOP = loopstart;
    222c:	2f6f 0088 007c 	movel %sp@(136),%sp@(124)
	II   = 1;
    2232:	7001           	moveq #1,%d0
    2234:	2f40 0078      	movel %d0,%sp@(120)

	JJ = 1;
    2238:	7201           	moveq #1,%d1
    223a:	2f41 008c      	movel %d1,%sp@(140)

IILOOP:
	N1  = 0;
    223e:	42af 0074      	clrl %sp@(116)
	N2  = 12 * LOOP;
    2242:	222f 007c      	movel %sp@(124),%d1
    2246:	2001           	movel %d1,%d0
    2248:	d080           	addl %d0,%d0
    224a:	d081           	addl %d1,%d0
    224c:	e588           	lsll #2,%d0
    224e:	2f40 0070      	movel %d0,%sp@(112)
	N3  = 14 * LOOP;
    2252:	222f 007c      	movel %sp@(124),%d1
    2256:	2001           	movel %d1,%d0
    2258:	e788           	lsll #3,%d0
    225a:	9081           	subl %d1,%d0
    225c:	d080           	addl %d0,%d0
    225e:	2f40 006c      	movel %d0,%sp@(108)
	N4  = 345 * LOOP;
    2262:	222f 007c      	movel %sp@(124),%d1
    2266:	2001           	movel %d1,%d0
    2268:	d080           	addl %d0,%d0
    226a:	d081           	addl %d1,%d0
    226c:	e788           	lsll #3,%d0
    226e:	9081           	subl %d1,%d0
    2270:	2200           	movel %d0,%d1
    2272:	e989           	lsll #4,%d1
    2274:	2401           	movel %d1,%d2
    2276:	9480           	subl %d0,%d2
    2278:	2f42 0068      	movel %d2,%sp@(104)
	N6  = 210 * LOOP;
    227c:	222f 007c      	movel %sp@(124),%d1
    2280:	2001           	movel %d1,%d0
    2282:	e788           	lsll #3,%d0
    2284:	9081           	subl %d1,%d0
    2286:	2200           	movel %d0,%d1
    2288:	e989           	lsll #4,%d1
    228a:	9280           	subl %d0,%d1
    228c:	2001           	movel %d1,%d0
    228e:	d080           	addl %d0,%d0
    2290:	2200           	movel %d0,%d1
    2292:	2f41 0064      	movel %d1,%sp@(100)
	N7  = 32 * LOOP;
    2296:	202f 007c      	movel %sp@(124),%d0
    229a:	eb88           	lsll #5,%d0
    229c:	2f40 0060      	movel %d0,%sp@(96)
	N8  = 899 * LOOP;
    22a0:	222f 007c      	movel %sp@(124),%d1
    22a4:	2001           	movel %d1,%d0
    22a6:	e788           	lsll #3,%d0
    22a8:	9081           	subl %d1,%d0
    22aa:	eb88           	lsll #5,%d0
    22ac:	d081           	addl %d1,%d0
    22ae:	e588           	lsll #2,%d0
    22b0:	2400           	movel %d0,%d2
    22b2:	9481           	subl %d1,%d2
    22b4:	2f42 005c      	movel %d2,%sp@(92)
	N9  = 616 * LOOP;
    22b8:	222f 007c      	movel %sp@(124),%d1
    22bc:	2001           	movel %d1,%d0
    22be:	e588           	lsll #2,%d0
    22c0:	d081           	addl %d1,%d0
    22c2:	e588           	lsll #2,%d0
    22c4:	9081           	subl %d1,%d0
    22c6:	e588           	lsll #2,%d0
    22c8:	d081           	addl %d1,%d0
    22ca:	e788           	lsll #3,%d0
    22cc:	2f40 0058      	movel %d0,%sp@(88)
	N10 = 0;
    22d0:	42af 0054      	clrl %sp@(84)
	N11 = 93 * LOOP;
    22d4:	222f 007c      	movel %sp@(124),%d1
    22d8:	2001           	movel %d1,%d0
    22da:	d080           	addl %d0,%d0
    22dc:	d081           	addl %d1,%d0
    22de:	2200           	movel %d0,%d1
    22e0:	eb89           	lsll #5,%d1
    22e2:	2401           	movel %d1,%d2
    22e4:	9480           	subl %d0,%d2
    22e6:	2f42 0050      	movel %d2,%sp@(80)
/*
C
C	Module 1: Simple identifiers
C
*/
	X1  =  1.0;
    22ea:	2f7c 3ff0 0000 	movel #1072693248,%sp@(184)
    22f0:	00b8 
    22f2:	42af 00bc      	clrl %sp@(188)
	X2  = -1.0;
    22f6:	2f7c bff0 0000 	movel #-1074790400,%sp@(176)
    22fc:	00b0 
    22fe:	42af 00b4      	clrl %sp@(180)
	X3  = -1.0;
    2302:	2f7c bff0 0000 	movel #-1074790400,%sp@(168)
    2308:	00a8 
    230a:	42af 00ac      	clrl %sp@(172)
	X4  = -1.0;
    230e:	2f7c bff0 0000 	movel #-1074790400,%sp@(160)
    2314:	00a0 
    2316:	42af 00a4      	clrl %sp@(164)

	for (I = 1; I <= N1; I++) {
    231a:	7001           	moveq #1,%d0
    231c:	2f40 00c0      	movel %d0,%sp@(192)
    2320:	6000 011a      	braw 243c <kmain+0x282>
	    X1 = (X1 + X2 + X3 - X4) * T;
    2324:	f22f 5480 00b8 	fmoved %sp@(184),%fp1
    232a:	f22f 5400 00b0 	fmoved %sp@(176),%fp0
    2330:	f200 00a2      	faddx %fp0,%fp1
    2334:	f22f 5400 00a8 	fmoved %sp@(168),%fp0
    233a:	f200 0422      	faddx %fp1,%fp0
    233e:	f22f 5480 00a0 	fmoved %sp@(160),%fp1
    2344:	f200 0428      	fsubx %fp1,%fp0
    2348:	2039 0000 5de0 	movel 5de0 <T>,%d0
    234e:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    2354:	2f01           	movel %d1,%sp@-
    2356:	2f00           	movel %d0,%sp@-
    2358:	f21f 5480      	fmoved %sp@+,%fp1
    235c:	f200 0423      	fmulx %fp1,%fp0
    2360:	f22f 7400 00b8 	fmoved %fp0,%sp@(184)
	    X2 = (X1 + X2 - X3 + X4) * T;
    2366:	f22f 5480 00b8 	fmoved %sp@(184),%fp1
    236c:	f22f 5400 00b0 	fmoved %sp@(176),%fp0
    2372:	f200 0422      	faddx %fp1,%fp0
    2376:	f22f 5500 00a8 	fmoved %sp@(168),%fp2
    237c:	f200 0080      	fmovex %fp0,%fp1
    2380:	f200 08a8      	fsubx %fp2,%fp1
    2384:	f22f 5400 00a0 	fmoved %sp@(160),%fp0
    238a:	f200 0422      	faddx %fp1,%fp0
    238e:	2039 0000 5de0 	movel 5de0 <T>,%d0
    2394:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    239a:	2f01           	movel %d1,%sp@-
    239c:	2f00           	movel %d0,%sp@-
    239e:	f21f 5480      	fmoved %sp@+,%fp1
    23a2:	f200 0423      	fmulx %fp1,%fp0
    23a6:	f22f 7400 00b0 	fmoved %fp0,%sp@(176)
	    X3 = (X1 - X2 + X3 + X4) * T;
    23ac:	f22f 5400 00b8 	fmoved %sp@(184),%fp0
    23b2:	f22f 5500 00b0 	fmoved %sp@(176),%fp2
    23b8:	f200 0080      	fmovex %fp0,%fp1
    23bc:	f200 08a8      	fsubx %fp2,%fp1
    23c0:	f22f 5400 00a8 	fmoved %sp@(168),%fp0
    23c6:	f200 00a2      	faddx %fp0,%fp1
    23ca:	f22f 5400 00a0 	fmoved %sp@(160),%fp0
    23d0:	f200 0422      	faddx %fp1,%fp0
    23d4:	2039 0000 5de0 	movel 5de0 <T>,%d0
    23da:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    23e0:	2f01           	movel %d1,%sp@-
    23e2:	2f00           	movel %d0,%sp@-
    23e4:	f21f 5480      	fmoved %sp@+,%fp1
    23e8:	f200 0423      	fmulx %fp1,%fp0
    23ec:	f22f 7400 00a8 	fmoved %fp0,%sp@(168)
	    X4 = (-X1+ X2 + X3 + X4) * T;
    23f2:	f22f 541a 00b8 	fnegd %sp@(184),%fp0
    23f8:	f200 0080      	fmovex %fp0,%fp1
    23fc:	f22f 5400 00b0 	fmoved %sp@(176),%fp0
    2402:	f200 00a2      	faddx %fp0,%fp1
    2406:	f22f 5400 00a8 	fmoved %sp@(168),%fp0
    240c:	f200 00a2      	faddx %fp0,%fp1
    2410:	f22f 5400 00a0 	fmoved %sp@(160),%fp0
    2416:	f200 0422      	faddx %fp1,%fp0
    241a:	2039 0000 5de0 	movel 5de0 <T>,%d0
    2420:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    2426:	2f01           	movel %d1,%sp@-
    2428:	2f00           	movel %d0,%sp@-
    242a:	f21f 5480      	fmoved %sp@+,%fp1
    242e:	f200 0423      	fmulx %fp1,%fp0
    2432:	f22f 7400 00a0 	fmoved %fp0,%sp@(160)
	for (I = 1; I <= N1; I++) {
    2438:	52af 00c0      	addql #1,%sp@(192)
    243c:	222f 00c0      	movel %sp@(192),%d1
    2440:	b2af 0074      	cmpl %sp@(116),%d1
    2444:	6f00 fede      	blew 2324 <kmain+0x16a>
	}
#ifdef PRINTOUT
	IF (JJ==II)POUT(N1,N1,N1,X1,X2,X3,X4);
    2448:	242f 008c      	movel %sp@(140),%d2
    244c:	b4af 0078      	cmpl %sp@(120),%d2
    2450:	6636           	bnes 2488 <kmain+0x2ce>
    2452:	2f2f 00a4      	movel %sp@(164),%sp@-
    2456:	2f2f 00a4      	movel %sp@(164),%sp@-
    245a:	2f2f 00b4      	movel %sp@(180),%sp@-
    245e:	2f2f 00b4      	movel %sp@(180),%sp@-
    2462:	2f2f 00c4      	movel %sp@(196),%sp@-
    2466:	2f2f 00c4      	movel %sp@(196),%sp@-
    246a:	2f2f 00d4      	movel %sp@(212),%sp@-
    246e:	2f2f 00d4      	movel %sp@(212),%sp@-
    2472:	2f2f 0094      	movel %sp@(148),%sp@-
    2476:	2f2f 0098      	movel %sp@(152),%sp@-
    247a:	2f2f 009c      	movel %sp@(156),%sp@-
    247e:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2484:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 2: Array elements
C
*/
	E1[1] =  1.0;
    2488:	23fc 3ff0 0000 	movel #1072693248,5e00 <E1+0x8>
    248e:	0000 5e00 
    2492:	42b9 0000 5e04 	clrl 5e04 <E1+0xc>
	E1[2] = -1.0;
    2498:	23fc bff0 0000 	movel #-1074790400,5e08 <E1+0x10>
    249e:	0000 5e08 
    24a2:	42b9 0000 5e0c 	clrl 5e0c <E1+0x14>
	E1[3] = -1.0;
    24a8:	23fc bff0 0000 	movel #-1074790400,5e10 <E1+0x18>
    24ae:	0000 5e10 
    24b2:	42b9 0000 5e14 	clrl 5e14 <E1+0x1c>
	E1[4] = -1.0;
    24b8:	23fc bff0 0000 	movel #-1074790400,5e18 <E1+0x20>
    24be:	0000 5e18 
    24c2:	42b9 0000 5e1c 	clrl 5e1c <E1+0x24>

	for (I = 1; I <= N2; I++) {
    24c8:	7001           	moveq #1,%d0
    24ca:	2f40 00c0      	movel %d0,%sp@(192)
    24ce:	6000 03d8      	braw 28a8 <kmain+0x6ee>
        POUT(N2,I,N2,E1[1],E1[2],E1[3],E1[4]);
    24d2:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    24d8:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    24de:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    24e4:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    24ea:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    24f0:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    24f6:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    24fc:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    2502:	2f05           	movel %d5,%sp@-
    2504:	2f04           	movel %d4,%sp@-
    2506:	2f03           	movel %d3,%sp@-
    2508:	2f02           	movel %d2,%sp@-
    250a:	2f09           	movel %a1,%sp@-
    250c:	2f08           	movel %a0,%sp@-
    250e:	2f01           	movel %d1,%sp@-
    2510:	2f00           	movel %d0,%sp@-
    2512:	2f2f 0090      	movel %sp@(144),%sp@-
    2516:	2f2f 00e4      	movel %sp@(228),%sp@-
    251a:	2f2f 0098      	movel %sp@(152),%sp@-
    251e:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2524:	4fef 002c      	lea %sp@(44),%sp

	    E1[1] = ( E1[1] + E1[2] + E1[3] - E1[4]) * T;
    2528:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    252e:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    2534:	2f01           	movel %d1,%sp@-
    2536:	2f00           	movel %d0,%sp@-
    2538:	f21f 5480      	fmoved %sp@+,%fp1
    253c:	2039 0000 5e08 	movel 5e08 <E1+0x10>,%d0
    2542:	2239 0000 5e0c 	movel 5e0c <E1+0x14>,%d1
    2548:	2f01           	movel %d1,%sp@-
    254a:	2f00           	movel %d0,%sp@-
    254c:	f21f 5400      	fmoved %sp@+,%fp0
    2550:	f200 0422      	faddx %fp1,%fp0
    2554:	2039 0000 5e10 	movel 5e10 <E1+0x18>,%d0
    255a:	2239 0000 5e14 	movel 5e14 <E1+0x1c>,%d1
    2560:	2f01           	movel %d1,%sp@-
    2562:	2f00           	movel %d0,%sp@-
    2564:	f21f 5480      	fmoved %sp@+,%fp1
    2568:	f200 0422      	faddx %fp1,%fp0
    256c:	2039 0000 5e18 	movel 5e18 <E1+0x20>,%d0
    2572:	2239 0000 5e1c 	movel 5e1c <E1+0x24>,%d1
    2578:	2f01           	movel %d1,%sp@-
    257a:	2f00           	movel %d0,%sp@-
    257c:	f21f 5480      	fmoved %sp@+,%fp1
    2580:	f200 0428      	fsubx %fp1,%fp0
    2584:	2039 0000 5de0 	movel 5de0 <T>,%d0
    258a:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    2590:	2f01           	movel %d1,%sp@-
    2592:	2f00           	movel %d0,%sp@-
    2594:	f21f 5480      	fmoved %sp@+,%fp1
    2598:	f200 0423      	fmulx %fp1,%fp0
    259c:	f227 7400      	fmoved %fp0,%sp@-
    25a0:	201f           	movel %sp@+,%d0
    25a2:	221f           	movel %sp@+,%d1
    25a4:	23c0 0000 5e00 	movel %d0,5e00 <E1+0x8>
    25aa:	23c1 0000 5e04 	movel %d1,5e04 <E1+0xc>
        POUT(N2,I,N2,E1[1],E1[2],E1[3],E1[4]);
    25b0:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    25b6:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    25bc:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    25c2:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    25c8:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    25ce:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    25d4:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    25da:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    25e0:	2f05           	movel %d5,%sp@-
    25e2:	2f04           	movel %d4,%sp@-
    25e4:	2f03           	movel %d3,%sp@-
    25e6:	2f02           	movel %d2,%sp@-
    25e8:	2f09           	movel %a1,%sp@-
    25ea:	2f08           	movel %a0,%sp@-
    25ec:	2f01           	movel %d1,%sp@-
    25ee:	2f00           	movel %d0,%sp@-
    25f0:	2f2f 0090      	movel %sp@(144),%sp@-
    25f4:	2f2f 00e4      	movel %sp@(228),%sp@-
    25f8:	2f2f 0098      	movel %sp@(152),%sp@-
    25fc:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2602:	4fef 002c      	lea %sp@(44),%sp
	    E1[2] = ( E1[1] + E1[2] - E1[3] + E1[4]) * T;
    2606:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    260c:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    2612:	2f01           	movel %d1,%sp@-
    2614:	2f00           	movel %d0,%sp@-
    2616:	f21f 5480      	fmoved %sp@+,%fp1
    261a:	2039 0000 5e08 	movel 5e08 <E1+0x10>,%d0
    2620:	2239 0000 5e0c 	movel 5e0c <E1+0x14>,%d1
    2626:	2f01           	movel %d1,%sp@-
    2628:	2f00           	movel %d0,%sp@-
    262a:	f21f 5400      	fmoved %sp@+,%fp0
    262e:	f200 0422      	faddx %fp1,%fp0
    2632:	2039 0000 5e10 	movel 5e10 <E1+0x18>,%d0
    2638:	2239 0000 5e14 	movel 5e14 <E1+0x1c>,%d1
    263e:	2f01           	movel %d1,%sp@-
    2640:	2f00           	movel %d0,%sp@-
    2642:	f21f 5480      	fmoved %sp@+,%fp1
    2646:	f200 0428      	fsubx %fp1,%fp0
    264a:	2039 0000 5e18 	movel 5e18 <E1+0x20>,%d0
    2650:	2239 0000 5e1c 	movel 5e1c <E1+0x24>,%d1
    2656:	2f01           	movel %d1,%sp@-
    2658:	2f00           	movel %d0,%sp@-
    265a:	f21f 5480      	fmoved %sp@+,%fp1
    265e:	f200 0422      	faddx %fp1,%fp0
    2662:	2039 0000 5de0 	movel 5de0 <T>,%d0
    2668:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    266e:	2f01           	movel %d1,%sp@-
    2670:	2f00           	movel %d0,%sp@-
    2672:	f21f 5480      	fmoved %sp@+,%fp1
    2676:	f200 0423      	fmulx %fp1,%fp0
    267a:	f227 7400      	fmoved %fp0,%sp@-
    267e:	201f           	movel %sp@+,%d0
    2680:	221f           	movel %sp@+,%d1
    2682:	23c0 0000 5e08 	movel %d0,5e08 <E1+0x10>
    2688:	23c1 0000 5e0c 	movel %d1,5e0c <E1+0x14>
        POUT(N2,I,N2,E1[1],E1[2],E1[3],E1[4]);
    268e:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    2694:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    269a:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    26a0:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    26a6:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    26ac:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    26b2:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    26b8:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    26be:	2f05           	movel %d5,%sp@-
    26c0:	2f04           	movel %d4,%sp@-
    26c2:	2f03           	movel %d3,%sp@-
    26c4:	2f02           	movel %d2,%sp@-
    26c6:	2f09           	movel %a1,%sp@-
    26c8:	2f08           	movel %a0,%sp@-
    26ca:	2f01           	movel %d1,%sp@-
    26cc:	2f00           	movel %d0,%sp@-
    26ce:	2f2f 0090      	movel %sp@(144),%sp@-
    26d2:	2f2f 00e4      	movel %sp@(228),%sp@-
    26d6:	2f2f 0098      	movel %sp@(152),%sp@-
    26da:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    26e0:	4fef 002c      	lea %sp@(44),%sp
	    E1[3] = ( E1[1] - E1[2] + E1[3] + E1[4]) * T;
    26e4:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    26ea:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    26f0:	2f01           	movel %d1,%sp@-
    26f2:	2f00           	movel %d0,%sp@-
    26f4:	f21f 5400      	fmoved %sp@+,%fp0
    26f8:	2039 0000 5e08 	movel 5e08 <E1+0x10>,%d0
    26fe:	2239 0000 5e0c 	movel 5e0c <E1+0x14>,%d1
    2704:	2f01           	movel %d1,%sp@-
    2706:	2f00           	movel %d0,%sp@-
    2708:	f21f 5480      	fmoved %sp@+,%fp1
    270c:	f200 0428      	fsubx %fp1,%fp0
    2710:	2039 0000 5e10 	movel 5e10 <E1+0x18>,%d0
    2716:	2239 0000 5e14 	movel 5e14 <E1+0x1c>,%d1
    271c:	2f01           	movel %d1,%sp@-
    271e:	2f00           	movel %d0,%sp@-
    2720:	f21f 5480      	fmoved %sp@+,%fp1
    2724:	f200 0422      	faddx %fp1,%fp0
    2728:	2039 0000 5e18 	movel 5e18 <E1+0x20>,%d0
    272e:	2239 0000 5e1c 	movel 5e1c <E1+0x24>,%d1
    2734:	2f01           	movel %d1,%sp@-
    2736:	2f00           	movel %d0,%sp@-
    2738:	f21f 5480      	fmoved %sp@+,%fp1
    273c:	f200 0422      	faddx %fp1,%fp0
    2740:	2039 0000 5de0 	movel 5de0 <T>,%d0
    2746:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    274c:	2f01           	movel %d1,%sp@-
    274e:	2f00           	movel %d0,%sp@-
    2750:	f21f 5480      	fmoved %sp@+,%fp1
    2754:	f200 0423      	fmulx %fp1,%fp0
    2758:	f227 7400      	fmoved %fp0,%sp@-
    275c:	201f           	movel %sp@+,%d0
    275e:	221f           	movel %sp@+,%d1
    2760:	23c0 0000 5e10 	movel %d0,5e10 <E1+0x18>
    2766:	23c1 0000 5e14 	movel %d1,5e14 <E1+0x1c>
        POUT(N2,I,N2,E1[1],E1[2],E1[3],E1[4]);
    276c:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    2772:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    2778:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    277e:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    2784:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    278a:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    2790:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    2796:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    279c:	2f05           	movel %d5,%sp@-
    279e:	2f04           	movel %d4,%sp@-
    27a0:	2f03           	movel %d3,%sp@-
    27a2:	2f02           	movel %d2,%sp@-
    27a4:	2f09           	movel %a1,%sp@-
    27a6:	2f08           	movel %a0,%sp@-
    27a8:	2f01           	movel %d1,%sp@-
    27aa:	2f00           	movel %d0,%sp@-
    27ac:	2f2f 0090      	movel %sp@(144),%sp@-
    27b0:	2f2f 00e4      	movel %sp@(228),%sp@-
    27b4:	2f2f 0098      	movel %sp@(152),%sp@-
    27b8:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    27be:	4fef 002c      	lea %sp@(44),%sp
	    E1[4] = (-E1[1] + E1[2] + E1[3] + E1[4]) * T;
    27c2:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    27c8:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    27ce:	0840 001f      	bchg #31,%d0
    27d2:	2f01           	movel %d1,%sp@-
    27d4:	2f00           	movel %d0,%sp@-
    27d6:	f21f 5480      	fmoved %sp@+,%fp1
    27da:	2039 0000 5e08 	movel 5e08 <E1+0x10>,%d0
    27e0:	2239 0000 5e0c 	movel 5e0c <E1+0x14>,%d1
    27e6:	2f01           	movel %d1,%sp@-
    27e8:	2f00           	movel %d0,%sp@-
    27ea:	f21f 5400      	fmoved %sp@+,%fp0
    27ee:	f200 0422      	faddx %fp1,%fp0
    27f2:	2039 0000 5e10 	movel 5e10 <E1+0x18>,%d0
    27f8:	2239 0000 5e14 	movel 5e14 <E1+0x1c>,%d1
    27fe:	2f01           	movel %d1,%sp@-
    2800:	2f00           	movel %d0,%sp@-
    2802:	f21f 5480      	fmoved %sp@+,%fp1
    2806:	f200 0422      	faddx %fp1,%fp0
    280a:	2039 0000 5e18 	movel 5e18 <E1+0x20>,%d0
    2810:	2239 0000 5e1c 	movel 5e1c <E1+0x24>,%d1
    2816:	2f01           	movel %d1,%sp@-
    2818:	2f00           	movel %d0,%sp@-
    281a:	f21f 5480      	fmoved %sp@+,%fp1
    281e:	f200 0422      	faddx %fp1,%fp0
    2822:	2039 0000 5de0 	movel 5de0 <T>,%d0
    2828:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    282e:	2f01           	movel %d1,%sp@-
    2830:	2f00           	movel %d0,%sp@-
    2832:	f21f 5480      	fmoved %sp@+,%fp1
    2836:	f200 0423      	fmulx %fp1,%fp0
    283a:	f227 7400      	fmoved %fp0,%sp@-
    283e:	201f           	movel %sp@+,%d0
    2840:	221f           	movel %sp@+,%d1
    2842:	23c0 0000 5e18 	movel %d0,5e18 <E1+0x20>
    2848:	23c1 0000 5e1c 	movel %d1,5e1c <E1+0x24>
        POUT(N2,I,N2,E1[1],E1[2],E1[3],E1[4]);
    284e:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    2854:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    285a:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    2860:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    2866:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    286c:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    2872:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    2878:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    287e:	2f05           	movel %d5,%sp@-
    2880:	2f04           	movel %d4,%sp@-
    2882:	2f03           	movel %d3,%sp@-
    2884:	2f02           	movel %d2,%sp@-
    2886:	2f09           	movel %a1,%sp@-
    2888:	2f08           	movel %a0,%sp@-
    288a:	2f01           	movel %d1,%sp@-
    288c:	2f00           	movel %d0,%sp@-
    288e:	2f2f 0090      	movel %sp@(144),%sp@-
    2892:	2f2f 00e4      	movel %sp@(228),%sp@-
    2896:	2f2f 0098      	movel %sp@(152),%sp@-
    289a:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    28a0:	4fef 002c      	lea %sp@(44),%sp
	for (I = 1; I <= N2; I++) {
    28a4:	52af 00c0      	addql #1,%sp@(192)
    28a8:	222f 00c0      	movel %sp@(192),%d1
    28ac:	b2af 0070      	cmpl %sp@(112),%d1
    28b0:	6f00 fc20      	blew 24d2 <kmain+0x318>
	}

#ifdef PRINTOUT
	IF (JJ==II)POUT(N2,N3,N2,E1[1],E1[2],E1[3],E1[4]);
    28b4:	242f 008c      	movel %sp@(140),%d2
    28b8:	b4af 0078      	cmpl %sp@(120),%d2
    28bc:	6656           	bnes 2914 <kmain+0x75a>
    28be:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    28c4:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    28ca:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    28d0:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    28d6:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    28dc:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    28e2:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    28e8:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    28ee:	2f05           	movel %d5,%sp@-
    28f0:	2f04           	movel %d4,%sp@-
    28f2:	2f03           	movel %d3,%sp@-
    28f4:	2f02           	movel %d2,%sp@-
    28f6:	2f09           	movel %a1,%sp@-
    28f8:	2f08           	movel %a0,%sp@-
    28fa:	2f01           	movel %d1,%sp@-
    28fc:	2f00           	movel %d0,%sp@-
    28fe:	2f2f 0090      	movel %sp@(144),%sp@-
    2902:	2f2f 0090      	movel %sp@(144),%sp@-
    2906:	2f2f 0098      	movel %sp@(152),%sp@-
    290a:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2910:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 3: Array as parameter
C
*/
	for (I = 1; I <= N3; I++)
    2914:	7001           	moveq #1,%d0
    2916:	2f40 00c0      	movel %d0,%sp@(192)
    291a:	6012           	bras 292e <kmain+0x774>
		PA(E1);
    291c:	4879 0000 5df8 	pea 5df8 <E1>
    2922:	4eb9 0000 3258 	jsr 3258 <PA>
    2928:	588f           	addql #4,%sp
	for (I = 1; I <= N3; I++)
    292a:	52af 00c0      	addql #1,%sp@(192)
    292e:	222f 00c0      	movel %sp@(192),%d1
    2932:	b2af 006c      	cmpl %sp@(108),%d1
    2936:	6fe4           	bles 291c <kmain+0x762>

#ifdef PRINTOUT
	IF (JJ==II)POUT(N3,N2,N2,E1[1],E1[2],E1[3],E1[4]);
    2938:	242f 008c      	movel %sp@(140),%d2
    293c:	b4af 0078      	cmpl %sp@(120),%d2
    2940:	6656           	bnes 2998 <kmain+0x7de>
    2942:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    2948:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    294e:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    2954:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    295a:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    2960:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    2966:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    296c:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    2972:	2f05           	movel %d5,%sp@-
    2974:	2f04           	movel %d4,%sp@-
    2976:	2f03           	movel %d3,%sp@-
    2978:	2f02           	movel %d2,%sp@-
    297a:	2f09           	movel %a1,%sp@-
    297c:	2f08           	movel %a0,%sp@-
    297e:	2f01           	movel %d1,%sp@-
    2980:	2f00           	movel %d0,%sp@-
    2982:	2f2f 0090      	movel %sp@(144),%sp@-
    2986:	2f2f 0094      	movel %sp@(148),%sp@-
    298a:	2f2f 0094      	movel %sp@(148),%sp@-
    298e:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2994:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 4: Conditional jumps
C
*/
	J = 1;
    2998:	7001           	moveq #1,%d0
    299a:	23c0 0000 5e20 	movel %d0,5e20 <J>
	for (I = 1; I <= N4; I++) {
    29a0:	7201           	moveq #1,%d1
    29a2:	2f41 00c0      	movel %d1,%sp@(192)
    29a6:	6056           	bras 29fe <kmain+0x844>
		if (J == 1)
    29a8:	2039 0000 5e20 	movel 5e20 <J>,%d0
    29ae:	7401           	moveq #1,%d2
    29b0:	b480           	cmpl %d0,%d2
    29b2:	660a           	bnes 29be <kmain+0x804>
			J = 2;
    29b4:	7002           	moveq #2,%d0
    29b6:	23c0 0000 5e20 	movel %d0,5e20 <J>
    29bc:	6008           	bras 29c6 <kmain+0x80c>
		else
			J = 3;
    29be:	7203           	moveq #3,%d1
    29c0:	23c1 0000 5e20 	movel %d1,5e20 <J>

		if (J > 2)
    29c6:	2039 0000 5e20 	movel 5e20 <J>,%d0
    29cc:	7402           	moveq #2,%d2
    29ce:	b480           	cmpl %d0,%d2
    29d0:	6c08           	bges 29da <kmain+0x820>
			J = 0;
    29d2:	42b9 0000 5e20 	clrl 5e20 <J>
    29d8:	6008           	bras 29e2 <kmain+0x828>
		else
			J = 1;
    29da:	7001           	moveq #1,%d0
    29dc:	23c0 0000 5e20 	movel %d0,5e20 <J>

		if (J < 1)
    29e2:	2039 0000 5e20 	movel 5e20 <J>,%d0
    29e8:	6e0a           	bgts 29f4 <kmain+0x83a>
			J = 1;
    29ea:	7201           	moveq #1,%d1
    29ec:	23c1 0000 5e20 	movel %d1,5e20 <J>
    29f2:	6006           	bras 29fa <kmain+0x840>
		else
			J = 0;
    29f4:	42b9 0000 5e20 	clrl 5e20 <J>
	for (I = 1; I <= N4; I++) {
    29fa:	52af 00c0      	addql #1,%sp@(192)
    29fe:	242f 00c0      	movel %sp@(192),%d2
    2a02:	b4af 0068      	cmpl %sp@(104),%d2
    2a06:	6fa0           	bles 29a8 <kmain+0x7ee>
	}

#ifdef PRINTOUT
	IF (JJ==II)POUT(N4,J,J,X1,X2,X3,X4);
    2a08:	202f 008c      	movel %sp@(140),%d0
    2a0c:	b0af 0078      	cmpl %sp@(120),%d0
    2a10:	663e           	bnes 2a50 <kmain+0x896>
    2a12:	2239 0000 5e20 	movel 5e20 <J>,%d1
    2a18:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2a1e:	2f2f 00a4      	movel %sp@(164),%sp@-
    2a22:	2f2f 00a4      	movel %sp@(164),%sp@-
    2a26:	2f2f 00b4      	movel %sp@(180),%sp@-
    2a2a:	2f2f 00b4      	movel %sp@(180),%sp@-
    2a2e:	2f2f 00c4      	movel %sp@(196),%sp@-
    2a32:	2f2f 00c4      	movel %sp@(196),%sp@-
    2a36:	2f2f 00d4      	movel %sp@(212),%sp@-
    2a3a:	2f2f 00d4      	movel %sp@(212),%sp@-
    2a3e:	2f01           	movel %d1,%sp@-
    2a40:	2f00           	movel %d0,%sp@-
    2a42:	2f2f 0090      	movel %sp@(144),%sp@-
    2a46:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2a4c:	4fef 002c      	lea %sp@(44),%sp
C	Module 5: Omitted
C 	Module 6: Integer arithmetic
C
*/

	J = 1;
    2a50:	7201           	moveq #1,%d1
    2a52:	23c1 0000 5e20 	movel %d1,5e20 <J>
	K = 2;
    2a58:	7402           	moveq #2,%d2
    2a5a:	23c2 0000 5e24 	movel %d2,5e24 <K>
	L = 3;
    2a60:	7003           	moveq #3,%d0
    2a62:	23c0 0000 5e28 	movel %d0,5e28 <L>

	for (I = 1; I <= N6; I++) {
    2a68:	7201           	moveq #1,%d1
    2a6a:	2f41 00c0      	movel %d1,%sp@(192)
    2a6e:	6000 00ec      	braw 2b5c <kmain+0x9a2>
	    J = J * (K-J) * (L-K);
    2a72:	2239 0000 5e24 	movel 5e24 <K>,%d1
    2a78:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2a7e:	9280           	subl %d0,%d1
    2a80:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2a86:	4c01           	.short 0x4c01
    2a88:	0800 2079      	btst #121,%d0
    2a8c:	0000 5e28      	orib #40,%d0
    2a90:	2239 0000 5e24 	movel 5e24 <K>,%d1
    2a96:	2408           	movel %a0,%d2
    2a98:	9481           	subl %d1,%d2
    2a9a:	4c02           	.short 0x4c02
    2a9c:	0800 23c0      	btst #-64,%d0
    2aa0:	0000 5e20      	orib #32,%d0
	    K = L * K - (L-J) * K;
    2aa4:	2239 0000 5e28 	movel 5e28 <L>,%d1
    2aaa:	2039 0000 5e24 	movel 5e24 <K>,%d0
    2ab0:	4c00           	.short 0x4c00
    2ab2:	1800           	moveb %d0,%d4
    2ab4:	2079 0000 5e28 	moveal 5e28 <L>,%a0
    2aba:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2ac0:	2408           	movel %a0,%d2
    2ac2:	9480           	subl %d0,%d2
    2ac4:	2039 0000 5e24 	movel 5e24 <K>,%d0
    2aca:	4c02           	.short 0x4c02
    2acc:	0800 9280      	btst #-128,%d0
    2ad0:	23c1 0000 5e24 	movel %d1,5e24 <K>
	    L = (L-K) * (K+J);
    2ad6:	2239 0000 5e28 	movel 5e28 <L>,%d1
    2adc:	2039 0000 5e24 	movel 5e24 <K>,%d0
    2ae2:	9280           	subl %d0,%d1
    2ae4:	2079 0000 5e24 	moveal 5e24 <K>,%a0
    2aea:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2af0:	d088           	addl %a0,%d0
    2af2:	4c01           	.short 0x4c01
    2af4:	0800 23c0      	btst #-64,%d0
    2af8:	0000 5e28      	orib #40,%d0
	    E1[L-1] = J + K + L;
    2afc:	2239 0000 5e20 	movel 5e20 <J>,%d1
    2b02:	2039 0000 5e24 	movel 5e24 <K>,%d0
    2b08:	d280           	addl %d0,%d1
    2b0a:	2039 0000 5e28 	movel 5e28 <L>,%d0
    2b10:	d280           	addl %d0,%d1
    2b12:	2039 0000 5e28 	movel 5e28 <L>,%d0
    2b18:	5380           	subql #1,%d0
    2b1a:	f201 4000      	fmovel %d1,%fp0
    2b1e:	f230 7400 0fb0 	fmoved %fp0,@(5df8,%d0:l:8)
    2b24:	0000 5df8 
	    E1[K-1] = J * K * L;
    2b28:	2239 0000 5e20 	movel 5e20 <J>,%d1
    2b2e:	2039 0000 5e24 	movel 5e24 <K>,%d0
    2b34:	4c01           	.short 0x4c01
    2b36:	0800 2239      	btst #57,%d0
    2b3a:	0000 5e28      	orib #40,%d0
    2b3e:	4c01           	.short 0x4c01
    2b40:	0800 2239      	btst #57,%d0
    2b44:	0000 5e24      	orib #36,%d0
    2b48:	5381           	subql #1,%d1
    2b4a:	f200 4000      	fmovel %d0,%fp0
    2b4e:	f230 7400 1fb0 	fmoved %fp0,@(5df8,%d1:l:8)
    2b54:	0000 5df8 
	for (I = 1; I <= N6; I++) {
    2b58:	52af 00c0      	addql #1,%sp@(192)
    2b5c:	242f 00c0      	movel %sp@(192),%d2
    2b60:	b4af 0064      	cmpl %sp@(100),%d2
    2b64:	6f00 ff0c      	blew 2a72 <kmain+0x8b8>
	}

#ifdef PRINTOUT
	IF (JJ==II)POUT(N6,J,K,E1[1],E1[2],E1[3],E1[4]);
    2b68:	202f 008c      	movel %sp@(140),%d0
    2b6c:	b0af 0078      	cmpl %sp@(120),%d0
    2b70:	665e           	bnes 2bd0 <kmain+0xa16>
    2b72:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    2b78:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    2b7e:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    2b84:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    2b8a:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    2b90:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    2b96:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    2b9c:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    2ba2:	2e39 0000 5e24 	movel 5e24 <K>,%d7
    2ba8:	2c39 0000 5e20 	movel 5e20 <J>,%d6
    2bae:	2f05           	movel %d5,%sp@-
    2bb0:	2f04           	movel %d4,%sp@-
    2bb2:	2f03           	movel %d3,%sp@-
    2bb4:	2f02           	movel %d2,%sp@-
    2bb6:	2f09           	movel %a1,%sp@-
    2bb8:	2f08           	movel %a0,%sp@-
    2bba:	2f01           	movel %d1,%sp@-
    2bbc:	2f00           	movel %d0,%sp@-
    2bbe:	2f07           	movel %d7,%sp@-
    2bc0:	2f06           	movel %d6,%sp@-
    2bc2:	2f2f 008c      	movel %sp@(140),%sp@-
    2bc6:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2bcc:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 7: Trigonometric functions
C
*/
	X = 0.5;
    2bd0:	2f7c 3fe0 0000 	movel #1071644672,%sp@(152)
    2bd6:	0098 
    2bd8:	42af 009c      	clrl %sp@(156)
	Y = 0.5;
    2bdc:	2f7c 3fe0 0000 	movel #1071644672,%sp@(144)
    2be2:	0090 
    2be4:	42af 0094      	clrl %sp@(148)

	for (I = 1; I <= N7; I++) {
    2be8:	7201           	moveq #1,%d1
    2bea:	2f41 00c0      	movel %d1,%sp@(192)
    2bee:	6000 01b2      	braw 2da2 <kmain+0xbe8>
		X = T * DATAN(T2*DSIN(X)*DCOS(X)/(DCOS(X+Y)+DCOS(X-Y)-1.0));
    2bf2:	2039 0000 5de0 	movel 5de0 <T>,%d0
    2bf8:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    2bfe:	2f01           	movel %d1,%sp@-
    2c00:	2f00           	movel %d0,%sp@-
    2c02:	f21f 5600      	fmoved %sp@+,%fp4
    2c06:	2039 0000 5df0 	movel 5df0 <T2>,%d0
    2c0c:	2239 0000 5df4 	movel 5df4 <T2+0x4>,%d1
    2c12:	2f01           	movel %d1,%sp@-
    2c14:	2f00           	movel %d0,%sp@-
    2c16:	f21f 5500      	fmoved %sp@+,%fp2
    2c1a:	2f2f 009c      	movel %sp@(156),%sp@-
    2c1e:	2f2f 009c      	movel %sp@(156),%sp@-
    2c22:	4eb9 0000 20c4 	jsr 20c4 <sin>
    2c28:	508f           	addql #8,%sp
    2c2a:	f200 0123      	fmulx %fp0,%fp2
    2c2e:	2f2f 009c      	movel %sp@(156),%sp@-
    2c32:	2f2f 009c      	movel %sp@(156),%sp@-
    2c36:	4eb9 0000 20e6 	jsr 20e6 <cos>
    2c3c:	508f           	addql #8,%sp
    2c3e:	f200 0123      	fmulx %fp0,%fp2
    2c42:	f22f 5480 0098 	fmoved %sp@(152),%fp1
    2c48:	f22f 5400 0090 	fmoved %sp@(144),%fp0
    2c4e:	f200 0422      	faddx %fp1,%fp0
    2c52:	f227 7400      	fmoved %fp0,%sp@-
    2c56:	201f           	movel %sp@+,%d0
    2c58:	221f           	movel %sp@+,%d1
    2c5a:	2f01           	movel %d1,%sp@-
    2c5c:	2f00           	movel %d0,%sp@-
    2c5e:	4eb9 0000 20e6 	jsr 20e6 <cos>
    2c64:	508f           	addql #8,%sp
    2c66:	f200 0180      	fmovex %fp0,%fp3
    2c6a:	f22f 5400 0098 	fmoved %sp@(152),%fp0
    2c70:	f22f 5480 0090 	fmoved %sp@(144),%fp1
    2c76:	f200 0428      	fsubx %fp1,%fp0
    2c7a:	f227 7400      	fmoved %fp0,%sp@-
    2c7e:	201f           	movel %sp@+,%d0
    2c80:	221f           	movel %sp@+,%d1
    2c82:	2f01           	movel %d1,%sp@-
    2c84:	2f00           	movel %d0,%sp@-
    2c86:	4eb9 0000 20e6 	jsr 20e6 <cos>
    2c8c:	508f           	addql #8,%sp
    2c8e:	f200 0c22      	faddx %fp3,%fp0
    2c92:	f239 4980 0000 	fmovex 5d1e <__gedf2+0x10e>,%fp3
    2c98:	5d1e 
    2c9a:	f200 0080      	fmovex %fp0,%fp1
    2c9e:	f200 0ca8      	fsubx %fp3,%fp1
    2ca2:	f200 0800      	fmovex %fp2,%fp0
    2ca6:	f200 0420      	fdivx %fp1,%fp0
    2caa:	f227 7400      	fmoved %fp0,%sp@-
    2cae:	201f           	movel %sp@+,%d0
    2cb0:	221f           	movel %sp@+,%d1
    2cb2:	2f01           	movel %d1,%sp@-
    2cb4:	2f00           	movel %d0,%sp@-
    2cb6:	4eb9 0000 2108 	jsr 2108 <atan>
    2cbc:	508f           	addql #8,%sp
    2cbe:	f200 1023      	fmulx %fp4,%fp0
    2cc2:	f22f 7400 0098 	fmoved %fp0,%sp@(152)
		Y = T * DATAN(T2*DSIN(Y)*DCOS(Y)/(DCOS(X+Y)+DCOS(X-Y)-1.0));
    2cc8:	2039 0000 5de0 	movel 5de0 <T>,%d0
    2cce:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    2cd4:	2f01           	movel %d1,%sp@-
    2cd6:	2f00           	movel %d0,%sp@-
    2cd8:	f21f 5600      	fmoved %sp@+,%fp4
    2cdc:	2039 0000 5df0 	movel 5df0 <T2>,%d0
    2ce2:	2239 0000 5df4 	movel 5df4 <T2+0x4>,%d1
    2ce8:	2f01           	movel %d1,%sp@-
    2cea:	2f00           	movel %d0,%sp@-
    2cec:	f21f 5500      	fmoved %sp@+,%fp2
    2cf0:	2f2f 0094      	movel %sp@(148),%sp@-
    2cf4:	2f2f 0094      	movel %sp@(148),%sp@-
    2cf8:	4eb9 0000 20c4 	jsr 20c4 <sin>
    2cfe:	508f           	addql #8,%sp
    2d00:	f200 0123      	fmulx %fp0,%fp2
    2d04:	2f2f 0094      	movel %sp@(148),%sp@-
    2d08:	2f2f 0094      	movel %sp@(148),%sp@-
    2d0c:	4eb9 0000 20e6 	jsr 20e6 <cos>
    2d12:	508f           	addql #8,%sp
    2d14:	f200 0123      	fmulx %fp0,%fp2
    2d18:	f22f 5480 0098 	fmoved %sp@(152),%fp1
    2d1e:	f22f 5400 0090 	fmoved %sp@(144),%fp0
    2d24:	f200 0422      	faddx %fp1,%fp0
    2d28:	f227 7400      	fmoved %fp0,%sp@-
    2d2c:	201f           	movel %sp@+,%d0
    2d2e:	221f           	movel %sp@+,%d1
    2d30:	2f01           	movel %d1,%sp@-
    2d32:	2f00           	movel %d0,%sp@-
    2d34:	4eb9 0000 20e6 	jsr 20e6 <cos>
    2d3a:	508f           	addql #8,%sp
    2d3c:	f200 0180      	fmovex %fp0,%fp3
    2d40:	f22f 5400 0098 	fmoved %sp@(152),%fp0
    2d46:	f22f 5480 0090 	fmoved %sp@(144),%fp1
    2d4c:	f200 0428      	fsubx %fp1,%fp0
    2d50:	f227 7400      	fmoved %fp0,%sp@-
    2d54:	201f           	movel %sp@+,%d0
    2d56:	221f           	movel %sp@+,%d1
    2d58:	2f01           	movel %d1,%sp@-
    2d5a:	2f00           	movel %d0,%sp@-
    2d5c:	4eb9 0000 20e6 	jsr 20e6 <cos>
    2d62:	508f           	addql #8,%sp
    2d64:	f200 0c22      	faddx %fp3,%fp0
    2d68:	f239 4980 0000 	fmovex 5d1e <__gedf2+0x10e>,%fp3
    2d6e:	5d1e 
    2d70:	f200 0080      	fmovex %fp0,%fp1
    2d74:	f200 0ca8      	fsubx %fp3,%fp1
    2d78:	f200 0800      	fmovex %fp2,%fp0
    2d7c:	f200 0420      	fdivx %fp1,%fp0
    2d80:	f227 7400      	fmoved %fp0,%sp@-
    2d84:	201f           	movel %sp@+,%d0
    2d86:	221f           	movel %sp@+,%d1
    2d88:	2f01           	movel %d1,%sp@-
    2d8a:	2f00           	movel %d0,%sp@-
    2d8c:	4eb9 0000 2108 	jsr 2108 <atan>
    2d92:	508f           	addql #8,%sp
    2d94:	f200 1023      	fmulx %fp4,%fp0
    2d98:	f22f 7400 0090 	fmoved %fp0,%sp@(144)
	for (I = 1; I <= N7; I++) {
    2d9e:	52af 00c0      	addql #1,%sp@(192)
    2da2:	242f 00c0      	movel %sp@(192),%d2
    2da6:	b4af 0060      	cmpl %sp@(96),%d2
    2daa:	6f00 fe46      	blew 2bf2 <kmain+0xa38>
	}

#ifdef PRINTOUT
	IF (JJ==II)POUT(N7,J,K,X,X,Y,Y);
    2dae:	202f 008c      	movel %sp@(140),%d0
    2db2:	b0af 0078      	cmpl %sp@(120),%d0
    2db6:	663e           	bnes 2df6 <kmain+0xc3c>
    2db8:	2239 0000 5e24 	movel 5e24 <K>,%d1
    2dbe:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2dc4:	2f2f 0094      	movel %sp@(148),%sp@-
    2dc8:	2f2f 0094      	movel %sp@(148),%sp@-
    2dcc:	2f2f 009c      	movel %sp@(156),%sp@-
    2dd0:	2f2f 009c      	movel %sp@(156),%sp@-
    2dd4:	2f2f 00ac      	movel %sp@(172),%sp@-
    2dd8:	2f2f 00ac      	movel %sp@(172),%sp@-
    2ddc:	2f2f 00b4      	movel %sp@(180),%sp@-
    2de0:	2f2f 00b4      	movel %sp@(180),%sp@-
    2de4:	2f01           	movel %d1,%sp@-
    2de6:	2f00           	movel %d0,%sp@-
    2de8:	2f2f 0088      	movel %sp@(136),%sp@-
    2dec:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2df2:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 8: Procedure calls
C
*/
	X = 1.0;
    2df6:	2f7c 3ff0 0000 	movel #1072693248,%sp@(152)
    2dfc:	0098 
    2dfe:	42af 009c      	clrl %sp@(156)
	Y = 1.0;
    2e02:	2f7c 3ff0 0000 	movel #1072693248,%sp@(144)
    2e08:	0090 
    2e0a:	42af 0094      	clrl %sp@(148)
	Z = 1.0;
    2e0e:	2f7c 3ff0 0000 	movel #1072693248,%sp@(60)
    2e14:	003c 
    2e16:	42af 0040      	clrl %sp@(64)

	for (I = 1; I <= N8; I++)
    2e1a:	7201           	moveq #1,%d1
    2e1c:	2f41 00c0      	movel %d1,%sp@(192)
    2e20:	6024           	bras 2e46 <kmain+0xc8c>
		P3(X,Y,&Z);
    2e22:	703c           	moveq #60,%d0
    2e24:	d08f           	addl %sp,%d0
    2e26:	2f00           	movel %d0,%sp@-
    2e28:	2f2f 0098      	movel %sp@(152),%sp@-
    2e2c:	2f2f 0098      	movel %sp@(152),%sp@-
    2e30:	2f2f 00a8      	movel %sp@(168),%sp@-
    2e34:	2f2f 00a8      	movel %sp@(168),%sp@-
    2e38:	4eb9 0000 3526 	jsr 3526 <P3>
    2e3e:	4fef 0014      	lea %sp@(20),%sp
	for (I = 1; I <= N8; I++)
    2e42:	52af 00c0      	addql #1,%sp@(192)
    2e46:	242f 00c0      	movel %sp@(192),%d2
    2e4a:	b4af 005c      	cmpl %sp@(92),%d2
    2e4e:	6fd2           	bles 2e22 <kmain+0xc68>

#ifdef PRINTOUT
	IF (JJ==II)POUT(N8,J,K,X,Y,Z,Z);
    2e50:	202f 008c      	movel %sp@(140),%d0
    2e54:	b0af 0078      	cmpl %sp@(120),%d0
    2e58:	6646           	bnes 2ea0 <kmain+0xce6>
    2e5a:	206f 003c      	moveal %sp@(60),%a0
    2e5e:	226f 0040      	moveal %sp@(64),%a1
    2e62:	202f 003c      	movel %sp@(60),%d0
    2e66:	222f 0040      	movel %sp@(64),%d1
    2e6a:	2639 0000 5e24 	movel 5e24 <K>,%d3
    2e70:	2439 0000 5e20 	movel 5e20 <J>,%d2
    2e76:	2f09           	movel %a1,%sp@-
    2e78:	2f08           	movel %a0,%sp@-
    2e7a:	2f01           	movel %d1,%sp@-
    2e7c:	2f00           	movel %d0,%sp@-
    2e7e:	2f2f 00a4      	movel %sp@(164),%sp@-
    2e82:	2f2f 00a4      	movel %sp@(164),%sp@-
    2e86:	2f2f 00b4      	movel %sp@(180),%sp@-
    2e8a:	2f2f 00b4      	movel %sp@(180),%sp@-
    2e8e:	2f03           	movel %d3,%sp@-
    2e90:	2f02           	movel %d2,%sp@-
    2e92:	2f2f 0084      	movel %sp@(132),%sp@-
    2e96:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2e9c:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 9: Array references
C
*/
	J = 1;
    2ea0:	7201           	moveq #1,%d1
    2ea2:	23c1 0000 5e20 	movel %d1,5e20 <J>
	K = 2;
    2ea8:	7402           	moveq #2,%d2
    2eaa:	23c2 0000 5e24 	movel %d2,5e24 <K>
	L = 3;
    2eb0:	7003           	moveq #3,%d0
    2eb2:	23c0 0000 5e28 	movel %d0,5e28 <L>
	E1[1] = 1.0;
    2eb8:	23fc 3ff0 0000 	movel #1072693248,5e00 <E1+0x8>
    2ebe:	0000 5e00 
    2ec2:	42b9 0000 5e04 	clrl 5e04 <E1+0xc>
	E1[2] = 2.0;
    2ec8:	23fc 4000 0000 	movel #1073741824,5e08 <E1+0x10>
    2ece:	0000 5e08 
    2ed2:	42b9 0000 5e0c 	clrl 5e0c <E1+0x14>
	E1[3] = 3.0;
    2ed8:	23fc 4008 0000 	movel #1074266112,5e10 <E1+0x18>
    2ede:	0000 5e10 
    2ee2:	42b9 0000 5e14 	clrl 5e14 <E1+0x1c>

	for (I = 1; I <= N9; I++)
    2ee8:	7201           	moveq #1,%d1
    2eea:	2f41 00c0      	movel %d1,%sp@(192)
    2eee:	600a           	bras 2efa <kmain+0xd40>
		P0();
    2ef0:	4eb9 0000 34c2 	jsr 34c2 <P0>
	for (I = 1; I <= N9; I++)
    2ef6:	52af 00c0      	addql #1,%sp@(192)
    2efa:	242f 00c0      	movel %sp@(192),%d2
    2efe:	b4af 0058      	cmpl %sp@(88),%d2
    2f02:	6fec           	bles 2ef0 <kmain+0xd36>

#ifdef PRINTOUT
	IF (JJ==II)POUT(N9,J,K,E1[1],E1[2],E1[3],E1[4]);
    2f04:	202f 008c      	movel %sp@(140),%d0
    2f08:	b0af 0078      	cmpl %sp@(120),%d0
    2f0c:	665e           	bnes 2f6c <kmain+0xdb2>
    2f0e:	2839 0000 5e18 	movel 5e18 <E1+0x20>,%d4
    2f14:	2a39 0000 5e1c 	movel 5e1c <E1+0x24>,%d5
    2f1a:	2439 0000 5e10 	movel 5e10 <E1+0x18>,%d2
    2f20:	2639 0000 5e14 	movel 5e14 <E1+0x1c>,%d3
    2f26:	2079 0000 5e08 	moveal 5e08 <E1+0x10>,%a0
    2f2c:	2279 0000 5e0c 	moveal 5e0c <E1+0x14>,%a1
    2f32:	2039 0000 5e00 	movel 5e00 <E1+0x8>,%d0
    2f38:	2239 0000 5e04 	movel 5e04 <E1+0xc>,%d1
    2f3e:	2e39 0000 5e24 	movel 5e24 <K>,%d7
    2f44:	2c39 0000 5e20 	movel 5e20 <J>,%d6
    2f4a:	2f05           	movel %d5,%sp@-
    2f4c:	2f04           	movel %d4,%sp@-
    2f4e:	2f03           	movel %d3,%sp@-
    2f50:	2f02           	movel %d2,%sp@-
    2f52:	2f09           	movel %a1,%sp@-
    2f54:	2f08           	movel %a0,%sp@-
    2f56:	2f01           	movel %d1,%sp@-
    2f58:	2f00           	movel %d0,%sp@-
    2f5a:	2f07           	movel %d7,%sp@-
    2f5c:	2f06           	movel %d6,%sp@-
    2f5e:	2f2f 0080      	movel %sp@(128),%sp@-
    2f62:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    2f68:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 10: Integer arithmetic
C
*/
	J = 2;
    2f6c:	7202           	moveq #2,%d1
    2f6e:	23c1 0000 5e20 	movel %d1,5e20 <J>
	K = 3;
    2f74:	7403           	moveq #3,%d2
    2f76:	23c2 0000 5e24 	movel %d2,5e24 <K>

	for (I = 1; I <= N10; I++) {
    2f7c:	7001           	moveq #1,%d0
    2f7e:	2f40 00c0      	movel %d0,%sp@(192)
    2f82:	605c           	bras 2fe0 <kmain+0xe26>
	    J = J + K;
    2f84:	2239 0000 5e20 	movel 5e20 <J>,%d1
    2f8a:	2039 0000 5e24 	movel 5e24 <K>,%d0
    2f90:	d081           	addl %d1,%d0
    2f92:	23c0 0000 5e20 	movel %d0,5e20 <J>
	    K = J + K;
    2f98:	2239 0000 5e20 	movel 5e20 <J>,%d1
    2f9e:	2039 0000 5e24 	movel 5e24 <K>,%d0
    2fa4:	d081           	addl %d1,%d0
    2fa6:	23c0 0000 5e24 	movel %d0,5e24 <K>
	    J = K - J;
    2fac:	2239 0000 5e24 	movel 5e24 <K>,%d1
    2fb2:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2fb8:	9280           	subl %d0,%d1
    2fba:	23c1 0000 5e20 	movel %d1,5e20 <J>
	    K = K - J - J;
    2fc0:	2239 0000 5e24 	movel 5e24 <K>,%d1
    2fc6:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2fcc:	9280           	subl %d0,%d1
    2fce:	2039 0000 5e20 	movel 5e20 <J>,%d0
    2fd4:	9280           	subl %d0,%d1
    2fd6:	23c1 0000 5e24 	movel %d1,5e24 <K>
	for (I = 1; I <= N10; I++) {
    2fdc:	52af 00c0      	addql #1,%sp@(192)
    2fe0:	222f 00c0      	movel %sp@(192),%d1
    2fe4:	b2af 0054      	cmpl %sp@(84),%d1
    2fe8:	6f9a           	bles 2f84 <kmain+0xdca>
	}

#ifdef PRINTOUT
	IF (JJ==II)POUT(N10,J,K,X1,X2,X3,X4);
    2fea:	242f 008c      	movel %sp@(140),%d2
    2fee:	b4af 0078      	cmpl %sp@(120),%d2
    2ff2:	663e           	bnes 3032 <kmain+0xe78>
    2ff4:	2239 0000 5e24 	movel 5e24 <K>,%d1
    2ffa:	2039 0000 5e20 	movel 5e20 <J>,%d0
    3000:	2f2f 00a4      	movel %sp@(164),%sp@-
    3004:	2f2f 00a4      	movel %sp@(164),%sp@-
    3008:	2f2f 00b4      	movel %sp@(180),%sp@-
    300c:	2f2f 00b4      	movel %sp@(180),%sp@-
    3010:	2f2f 00c4      	movel %sp@(196),%sp@-
    3014:	2f2f 00c4      	movel %sp@(196),%sp@-
    3018:	2f2f 00d4      	movel %sp@(212),%sp@-
    301c:	2f2f 00d4      	movel %sp@(212),%sp@-
    3020:	2f01           	movel %d1,%sp@-
    3022:	2f00           	movel %d0,%sp@-
    3024:	2f2f 007c      	movel %sp@(124),%sp@-
    3028:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    302e:	4fef 002c      	lea %sp@(44),%sp
/*
C
C	Module 11: Standard functions
C
*/
	X = 0.75;
    3032:	2f7c 3fe8 0000 	movel #1072168960,%sp@(152)
    3038:	0098 
    303a:	42af 009c      	clrl %sp@(156)

	for (I = 1; I <= N11; I++)
    303e:	7001           	moveq #1,%d0
    3040:	2f40 00c0      	movel %d0,%sp@(192)
    3044:	6052           	bras 3098 <kmain+0xede>
		X = DSQRT(DEXP(DLOG(X)/T1));
    3046:	2f2f 009c      	movel %sp@(156),%sp@-
    304a:	2f2f 009c      	movel %sp@(156),%sp@-
    304e:	4eb9 0000 214c 	jsr 214c <log>
    3054:	508f           	addql #8,%sp
    3056:	2039 0000 5de8 	movel 5de8 <T1>,%d0
    305c:	2239 0000 5dec 	movel 5dec <T1+0x4>,%d1
    3062:	2f01           	movel %d1,%sp@-
    3064:	2f00           	movel %d0,%sp@-
    3066:	f21f 5480      	fmoved %sp@+,%fp1
    306a:	f200 0420      	fdivx %fp1,%fp0
    306e:	f227 7400      	fmoved %fp0,%sp@-
    3072:	201f           	movel %sp@+,%d0
    3074:	221f           	movel %sp@+,%d1
    3076:	2f01           	movel %d1,%sp@-
    3078:	2f00           	movel %d0,%sp@-
    307a:	4eb9 0000 212a 	jsr 212a <exp>
    3080:	508f           	addql #8,%sp
    3082:	f227 7400      	fmoved %fp0,%sp@-
    3086:	4eb9 0000 216e 	jsr 216e <sqrt>
    308c:	508f           	addql #8,%sp
    308e:	f22f 7400 0098 	fmoved %fp0,%sp@(152)
	for (I = 1; I <= N11; I++)
    3094:	52af 00c0      	addql #1,%sp@(192)
    3098:	222f 00c0      	movel %sp@(192),%d1
    309c:	b2af 0050      	cmpl %sp@(80),%d1
    30a0:	6fa4           	bles 3046 <kmain+0xe8c>

#ifdef PRINTOUT
	IF (JJ==II)POUT(N11,J,K,X,X,X,X);
    30a2:	242f 008c      	movel %sp@(140),%d2
    30a6:	b4af 0078      	cmpl %sp@(120),%d2
    30aa:	663e           	bnes 30ea <kmain+0xf30>
    30ac:	2239 0000 5e24 	movel 5e24 <K>,%d1
    30b2:	2039 0000 5e20 	movel 5e20 <J>,%d0
    30b8:	2f2f 009c      	movel %sp@(156),%sp@-
    30bc:	2f2f 009c      	movel %sp@(156),%sp@-
    30c0:	2f2f 00a4      	movel %sp@(164),%sp@-
    30c4:	2f2f 00a4      	movel %sp@(164),%sp@-
    30c8:	2f2f 00ac      	movel %sp@(172),%sp@-
    30cc:	2f2f 00ac      	movel %sp@(172),%sp@-
    30d0:	2f2f 00b4      	movel %sp@(180),%sp@-
    30d4:	2f2f 00b4      	movel %sp@(180),%sp@-
    30d8:	2f01           	movel %d1,%sp@-
    30da:	2f00           	movel %d0,%sp@-
    30dc:	2f2f 0078      	movel %sp@(120),%sp@-
    30e0:	4eb9 0000 35e8 	jsr 35e8 <POUT>
    30e6:	4fef 002c      	lea %sp@(44),%sp
/*
C
C      THIS IS THE END OF THE MAJOR LOOP.
C
*/
	if (++JJ <= II)
    30ea:	52af 008c      	addql #1,%sp@(140)
    30ee:	202f 008c      	movel %sp@(140),%d0
    30f2:	b0af 0078      	cmpl %sp@(120),%d0
    30f6:	6e04           	bgts 30fc <kmain+0xf42>
		goto IILOOP;
    30f8:	6000 f144      	braw 223e <kmain+0x84>
/*
C
C      Stop benchmark timing at this point.
C
*/
	end = gettimer();
    30fc:	4eb9 0000 2190 	jsr 2190 <gettimer>
    3102:	2f40 004c      	movel %d0,%sp@(76)
C	(100*LOOP*II)/TIME
C
C      where TIME is in seconds.
C--------------------------------------------------------------------
*/
    int duration = getduration(start, end);
    3106:	2f2f 004c      	movel %sp@(76),%sp@-
    310a:	2f2f 0084      	movel %sp@(132),%sp@-
    310e:	4eb9 0000 2198 	jsr 2198 <getduration>
    3114:	508f           	addql #8,%sp
    3116:	2f40 0048      	movel %d0,%sp@(72)

	printf("\n");
    311a:	4879 0000 5c50 	pea 5c50 <__gedf2+0x40>
    3120:	4eb9 0000 4992 	jsr 4992 <printf_>
    3126:	588f           	addql #4,%sp
	if (duration <= 100) {
    3128:	7264           	moveq #100,%d1
    312a:	b2af 0048      	cmpl %sp@(72),%d1
    312e:	6d14           	blts 3144 <kmain+0xf8a>
		printf("Insufficient duration- Increase the LOOP count\n");
    3130:	4879 0000 5c52 	pea 5c52 <__gedf2+0x42>
    3136:	4eb9 0000 4992 	jsr 4992 <printf_>
    313c:	588f           	addql #4,%sp
		return(1);
    313e:	7001           	moveq #1,%d0
    3140:	6000 0108      	braw 324a <kmain+0x1090>
	}

	printf("Loops: %ld, Iterations: %d, Duration: %d.%03d sec.\n",
    3144:	242f 0048      	movel %sp@(72),%d2
    3148:	2202           	movel %d2,%d1
    314a:	4c3c           	.short 0x4c3c
    314c:	1c00           	moveb %d0,%d6
    314e:	51eb 851f      	sf %a3@(-31457)
    3152:	2200           	movel %d0,%d1
    3154:	ea81           	asrl #5,%d1
    3156:	2002           	movel %d2,%d0
    3158:	d080           	addl %d0,%d0
    315a:	9180           	subxl %d0,%d0
    315c:	9280           	subl %d0,%d1
    315e:	2001           	movel %d1,%d0
    3160:	d080           	addl %d0,%d0
    3162:	d081           	addl %d1,%d0
    3164:	e788           	lsll #3,%d0
    3166:	d081           	addl %d1,%d0
    3168:	e588           	lsll #2,%d0
    316a:	2202           	movel %d2,%d1
    316c:	9280           	subl %d0,%d1
    316e:	202f 0048      	movel %sp@(72),%d0
    3172:	2600           	movel %d0,%d3
    3174:	4c3c           	.short 0x4c3c
    3176:	3c02           	movew %d2,%d6
    3178:	51eb 851f      	sf %a3@(-31457)
    317c:	ea82           	asrl #5,%d2
    317e:	d080           	addl %d0,%d0
    3180:	9180           	subxl %d0,%d0
    3182:	2042           	moveal %d2,%a0
    3184:	91c0           	subal %d0,%a0
    3186:	2f01           	movel %d1,%sp@-
    3188:	2f08           	movel %a0,%sp@-
    318a:	2f2f 0080      	movel %sp@(128),%sp@-
    318e:	2f2f 0088      	movel %sp@(136),%sp@-
    3192:	4879 0000 5c82 	pea 5c82 <__gedf2+0x72>
    3198:	4eb9 0000 4992 	jsr 4992 <printf_>
    319e:	4fef 0014      	lea %sp@(20),%sp
			LOOP, II, duration/100, duration%100);

	KIPS = (100.0*LOOP*II)/(float)(duration/100);
    31a2:	f22f 4080 007c 	fmovel %sp@(124),%fp1
    31a8:	f239 4800 0000 	fmovex 5d2a <__gedf2+0x11a>,%fp0
    31ae:	5d2a 
    31b0:	f200 00a3      	fmulx %fp0,%fp1
    31b4:	f22f 4000 0078 	fmovel %sp@(120),%fp0
    31ba:	f200 0423      	fmulx %fp1,%fp0
    31be:	202f 0048      	movel %sp@(72),%d0
    31c2:	2400           	movel %d0,%d2
    31c4:	4c3c           	.short 0x4c3c
    31c6:	2c01           	movel %d1,%d6
    31c8:	51eb 851f      	sf %a3@(-31457)
    31cc:	ea81           	asrl #5,%d1
    31ce:	d080           	addl %d0,%d0
    31d0:	9180           	subxl %d0,%d0
    31d2:	9280           	subl %d0,%d1
    31d4:	f201 4080      	fmovel %d1,%fp1
    31d8:	f200 0420      	fdivx %fp1,%fp0
    31dc:	f22f 6400 0044 	fmoves %fp0,%sp@(68)
	if (KIPS >= 1000.0)
    31e2:	f22f 4400 0044 	fmoves %sp@(68),%fp0
    31e8:	f23c 4438 447a 	fcmps #0e1000,%fp0
    31ee:	0000 
    31f0:	f29c 0032      	fbnge 3224 <kmain+0x106a>
		printf("C Converted Double Precision Whetstones: %.1f MIPS\n", KIPS/1000.0);
    31f4:	f22f 4400 0044 	fmoves %sp@(68),%fp0
    31fa:	f239 4880 0000 	fmovex 5d36 <__gedf2+0x126>,%fp1
    3200:	5d36 
    3202:	f200 0420      	fdivx %fp1,%fp0
    3206:	f227 7400      	fmoved %fp0,%sp@-
    320a:	201f           	movel %sp@+,%d0
    320c:	221f           	movel %sp@+,%d1
    320e:	2f01           	movel %d1,%sp@-
    3210:	2f00           	movel %d0,%sp@-
    3212:	4879 0000 5cb6 	pea 5cb6 <__gedf2+0xa6>
    3218:	4eb9 0000 4992 	jsr 4992 <printf_>
    321e:	4fef 000c      	lea %sp@(12),%sp
    3222:	601a           	bras 323e <kmain+0x1084>
	else
		printf("C Converted Double Precision Whetstones: %.1f KIPS\n", KIPS);
    3224:	f22f 4400 0044 	fmoves %sp@(68),%fp0
    322a:	f227 7400      	fmoved %fp0,%sp@-
    322e:	4879 0000 5cea 	pea 5cea <__gedf2+0xda>
    3234:	4eb9 0000 4992 	jsr 4992 <printf_>
    323a:	4fef 000c      	lea %sp@(12),%sp

	if (continuous)
    323e:	4aaf 0084      	tstl %sp@(132)
    3242:	6704           	beqs 3248 <kmain+0x108e>
		goto LCONT;
    3244:	6000 efa4      	braw 21ea <kmain+0x30>

	return(0);
    3248:	4280           	clrl %d0
}
    324a:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    324e:	f21f d038      	fmovemx %sp@+,%fp2-%fp4
    3252:	4fef 0088      	lea %sp@(136),%sp
    3256:	4e75           	rts

00003258 <PA>:

void
PA(double E[])
{
	J = 0;
    3258:	42b9 0000 5e20 	clrl 5e20 <J>

L10:
	E[1] = ( E[1] + E[2] + E[3] - E[4]) * T;
    325e:	206f 0004      	moveal %sp@(4),%a0
    3262:	5088           	addql #8,%a0
    3264:	2010           	movel %a0@,%d0
    3266:	2228 0004      	movel %a0@(4),%d1
    326a:	2f01           	movel %d1,%sp@-
    326c:	2f00           	movel %d0,%sp@-
    326e:	f21f 5480      	fmoved %sp@+,%fp1
    3272:	307c 0010      	moveaw #16,%a0
    3276:	d1ef 0004      	addal %sp@(4),%a0
    327a:	2010           	movel %a0@,%d0
    327c:	2228 0004      	movel %a0@(4),%d1
    3280:	2f01           	movel %d1,%sp@-
    3282:	2f00           	movel %d0,%sp@-
    3284:	f21f 5400      	fmoved %sp@+,%fp0
    3288:	f200 0422      	faddx %fp1,%fp0
    328c:	307c 0018      	moveaw #24,%a0
    3290:	d1ef 0004      	addal %sp@(4),%a0
    3294:	2010           	movel %a0@,%d0
    3296:	2228 0004      	movel %a0@(4),%d1
    329a:	2f01           	movel %d1,%sp@-
    329c:	2f00           	movel %d0,%sp@-
    329e:	f21f 5480      	fmoved %sp@+,%fp1
    32a2:	f200 0422      	faddx %fp1,%fp0
    32a6:	307c 0020      	moveaw #32,%a0
    32aa:	d1ef 0004      	addal %sp@(4),%a0
    32ae:	2010           	movel %a0@,%d0
    32b0:	2228 0004      	movel %a0@(4),%d1
    32b4:	2f01           	movel %d1,%sp@-
    32b6:	2f00           	movel %d0,%sp@-
    32b8:	f21f 5480      	fmoved %sp@+,%fp1
    32bc:	f200 0428      	fsubx %fp1,%fp0
    32c0:	2039 0000 5de0 	movel 5de0 <T>,%d0
    32c6:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    32cc:	2f01           	movel %d1,%sp@-
    32ce:	2f00           	movel %d0,%sp@-
    32d0:	f21f 5480      	fmoved %sp@+,%fp1
    32d4:	f200 0423      	fmulx %fp1,%fp0
    32d8:	206f 0004      	moveal %sp@(4),%a0
    32dc:	5088           	addql #8,%a0
    32de:	f227 7400      	fmoved %fp0,%sp@-
    32e2:	201f           	movel %sp@+,%d0
    32e4:	221f           	movel %sp@+,%d1
    32e6:	2080           	movel %d0,%a0@
    32e8:	2141 0004      	movel %d1,%a0@(4)
	E[2] = ( E[1] + E[2] - E[3] + E[4]) * T;
    32ec:	206f 0004      	moveal %sp@(4),%a0
    32f0:	5088           	addql #8,%a0
    32f2:	2010           	movel %a0@,%d0
    32f4:	2228 0004      	movel %a0@(4),%d1
    32f8:	2f01           	movel %d1,%sp@-
    32fa:	2f00           	movel %d0,%sp@-
    32fc:	f21f 5480      	fmoved %sp@+,%fp1
    3300:	307c 0010      	moveaw #16,%a0
    3304:	d1ef 0004      	addal %sp@(4),%a0
    3308:	2010           	movel %a0@,%d0
    330a:	2228 0004      	movel %a0@(4),%d1
    330e:	2f01           	movel %d1,%sp@-
    3310:	2f00           	movel %d0,%sp@-
    3312:	f21f 5400      	fmoved %sp@+,%fp0
    3316:	f200 0422      	faddx %fp1,%fp0
    331a:	307c 0018      	moveaw #24,%a0
    331e:	d1ef 0004      	addal %sp@(4),%a0
    3322:	2010           	movel %a0@,%d0
    3324:	2228 0004      	movel %a0@(4),%d1
    3328:	2f01           	movel %d1,%sp@-
    332a:	2f00           	movel %d0,%sp@-
    332c:	f21f 5480      	fmoved %sp@+,%fp1
    3330:	f200 0428      	fsubx %fp1,%fp0
    3334:	307c 0020      	moveaw #32,%a0
    3338:	d1ef 0004      	addal %sp@(4),%a0
    333c:	2010           	movel %a0@,%d0
    333e:	2228 0004      	movel %a0@(4),%d1
    3342:	2f01           	movel %d1,%sp@-
    3344:	2f00           	movel %d0,%sp@-
    3346:	f21f 5480      	fmoved %sp@+,%fp1
    334a:	f200 0422      	faddx %fp1,%fp0
    334e:	2039 0000 5de0 	movel 5de0 <T>,%d0
    3354:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    335a:	2f01           	movel %d1,%sp@-
    335c:	2f00           	movel %d0,%sp@-
    335e:	f21f 5480      	fmoved %sp@+,%fp1
    3362:	f200 0423      	fmulx %fp1,%fp0
    3366:	307c 0010      	moveaw #16,%a0
    336a:	d1ef 0004      	addal %sp@(4),%a0
    336e:	f227 7400      	fmoved %fp0,%sp@-
    3372:	201f           	movel %sp@+,%d0
    3374:	221f           	movel %sp@+,%d1
    3376:	2080           	movel %d0,%a0@
    3378:	2141 0004      	movel %d1,%a0@(4)
	E[3] = ( E[1] - E[2] + E[3] + E[4]) * T;
    337c:	206f 0004      	moveal %sp@(4),%a0
    3380:	5088           	addql #8,%a0
    3382:	2010           	movel %a0@,%d0
    3384:	2228 0004      	movel %a0@(4),%d1
    3388:	2f01           	movel %d1,%sp@-
    338a:	2f00           	movel %d0,%sp@-
    338c:	f21f 5400      	fmoved %sp@+,%fp0
    3390:	307c 0010      	moveaw #16,%a0
    3394:	d1ef 0004      	addal %sp@(4),%a0
    3398:	2010           	movel %a0@,%d0
    339a:	2228 0004      	movel %a0@(4),%d1
    339e:	2f01           	movel %d1,%sp@-
    33a0:	2f00           	movel %d0,%sp@-
    33a2:	f21f 5480      	fmoved %sp@+,%fp1
    33a6:	f200 0428      	fsubx %fp1,%fp0
    33aa:	307c 0018      	moveaw #24,%a0
    33ae:	d1ef 0004      	addal %sp@(4),%a0
    33b2:	2010           	movel %a0@,%d0
    33b4:	2228 0004      	movel %a0@(4),%d1
    33b8:	2f01           	movel %d1,%sp@-
    33ba:	2f00           	movel %d0,%sp@-
    33bc:	f21f 5480      	fmoved %sp@+,%fp1
    33c0:	f200 0422      	faddx %fp1,%fp0
    33c4:	307c 0020      	moveaw #32,%a0
    33c8:	d1ef 0004      	addal %sp@(4),%a0
    33cc:	2010           	movel %a0@,%d0
    33ce:	2228 0004      	movel %a0@(4),%d1
    33d2:	2f01           	movel %d1,%sp@-
    33d4:	2f00           	movel %d0,%sp@-
    33d6:	f21f 5480      	fmoved %sp@+,%fp1
    33da:	f200 0422      	faddx %fp1,%fp0
    33de:	2039 0000 5de0 	movel 5de0 <T>,%d0
    33e4:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    33ea:	2f01           	movel %d1,%sp@-
    33ec:	2f00           	movel %d0,%sp@-
    33ee:	f21f 5480      	fmoved %sp@+,%fp1
    33f2:	f200 0423      	fmulx %fp1,%fp0
    33f6:	307c 0018      	moveaw #24,%a0
    33fa:	d1ef 0004      	addal %sp@(4),%a0
    33fe:	f227 7400      	fmoved %fp0,%sp@-
    3402:	201f           	movel %sp@+,%d0
    3404:	221f           	movel %sp@+,%d1
    3406:	2080           	movel %d0,%a0@
    3408:	2141 0004      	movel %d1,%a0@(4)
	E[4] = (-E[1] + E[2] + E[3] + E[4]) / T2;
    340c:	206f 0004      	moveal %sp@(4),%a0
    3410:	5088           	addql #8,%a0
    3412:	2010           	movel %a0@,%d0
    3414:	2228 0004      	movel %a0@(4),%d1
    3418:	0840 001f      	bchg #31,%d0
    341c:	2f01           	movel %d1,%sp@-
    341e:	2f00           	movel %d0,%sp@-
    3420:	f21f 5480      	fmoved %sp@+,%fp1
    3424:	307c 0010      	moveaw #16,%a0
    3428:	d1ef 0004      	addal %sp@(4),%a0
    342c:	2010           	movel %a0@,%d0
    342e:	2228 0004      	movel %a0@(4),%d1
    3432:	2f01           	movel %d1,%sp@-
    3434:	2f00           	movel %d0,%sp@-
    3436:	f21f 5400      	fmoved %sp@+,%fp0
    343a:	f200 0422      	faddx %fp1,%fp0
    343e:	307c 0018      	moveaw #24,%a0
    3442:	d1ef 0004      	addal %sp@(4),%a0
    3446:	2010           	movel %a0@,%d0
    3448:	2228 0004      	movel %a0@(4),%d1
    344c:	2f01           	movel %d1,%sp@-
    344e:	2f00           	movel %d0,%sp@-
    3450:	f21f 5480      	fmoved %sp@+,%fp1
    3454:	f200 0422      	faddx %fp1,%fp0
    3458:	307c 0020      	moveaw #32,%a0
    345c:	d1ef 0004      	addal %sp@(4),%a0
    3460:	2010           	movel %a0@,%d0
    3462:	2228 0004      	movel %a0@(4),%d1
    3466:	2f01           	movel %d1,%sp@-
    3468:	2f00           	movel %d0,%sp@-
    346a:	f21f 5480      	fmoved %sp@+,%fp1
    346e:	f200 0422      	faddx %fp1,%fp0
    3472:	2039 0000 5df0 	movel 5df0 <T2>,%d0
    3478:	2239 0000 5df4 	movel 5df4 <T2+0x4>,%d1
    347e:	2f01           	movel %d1,%sp@-
    3480:	2f00           	movel %d0,%sp@-
    3482:	f21f 5480      	fmoved %sp@+,%fp1
    3486:	f200 0420      	fdivx %fp1,%fp0
    348a:	307c 0020      	moveaw #32,%a0
    348e:	d1ef 0004      	addal %sp@(4),%a0
    3492:	f227 7400      	fmoved %fp0,%sp@-
    3496:	201f           	movel %sp@+,%d0
    3498:	221f           	movel %sp@+,%d1
    349a:	2080           	movel %d0,%a0@
    349c:	2141 0004      	movel %d1,%a0@(4)
	J += 1;
    34a0:	2039 0000 5e20 	movel 5e20 <J>,%d0
    34a6:	5280           	addql #1,%d0
    34a8:	23c0 0000 5e20 	movel %d0,5e20 <J>

	if (J < 6)
    34ae:	2039 0000 5e20 	movel 5e20 <J>,%d0
    34b4:	7205           	moveq #5,%d1
    34b6:	b280           	cmpl %d0,%d1
    34b8:	6d04           	blts 34be <PA+0x266>
		goto L10;
    34ba:	6000 fda2      	braw 325e <PA+0x6>
}
    34be:	4e71           	nop
    34c0:	4e75           	rts

000034c2 <P0>:

void
P0(void)
{
	E1[J] = E1[K];
    34c2:	2239 0000 5e24 	movel 5e24 <K>,%d1
    34c8:	2039 0000 5e20 	movel 5e20 <J>,%d0
    34ce:	f230 5400 1fb0 	fmoved @(5df8,%d1:l:8),%fp0
    34d4:	0000 5df8 
    34d8:	f230 7400 0fb0 	fmoved %fp0,@(5df8,%d0:l:8)
    34de:	0000 5df8 
	E1[K] = E1[L];
    34e2:	2239 0000 5e28 	movel 5e28 <L>,%d1
    34e8:	2039 0000 5e24 	movel 5e24 <K>,%d0
    34ee:	f230 5400 1fb0 	fmoved @(5df8,%d1:l:8),%fp0
    34f4:	0000 5df8 
    34f8:	f230 7400 0fb0 	fmoved %fp0,@(5df8,%d0:l:8)
    34fe:	0000 5df8 
	E1[L] = E1[J];
    3502:	2239 0000 5e20 	movel 5e20 <J>,%d1
    3508:	2039 0000 5e28 	movel 5e28 <L>,%d0
    350e:	f230 5400 1fb0 	fmoved @(5df8,%d1:l:8),%fp0
    3514:	0000 5df8 
    3518:	f230 7400 0fb0 	fmoved %fp0,@(5df8,%d0:l:8)
    351e:	0000 5df8 
}
    3522:	4e71           	nop
    3524:	4e75           	rts

00003526 <P3>:

void
P3(double X, double Y, double *Z)
{
    3526:	4fef fff0      	lea %sp@(-16),%sp
    352a:	f227 e004      	fmovemx %fp2,%sp@-
	double X1, Y1;

	X1 = X;
    352e:	2f6f 0020 0014 	movel %sp@(32),%sp@(20)
    3534:	2f6f 0024 0018 	movel %sp@(36),%sp@(24)
	Y1 = Y;
    353a:	2f6f 0028 000c 	movel %sp@(40),%sp@(12)
    3540:	2f6f 002c 0010 	movel %sp@(44),%sp@(16)
	X1 = T * (X1 + Y1);
    3546:	2039 0000 5de0 	movel 5de0 <T>,%d0
    354c:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    3552:	2f01           	movel %d1,%sp@-
    3554:	2f00           	movel %d0,%sp@-
    3556:	f21f 5500      	fmoved %sp@+,%fp2
    355a:	f22f 5480 0014 	fmoved %sp@(20),%fp1
    3560:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    3566:	f200 0422      	faddx %fp1,%fp0
    356a:	f200 0823      	fmulx %fp2,%fp0
    356e:	f22f 7400 0014 	fmoved %fp0,%sp@(20)
	Y1 = T * (X1 + Y1);
    3574:	2039 0000 5de0 	movel 5de0 <T>,%d0
    357a:	2239 0000 5de4 	movel 5de4 <T+0x4>,%d1
    3580:	2f01           	movel %d1,%sp@-
    3582:	2f00           	movel %d0,%sp@-
    3584:	f21f 5500      	fmoved %sp@+,%fp2
    3588:	f22f 5480 0014 	fmoved %sp@(20),%fp1
    358e:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    3594:	f200 0422      	faddx %fp1,%fp0
    3598:	f200 0823      	fmulx %fp2,%fp0
    359c:	f22f 7400 000c 	fmoved %fp0,%sp@(12)
	*Z  = (X1 + Y1) / T2;
    35a2:	f22f 5480 0014 	fmoved %sp@(20),%fp1
    35a8:	f22f 5400 000c 	fmoved %sp@(12),%fp0
    35ae:	f200 0422      	faddx %fp1,%fp0
    35b2:	2039 0000 5df0 	movel 5df0 <T2>,%d0
    35b8:	2239 0000 5df4 	movel 5df4 <T2+0x4>,%d1
    35be:	2f01           	movel %d1,%sp@-
    35c0:	2f00           	movel %d0,%sp@-
    35c2:	f21f 5480      	fmoved %sp@+,%fp1
    35c6:	f200 0420      	fdivx %fp1,%fp0
    35ca:	f227 7400      	fmoved %fp0,%sp@-
    35ce:	201f           	movel %sp@+,%d0
    35d0:	221f           	movel %sp@+,%d1
    35d2:	206f 0030      	moveal %sp@(48),%a0
    35d6:	2080           	movel %d0,%a0@
    35d8:	2141 0004      	movel %d1,%a0@(4)
}
    35dc:	4e71           	nop
    35de:	f21f d020      	fmovemx %sp@+,%fp2
    35e2:	4fef 0010      	lea %sp@(16),%sp
    35e6:	4e75           	rts

000035e8 <POUT>:
void
POUT(long N, long J, long K, double X1, double X2, double X3, double X4)
{
	// printf("%7ld %7ld %7ld %12.4e %12.4e %12.4e %12.4e\n",
	// 					N, J, K, X1, X2, X3, X4);
	printf("%7ld %7ld %7ld %f %f %f %f\n",
    35e8:	2f2f 002c      	movel %sp@(44),%sp@-
    35ec:	2f2f 002c      	movel %sp@(44),%sp@-
    35f0:	2f2f 002c      	movel %sp@(44),%sp@-
    35f4:	2f2f 002c      	movel %sp@(44),%sp@-
    35f8:	2f2f 002c      	movel %sp@(44),%sp@-
    35fc:	2f2f 002c      	movel %sp@(44),%sp@-
    3600:	2f2f 002c      	movel %sp@(44),%sp@-
    3604:	2f2f 002c      	movel %sp@(44),%sp@-
    3608:	2f2f 002c      	movel %sp@(44),%sp@-
    360c:	2f2f 002c      	movel %sp@(44),%sp@-
    3610:	2f2f 002c      	movel %sp@(44),%sp@-
    3614:	4879 0000 5d42 	pea 5d42 <__gedf2+0x132>
    361a:	4eb9 0000 4992 	jsr 4992 <printf_>
    3620:	4fef 0030      	lea %sp@(48),%sp
						N, J, K, X1, X2, X3, X4);
}
    3624:	4e71           	nop
    3626:	4e75           	rts

00003628 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    3628:	4e75           	rts

0000362a <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
    362a:	48e7 3f3c      	moveml %d2-%d7/%a2-%a5,%sp@-
    362e:	246f 002c      	moveal %sp@(44),%a2
    3632:	2c2f 0030      	movel %sp@(48),%d6
    3636:	2a6f 0034      	moveal %sp@(52),%a5
    363a:	2e2f 0038      	movel %sp@(56),%d7
    363e:	266f 003c      	moveal %sp@(60),%a3
    3642:	242f 0040      	movel %sp@(64),%d2
    3646:	286f 0044      	moveal %sp@(68),%a4
    364a:	2a2f 0048      	movel %sp@(72),%d5
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    364e:	7003           	moveq #3,%d0
    3650:	c085           	andl %d5,%d0
    3652:	667c           	bnes 36d0 <_out_rev+0xa6>
    for (size_t i = len; i < width; i++) {
    3654:	b9c2           	cmpal %d2,%a4
    3656:	6300 0084      	blsw 36dc <_out_rev+0xb2>
    365a:	280c           	movel %a4,%d4
    365c:	9882           	subl %d2,%d4
    365e:	d88d           	addl %a5,%d4
    3660:	260d           	movel %a5,%d3
      out(' ', buffer, idx++, maxlen);
    3662:	2003           	movel %d3,%d0
    3664:	5283           	addql #1,%d3
    3666:	2f07           	movel %d7,%sp@-
    3668:	2f00           	movel %d0,%sp@-
    366a:	2f06           	movel %d6,%sp@-
    366c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3670:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    3672:	4fef 0010      	lea %sp@(16),%sp
    3676:	b883           	cmpl %d3,%d4
    3678:	66e8           	bnes 3662 <_out_rev+0x38>
    }
  }

  // reverse string
  while (len) {
    367a:	4a82           	tstl %d2
    367c:	674a           	beqs 36c8 <_out_rev+0x9e>
    367e:	d882           	addl %d2,%d4
    3680:	2604           	movel %d4,%d3
    3682:	2004           	movel %d4,%d0
    3684:	9082           	subl %d2,%d0
    out(buf[--len], buffer, idx++, maxlen);
    3686:	5382           	subql #1,%d2
    3688:	2f07           	movel %d7,%sp@-
    368a:	2f00           	movel %d0,%sp@-
    368c:	2f06           	movel %d6,%sp@-
    368e:	1033 2800      	moveb %a3@(0,%d2:l),%d0
    3692:	4880           	extw %d0
    3694:	3040           	moveaw %d0,%a0
    3696:	2f08           	movel %a0,%sp@-
    3698:	4e92           	jsr %a2@
  while (len) {
    369a:	4fef 0010      	lea %sp@(16),%sp
    369e:	4a82           	tstl %d2
    36a0:	66de           	bnes 3680 <_out_rev+0x56>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    36a2:	0805 0001      	btst #1,%d5
    36a6:	6720           	beqs 36c8 <_out_rev+0x9e>
    while (idx - start_idx < width) {
    36a8:	2403           	movel %d3,%d2
    36aa:	948d           	subl %a5,%d2
    36ac:	b48c           	cmpl %a4,%d2
    36ae:	6418           	bccs 36c8 <_out_rev+0x9e>
      out(' ', buffer, idx++, maxlen);
    36b0:	2f07           	movel %d7,%sp@-
    36b2:	2f03           	movel %d3,%sp@-
    36b4:	5283           	addql #1,%d3
    36b6:	2f06           	movel %d6,%sp@-
    36b8:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    36bc:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    36be:	5282           	addql #1,%d2
    36c0:	4fef 0010      	lea %sp@(16),%sp
    36c4:	b9c2           	cmpal %d2,%a4
    36c6:	62e8           	bhis 36b0 <_out_rev+0x86>
    }
  }

  return idx;
}
    36c8:	2003           	movel %d3,%d0
    36ca:	4cdf 3cfc      	moveml %sp@+,%d2-%d7/%a2-%a5
    36ce:	4e75           	rts
  while (len) {
    36d0:	280d           	movel %a5,%d4
    36d2:	260d           	movel %a5,%d3
    36d4:	4a82           	tstl %d2
    36d6:	67ca           	beqs 36a2 <_out_rev+0x78>
    36d8:	d882           	addl %d2,%d4
    36da:	60a4           	bras 3680 <_out_rev+0x56>
    36dc:	280d           	movel %a5,%d4
    36de:	4a82           	tstl %d2
    36e0:	669c           	bnes 367e <_out_rev+0x54>
    36e2:	260d           	movel %a5,%d3
}
    36e4:	2003           	movel %d3,%d0
    36e6:	4cdf 3cfc      	moveml %sp@+,%d2-%d7/%a2-%a5
    36ea:	4e75           	rts

000036ec <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    36ec:	4fef ffd4      	lea %sp@(-44),%sp
    36f0:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    36f4:	242f 006c      	movel %sp@(108),%d2
    36f8:	262f 0074      	movel %sp@(116),%d3
    36fc:	2e2f 0078      	movel %sp@(120),%d7
    3700:	2a2f 0080      	movel %sp@(128),%d5
    3704:	1f6f 0073 0037 	moveb %sp@(115),%sp@(55)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    370a:	2205           	movel %d5,%d1
    370c:	0281 0000 0400 	andil #1024,%d1
    3712:	2f41 002e      	movel %d1,%sp@(46)
  if (!value) {
    3716:	4a82           	tstl %d2
    3718:	6700 00f4      	beqw 380e <_ntoa_long+0x122>
  if (flags & FLAGS_HASH) {
    371c:	7210           	moveq #16,%d1
    371e:	c285           	andl %d5,%d1
    3720:	2f41 0032      	movel %d1,%sp@(50)
    3724:	0805 0005      	btst #5,%d5
    3728:	6600 00fc      	bnew 3826 <_ntoa_long+0x13a>
    372c:	7c61           	moveq #97,%d6
    372e:	49ef 0038      	lea %sp@(56),%a4
    3732:	4def 0058      	lea %sp@(88),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3736:	280c           	movel %a4,%d4
    3738:	47f9 0000 4b38 	lea 4b38 <__umodsi3>,%a3
    373e:	45f9 0000 4aac 	lea 4aac <__udivsi3>,%a2
    3744:	0606 fff6      	addib #-10,%d6
      const char digit = (char)(value % base);
    3748:	2f03           	movel %d3,%sp@-
    374a:	2f02           	movel %d2,%sp@-
    374c:	4e93           	jsr %a3@
    374e:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3750:	7209           	moveq #9,%d1
    3752:	b280           	cmpl %d0,%d1
    3754:	652a           	bcss 3780 <_ntoa_long+0x94>
    3756:	0600 0030      	addib #48,%d0
    375a:	2a44           	moveal %d4,%a5
    375c:	1ac0           	moveb %d0,%a5@+
      value /= base;
    375e:	2f03           	movel %d3,%sp@-
    3760:	2f02           	movel %d2,%sp@-
    3762:	4e92           	jsr %a2@
    3764:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    3766:	b682           	cmpl %d2,%d3
    3768:	6228           	bhis 3792 <_ntoa_long+0xa6>
    376a:	bbce           	cmpal %fp,%a5
    376c:	6724           	beqs 3792 <_ntoa_long+0xa6>
    376e:	280d           	movel %a5,%d4
      value /= base;
    3770:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    3772:	2f03           	movel %d3,%sp@-
    3774:	2f02           	movel %d2,%sp@-
    3776:	4e93           	jsr %a3@
    3778:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    377a:	7209           	moveq #9,%d1
    377c:	b280           	cmpl %d0,%d1
    377e:	64d6           	bccs 3756 <_ntoa_long+0x6a>
    3780:	d006           	addb %d6,%d0
    3782:	2a44           	moveal %d4,%a5
    3784:	1ac0           	moveb %d0,%a5@+
      value /= base;
    3786:	2f03           	movel %d3,%sp@-
    3788:	2f02           	movel %d2,%sp@-
    378a:	4e92           	jsr %a2@
    378c:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    378e:	b682           	cmpl %d2,%d3
    3790:	63d8           	blss 376a <_ntoa_long+0x7e>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3792:	307c 0001      	moveaw #1,%a0
    3796:	91cc           	subal %a4,%a0
    3798:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    379a:	0805 0001      	btst #1,%d5
    379e:	6700 00c4      	beqw 3864 <_ntoa_long+0x178>
  if (flags & FLAGS_HASH) {
    37a2:	4aaf 0032      	tstl %sp@(50)
    37a6:	6700 014c      	beqw 38f4 <_ntoa_long+0x208>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    37aa:	4aaf 002e      	tstl %sp@(46)
    37ae:	6600 0124      	bnew 38d4 <_ntoa_long+0x1e8>
    37b2:	4a84           	tstl %d4
    37b4:	6600 02aa      	bnew 3a60 <_ntoa_long+0x374>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    37b8:	7210           	moveq #16,%d1
    37ba:	b283           	cmpl %d3,%d1
    37bc:	6700 0394      	beqw 3b52 <_ntoa_long+0x466>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    37c0:	5583           	subql #2,%d3
    37c2:	6700 03fa      	beqw 3bbe <_ntoa_long+0x4d2>
      buf[len++] = '0';
    37c6:	1f7c 0030 0038 	moveb #48,%sp@(56)
    37cc:	7401           	moveq #1,%d2
      buf[len++] = '-';
    37ce:	2802           	movel %d2,%d4
    if (negative) {
    37d0:	4a2f 0037      	tstb %sp@(55)
    37d4:	6700 0132      	beqw 3908 <_ntoa_long+0x21c>
      buf[len++] = '-';
    37d8:	5284           	addql #1,%d4
    37da:	1fbc 002d 2838 	moveb #45,%sp@(38,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    37e0:	2f05           	movel %d5,%sp@-
    37e2:	2f2f 0080      	movel %sp@(128),%sp@-
    37e6:	2f04           	movel %d4,%sp@-
    37e8:	2f0c           	movel %a4,%sp@-
    37ea:	2f2f 0078      	movel %sp@(120),%sp@-
    37ee:	2f2f 0078      	movel %sp@(120),%sp@-
    37f2:	2f2f 0078      	movel %sp@(120),%sp@-
    37f6:	2f2f 0078      	movel %sp@(120),%sp@-
    37fa:	4eb9 0000 362a 	jsr 362a <_out_rev>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3800:	4fef 0020      	lea %sp@(32),%sp
}
    3804:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    3808:	4fef 002c      	lea %sp@(44),%sp
    380c:	4e75           	rts
    flags &= ~FLAGS_HASH;
    380e:	72ef           	moveq #-17,%d1
    3810:	c285           	andl %d5,%d1
  if (!(flags & FLAGS_PRECISION) || value) {
    3812:	4aaf 002e      	tstl %sp@(46)
    3816:	662e           	bnes 3846 <_ntoa_long+0x15a>
    3818:	42af 0032      	clrl %sp@(50)
    flags &= ~FLAGS_HASH;
    381c:	2a01           	movel %d1,%d5
    381e:	0805 0005      	btst #5,%d5
    3822:	6700 ff08      	beqw 372c <_ntoa_long+0x40>
    3826:	7c41           	moveq #65,%d6
    3828:	49ef 0038      	lea %sp@(56),%a4
    382c:	4def 0058      	lea %sp@(88),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    3830:	280c           	movel %a4,%d4
    3832:	47f9 0000 4b38 	lea 4b38 <__umodsi3>,%a3
    3838:	45f9 0000 4aac 	lea 4aac <__udivsi3>,%a2
    383e:	0606 fff6      	addib #-10,%d6
    3842:	6000 ff04      	braw 3748 <_ntoa_long+0x5c>
  if (!(flags & FLAGS_LEFT)) {
    3846:	7802           	moveq #2,%d4
    3848:	c885           	andl %d5,%d4
    384a:	0805 0001      	btst #1,%d5
    384e:	6600 0206      	bnew 3a56 <_ntoa_long+0x36a>
    3852:	42af 0032      	clrl %sp@(50)
    flags &= ~FLAGS_HASH;
    3856:	2a01           	movel %d1,%d5
  if (!(flags & FLAGS_PRECISION) || value) {
    3858:	2f7c 0000 0400 	movel #1024,%sp@(46)
    385e:	002e 
    3860:	49ef 0038      	lea %sp@(56),%a4
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    3864:	4aaf 007c      	tstl %sp@(124)
    3868:	6700 00dc      	beqw 3946 <_ntoa_long+0x25a>
    386c:	7201           	moveq #1,%d1
    386e:	c285           	andl %d5,%d1
    3870:	0805 0000      	btst #0,%d5
    3874:	6700 0184      	beqw 39fa <_ntoa_long+0x30e>
    3878:	4a2f 0037      	tstb %sp@(55)
    387c:	6600 0278      	bnew 3af6 <_ntoa_long+0x40a>
    3880:	740c           	moveq #12,%d2
    3882:	c485           	andl %d5,%d2
    3884:	6600 0270      	bnew 3af6 <_ntoa_long+0x40a>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3888:	b887           	cmpl %d7,%d4
    388a:	6400 0106      	bccw 3992 <_ntoa_long+0x2a6>
    388e:	7020           	moveq #32,%d0
    3890:	b084           	cmpl %d4,%d0
    3892:	6700 02e8      	beqw 3b7c <_ntoa_long+0x490>
    3896:	41f4 4800      	lea %a4@(0,%d4:l),%a0
      buf[len++] = '0';
    389a:	5284           	addql #1,%d4
    389c:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38a0:	b887           	cmpl %d7,%d4
    38a2:	6400 00e8      	bccw 398c <_ntoa_long+0x2a0>
    38a6:	7020           	moveq #32,%d0
    38a8:	b084           	cmpl %d4,%d0
    38aa:	66ee           	bnes 389a <_ntoa_long+0x1ae>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38ac:	4a81           	tstl %d1
    38ae:	6700 0112      	beqw 39c2 <_ntoa_long+0x2d6>
    38b2:	7020           	moveq #32,%d0
    38b4:	b0af 007c      	cmpl %sp@(124),%d0
    38b8:	6400 0108      	bccw 39c2 <_ntoa_long+0x2d6>
  if (flags & FLAGS_HASH) {
    38bc:	4aaf 0032      	tstl %sp@(50)
    38c0:	6700 ff1e      	beqw 37e0 <_ntoa_long+0xf4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    38c4:	4aaf 002e      	tstl %sp@(46)
    38c8:	6600 015c      	bnew 3a26 <_ntoa_long+0x33a>
    38cc:	7220           	moveq #32,%d1
    38ce:	b287           	cmpl %d7,%d1
    38d0:	6700 02cc      	beqw 3b9e <_ntoa_long+0x4b2>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38d4:	7010           	moveq #16,%d0
    38d6:	b083           	cmpl %d3,%d0
    38d8:	6700 01c4      	beqw 3a9e <_ntoa_long+0x3b2>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    38dc:	5583           	subql #2,%d3
    38de:	6700 01e2      	beqw 3ac2 <_ntoa_long+0x3d6>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    38e2:	7020           	moveq #32,%d0
    38e4:	b084           	cmpl %d4,%d0
    38e6:	6700 fef8      	beqw 37e0 <_ntoa_long+0xf4>
      buf[len++] = '0';
    38ea:	2204           	movel %d4,%d1
    38ec:	5284           	addql #1,%d4
    38ee:	1fbc 0030 1838 	moveb #48,%sp@(38,%d1:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    38f4:	7220           	moveq #32,%d1
    38f6:	b284           	cmpl %d4,%d1
    38f8:	6700 fee6      	beqw 37e0 <_ntoa_long+0xf4>
    38fc:	2404           	movel %d4,%d2
      buf[len++] = '-';
    38fe:	2802           	movel %d2,%d4
    if (negative) {
    3900:	4a2f 0037      	tstb %sp@(55)
    3904:	6600 fed2      	bnew 37d8 <_ntoa_long+0xec>
    else if (flags & FLAGS_PLUS) {
    3908:	0805 0002      	btst #2,%d5
    390c:	6700 0206      	beqw 3b14 <_ntoa_long+0x428>
      buf[len++] = '+';  // ignore the space if the '+' exists
    3910:	5284           	addql #1,%d4
    3912:	1fbc 002b 2838 	moveb #43,%sp@(38,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3918:	2f05           	movel %d5,%sp@-
    391a:	2f2f 0080      	movel %sp@(128),%sp@-
    391e:	2f04           	movel %d4,%sp@-
    3920:	2f0c           	movel %a4,%sp@-
    3922:	2f2f 0078      	movel %sp@(120),%sp@-
    3926:	2f2f 0078      	movel %sp@(120),%sp@-
    392a:	2f2f 0078      	movel %sp@(120),%sp@-
    392e:	2f2f 0078      	movel %sp@(120),%sp@-
    3932:	4eb9 0000 362a 	jsr 362a <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3938:	4fef 0020      	lea %sp@(32),%sp
}
    393c:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    3940:	4fef 002c      	lea %sp@(44),%sp
    3944:	4e75           	rts
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3946:	b887           	cmpl %d7,%d4
    3948:	6400 fe58      	bccw 37a2 <_ntoa_long+0xb6>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    394c:	7201           	moveq #1,%d1
    394e:	c285           	andl %d5,%d1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3950:	7020           	moveq #32,%d0
    3952:	b084           	cmpl %d4,%d0
    3954:	6600 ff40      	bnew 3896 <_ntoa_long+0x1aa>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3958:	4a81           	tstl %d1
    395a:	6700 00ac      	beqw 3a08 <_ntoa_long+0x31c>
  if (flags & FLAGS_HASH) {
    395e:	4aaf 0032      	tstl %sp@(50)
    3962:	6700 00c2      	beqw 3a26 <_ntoa_long+0x33a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3966:	4aaf 002e      	tstl %sp@(46)
    396a:	6600 00ba      	bnew 3a26 <_ntoa_long+0x33a>
    396e:	7020           	moveq #32,%d0
    3970:	b087           	cmpl %d7,%d0
    3972:	6700 02d6      	beqw 3c4a <_ntoa_long+0x55e>
    3976:	b0af 007c      	cmpl %sp@(124),%d0
    397a:	6700 02ce      	beqw 3c4a <_ntoa_long+0x55e>
    397e:	7820           	moveq #32,%d4
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3980:	7010           	moveq #16,%d0
    3982:	b083           	cmpl %d3,%d0
    3984:	6600 ff56      	bnew 38dc <_ntoa_long+0x1f0>
    3988:	6000 0114      	braw 3a9e <_ntoa_long+0x3b2>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    398c:	4a81           	tstl %d1
    398e:	6700 fe12      	beqw 37a2 <_ntoa_long+0xb6>
    3992:	b8af 007c      	cmpl %sp@(124),%d4
    3996:	6400 fe0a      	bccw 37a2 <_ntoa_long+0xb6>
    399a:	7220           	moveq #32,%d1
    399c:	b284           	cmpl %d4,%d1
    399e:	6700 0258      	beqw 3bf8 <_ntoa_long+0x50c>
    39a2:	41f4 4800      	lea %a4@(0,%d4:l),%a0
    39a6:	202f 007c      	movel %sp@(124),%d0
    39aa:	d08c           	addl %a4,%d0
    39ac:	4def 0058      	lea %sp@(88),%fp
      buf[len++] = '0';
    39b0:	10bc 0030      	moveb #48,%a0@
    39b4:	2208           	movel %a0,%d1
    39b6:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    39b8:	b1c0           	cmpal %d0,%a0
    39ba:	6700 0142      	beqw 3afe <_ntoa_long+0x412>
    39be:	bdc8           	cmpal %a0,%fp
    39c0:	66ee           	bnes 39b0 <_ntoa_long+0x2c4>
  if (flags & FLAGS_HASH) {
    39c2:	7820           	moveq #32,%d4
    39c4:	4aaf 0032      	tstl %sp@(50)
    39c8:	6600 fde0      	bnew 37aa <_ntoa_long+0xbe>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    39cc:	2f05           	movel %d5,%sp@-
    39ce:	2f2f 0080      	movel %sp@(128),%sp@-
    39d2:	2f04           	movel %d4,%sp@-
    39d4:	2f0c           	movel %a4,%sp@-
    39d6:	2f2f 0078      	movel %sp@(120),%sp@-
    39da:	2f2f 0078      	movel %sp@(120),%sp@-
    39de:	2f2f 0078      	movel %sp@(120),%sp@-
    39e2:	2f2f 0078      	movel %sp@(120),%sp@-
    39e6:	4eb9 0000 362a 	jsr 362a <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    39ec:	4fef 0020      	lea %sp@(32),%sp
}
    39f0:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    39f4:	4fef 002c      	lea %sp@(44),%sp
    39f8:	4e75           	rts
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    39fa:	b887           	cmpl %d7,%d4
    39fc:	6400 fda4      	bccw 37a2 <_ntoa_long+0xb6>
    3a00:	7020           	moveq #32,%d0
    3a02:	b084           	cmpl %d4,%d0
    3a04:	6600 fe90      	bnew 3896 <_ntoa_long+0x1aa>
  if (flags & FLAGS_HASH) {
    3a08:	4aaf 0032      	tstl %sp@(50)
    3a0c:	6718           	beqs 3a26 <_ntoa_long+0x33a>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3a0e:	4aaf 002e      	tstl %sp@(46)
    3a12:	6612           	bnes 3a26 <_ntoa_long+0x33a>
    3a14:	7220           	moveq #32,%d1
    3a16:	b287           	cmpl %d7,%d1
    3a18:	6700 0230      	beqw 3c4a <_ntoa_long+0x55e>
    3a1c:	7220           	moveq #32,%d1
    3a1e:	b2af 007c      	cmpl %sp@(124),%d1
    3a22:	6700 0226      	beqw 3c4a <_ntoa_long+0x55e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a26:	7820           	moveq #32,%d4
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3a28:	2f05           	movel %d5,%sp@-
    3a2a:	2f2f 0080      	movel %sp@(128),%sp@-
    3a2e:	2f04           	movel %d4,%sp@-
    3a30:	2f0c           	movel %a4,%sp@-
    3a32:	2f2f 0078      	movel %sp@(120),%sp@-
    3a36:	2f2f 0078      	movel %sp@(120),%sp@-
    3a3a:	2f2f 0078      	movel %sp@(120),%sp@-
    3a3e:	2f2f 0078      	movel %sp@(120),%sp@-
    3a42:	4eb9 0000 362a 	jsr 362a <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3a48:	4fef 0020      	lea %sp@(32),%sp
}
    3a4c:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    3a50:	4fef 002c      	lea %sp@(44),%sp
    3a54:	4e75           	rts
    flags &= ~FLAGS_HASH;
    3a56:	2a01           	movel %d1,%d5
    3a58:	49ef 0038      	lea %sp@(56),%a4
    3a5c:	6000 fd70      	braw 37ce <_ntoa_long+0xe2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3a60:	b887           	cmpl %d7,%d4
    3a62:	6708           	beqs 3a6c <_ntoa_long+0x380>
    3a64:	b8af 007c      	cmpl %sp@(124),%d4
    3a68:	6600 fe6a      	bnew 38d4 <_ntoa_long+0x1e8>
      len--;
    3a6c:	2204           	movel %d4,%d1
    3a6e:	5381           	subql #1,%d1
      if (len && (base == 16U)) {
    3a70:	7001           	moveq #1,%d0
    3a72:	b084           	cmpl %d4,%d0
    3a74:	6700 fd42      	beqw 37b8 <_ntoa_long+0xcc>
    3a78:	7010           	moveq #16,%d0
    3a7a:	b083           	cmpl %d3,%d0
    3a7c:	6700 0152      	beqw 3bd0 <_ntoa_long+0x4e4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a80:	7002           	moveq #2,%d0
      len--;
    3a82:	2801           	movel %d1,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a84:	b083           	cmpl %d3,%d0
    3a86:	6600 fe64      	bnew 38ec <_ntoa_long+0x200>
      buf[len++] = 'b';
    3a8a:	1fbc 0062 4838 	moveb #98,%sp@(38,%d4:l)
    3a90:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3a92:	7020           	moveq #32,%d0
    3a94:	b084           	cmpl %d4,%d0
    3a96:	6700 fd48      	beqw 37e0 <_ntoa_long+0xf4>
    3a9a:	6000 fe4e      	braw 38ea <_ntoa_long+0x1fe>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3a9e:	7220           	moveq #32,%d1
    3aa0:	0805 0005      	btst #5,%d5
    3aa4:	6600 00fe      	bnew 3ba4 <_ntoa_long+0x4b8>
    3aa8:	b284           	cmpl %d4,%d1
    3aaa:	6700 ff7a      	beqw 3a26 <_ntoa_long+0x33a>
      buf[len++] = 'x';
    3aae:	1fbc 0078 4838 	moveb #120,%sp@(38,%d4:l)
    3ab4:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3ab6:	7020           	moveq #32,%d0
    3ab8:	b084           	cmpl %d4,%d0
    3aba:	6700 fd24      	beqw 37e0 <_ntoa_long+0xf4>
    3abe:	6000 fe2a      	braw 38ea <_ntoa_long+0x1fe>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3ac2:	7220           	moveq #32,%d1
    3ac4:	b284           	cmpl %d4,%d1
    3ac6:	66c2           	bnes 3a8a <_ntoa_long+0x39e>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3ac8:	2f05           	movel %d5,%sp@-
    3aca:	2f2f 0080      	movel %sp@(128),%sp@-
    3ace:	2f04           	movel %d4,%sp@-
    3ad0:	2f0c           	movel %a4,%sp@-
    3ad2:	2f2f 0078      	movel %sp@(120),%sp@-
    3ad6:	2f2f 0078      	movel %sp@(120),%sp@-
    3ada:	2f2f 0078      	movel %sp@(120),%sp@-
    3ade:	2f2f 0078      	movel %sp@(120),%sp@-
    3ae2:	4eb9 0000 362a 	jsr 362a <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3ae8:	4fef 0020      	lea %sp@(32),%sp
}
    3aec:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    3af0:	4fef 002c      	lea %sp@(44),%sp
    3af4:	4e75           	rts
      width--;
    3af6:	53af 007c      	subql #1,%sp@(124)
    3afa:	6000 fd8c      	braw 3888 <_ntoa_long+0x19c>
      buf[len++] = '0';
    3afe:	307c 0001      	moveaw #1,%a0
    3b02:	91cc           	subal %a4,%a0
    3b04:	2808           	movel %a0,%d4
    3b06:	d881           	addl %d1,%d4
  if (flags & FLAGS_HASH) {
    3b08:	4aaf 0032      	tstl %sp@(50)
    3b0c:	6600 fc9c      	bnew 37aa <_ntoa_long+0xbe>
    3b10:	6000 fde2      	braw 38f4 <_ntoa_long+0x208>
    else if (flags & FLAGS_SPACE) {
    3b14:	0805 0003      	btst #3,%d5
    3b18:	6700 fcc6      	beqw 37e0 <_ntoa_long+0xf4>
      buf[len++] = ' ';
    3b1c:	5284           	addql #1,%d4
    3b1e:	1fbc 0020 2838 	moveb #32,%sp@(38,%d2:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3b24:	2f05           	movel %d5,%sp@-
    3b26:	2f2f 0080      	movel %sp@(128),%sp@-
    3b2a:	2f04           	movel %d4,%sp@-
    3b2c:	2f0c           	movel %a4,%sp@-
    3b2e:	2f2f 0078      	movel %sp@(120),%sp@-
    3b32:	2f2f 0078      	movel %sp@(120),%sp@-
    3b36:	2f2f 0078      	movel %sp@(120),%sp@-
    3b3a:	2f2f 0078      	movel %sp@(120),%sp@-
    3b3e:	4eb9 0000 362a 	jsr 362a <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3b44:	4fef 0020      	lea %sp@(32),%sp
}
    3b48:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    3b4c:	4fef 002c      	lea %sp@(44),%sp
    3b50:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3b52:	0805 0005      	btst #5,%d5
    3b56:	6612           	bnes 3b6a <_ntoa_long+0x47e>
      buf[len++] = 'x';
    3b58:	1f7c 0078 0038 	moveb #120,%sp@(56)
      buf[len++] = '0';
    3b5e:	1f7c 0030 0039 	moveb #48,%sp@(57)
    3b64:	7402           	moveq #2,%d2
    3b66:	6000 fc66      	braw 37ce <_ntoa_long+0xe2>
      buf[len++] = 'X';
    3b6a:	1f7c 0058 0038 	moveb #88,%sp@(56)
      buf[len++] = '0';
    3b70:	1f7c 0030 0039 	moveb #48,%sp@(57)
    3b76:	7402           	moveq #2,%d2
    3b78:	6000 fc54      	braw 37ce <_ntoa_long+0xe2>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3b7c:	7220           	moveq #32,%d1
    3b7e:	b2af 007c      	cmpl %sp@(124),%d1
    3b82:	6400 fdda      	bccw 395e <_ntoa_long+0x272>
  if (flags & FLAGS_HASH) {
    3b86:	4aaf 0032      	tstl %sp@(50)
    3b8a:	6700 fc54      	beqw 37e0 <_ntoa_long+0xf4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3b8e:	4aaf 002e      	tstl %sp@(46)
    3b92:	6600 fe92      	bnew 3a26 <_ntoa_long+0x33a>
    3b96:	7020           	moveq #32,%d0
    3b98:	b087           	cmpl %d7,%d0
    3b9a:	6600 fd38      	bnew 38d4 <_ntoa_long+0x1e8>
      len--;
    3b9e:	721f           	moveq #31,%d1
    3ba0:	6000 fed6      	braw 3a78 <_ntoa_long+0x38c>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3ba4:	b284           	cmpl %d4,%d1
    3ba6:	6700 fe7e      	beqw 3a26 <_ntoa_long+0x33a>
      buf[len++] = 'X';
    3baa:	1fbc 0058 4838 	moveb #88,%sp@(38,%d4:l)
    3bb0:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    3bb2:	7020           	moveq #32,%d0
    3bb4:	b084           	cmpl %d4,%d0
    3bb6:	6700 fc28      	beqw 37e0 <_ntoa_long+0xf4>
    3bba:	6000 fd2e      	braw 38ea <_ntoa_long+0x1fe>
      buf[len++] = 'b';
    3bbe:	1f7c 0062 0038 	moveb #98,%sp@(56)
      buf[len++] = '0';
    3bc4:	1f7c 0030 0039 	moveb #48,%sp@(57)
    3bca:	7402           	moveq #2,%d2
    3bcc:	6000 fc00      	braw 37ce <_ntoa_long+0xe2>
      buf[len++] = 'x';
    3bd0:	41f4 48fe      	lea %a4@(fffffffffffffffe,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3bd4:	0805 0005      	btst #5,%d5
    3bd8:	670c           	beqs 3be6 <_ntoa_long+0x4fa>
      buf[len++] = 'X';
    3bda:	5384           	subql #1,%d4
    3bdc:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    3be0:	2204           	movel %d4,%d1
    3be2:	6000 fd08      	braw 38ec <_ntoa_long+0x200>
      buf[len++] = 'x';
    3be6:	2204           	movel %d4,%d1
    3be8:	5381           	subql #1,%d1
    3bea:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    3bee:	1fbc 0030 1838 	moveb #48,%sp@(38,%d1:l)
    3bf4:	6000 fcfe      	braw 38f4 <_ntoa_long+0x208>
  if (flags & FLAGS_HASH) {
    3bf8:	4aaf 0032      	tstl %sp@(50)
    3bfc:	6700 fbe2      	beqw 37e0 <_ntoa_long+0xf4>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3c00:	4aaf 002e      	tstl %sp@(46)
    3c04:	6600 fe20      	bnew 3a26 <_ntoa_long+0x33a>
    3c08:	7020           	moveq #32,%d0
    3c0a:	b087           	cmpl %d7,%d0
    3c0c:	6790           	beqs 3b9e <_ntoa_long+0x4b2>
    3c0e:	b0af 007c      	cmpl %sp@(124),%d0
    3c12:	678a           	beqs 3b9e <_ntoa_long+0x4b2>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    3c14:	7210           	moveq #16,%d1
    3c16:	b283           	cmpl %d3,%d1
    3c18:	6700 fe0c      	beqw 3a26 <_ntoa_long+0x33a>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    3c1c:	2f05           	movel %d5,%sp@-
    3c1e:	2f2f 0080      	movel %sp@(128),%sp@-
    3c22:	2f04           	movel %d4,%sp@-
    3c24:	2f0c           	movel %a4,%sp@-
    3c26:	2f2f 0078      	movel %sp@(120),%sp@-
    3c2a:	2f2f 0078      	movel %sp@(120),%sp@-
    3c2e:	2f2f 0078      	movel %sp@(120),%sp@-
    3c32:	2f2f 0078      	movel %sp@(120),%sp@-
    3c36:	4eb9 0000 362a 	jsr 362a <_out_rev>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    3c3c:	4fef 0020      	lea %sp@(32),%sp
}
    3c40:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    3c44:	4fef 002c      	lea %sp@(44),%sp
    3c48:	4e75           	rts
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    3c4a:	7820           	moveq #32,%d4
      len--;
    3c4c:	721f           	moveq #31,%d1
    3c4e:	6000 fe28      	braw 3a78 <_ntoa_long+0x38c>

00003c52 <_out_char>:
{
    3c52:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    3c56:	4a00           	tstb %d0
    3c58:	6602           	bnes 3c5c <_out_char+0xa>
}
    3c5a:	4e75           	rts
    _putchar(character);
    3c5c:	4880           	extw %d0
    3c5e:	3040           	moveaw %d0,%a0
    3c60:	2f48 0004      	movel %a0,%sp@(4)
    3c64:	4ef9 0000 49ba 	jmp 49ba <_putchar>

00003c6a <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    3c6a:	4fef ffb0      	lea %sp@(-80),%sp
    3c6e:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    3c72:	2e2f 0084      	movel %sp@(132),%d7
    3c76:	2c2f 0088      	movel %sp@(136),%d6
    3c7a:	2c6f 008c      	moveal %sp@(140),%fp
    3c7e:	2a2f 0090      	movel %sp@(144),%d5
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    3c82:	4a87           	tstl %d7
    3c84:	6700 02ba      	beqw 3f40 <_vsnprintf+0x2d6>
    // use null output function
    out = _out_null;
  }

  while (*format)
    3c88:	1016           	moveb %fp@,%d0
    3c8a:	9bcd           	subal %a5,%a5
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    3c8c:	267c 0000 3d0c 	moveal #15628,%a3
  while (*format)
    3c92:	7400           	moveq #0,%d2
    3c94:	4a00           	tstb %d0
    3c96:	672c           	beqs 3cc4 <_vsnprintf+0x5a>
    3c98:	2845           	moveal %d5,%a4
      format++;
    3c9a:	528e           	addql #1,%fp
    if (*format != '%') {
    3c9c:	0c00 0025      	cmpib #37,%d0
    3ca0:	6748           	beqs 3cea <_vsnprintf+0x80>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
    3ca2:	240d           	movel %a5,%d2
    3ca4:	5282           	addql #1,%d2
    3ca6:	2f06           	movel %d6,%sp@-
    3ca8:	2f0d           	movel %a5,%sp@-
    3caa:	2f07           	movel %d7,%sp@-
    3cac:	4880           	extw %d0
    3cae:	3040           	moveaw %d0,%a0
    3cb0:	2f08           	movel %a0,%sp@-
    3cb2:	206f 0090      	moveal %sp@(144),%a0
    3cb6:	4e90           	jsr %a0@
        format++;
        break;
    3cb8:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    3cbc:	2a42           	moveal %d2,%a5
  while (*format)
    3cbe:	1016           	moveb %fp@,%d0
    3cc0:	66d8           	bnes 3c9a <_vsnprintf+0x30>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    3cc2:	240d           	movel %a5,%d2
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    3cc4:	bbc6           	cmpal %d6,%a5
    3cc6:	6504           	bcss 3ccc <_vsnprintf+0x62>
    3cc8:	2a46           	moveal %d6,%a5
    3cca:	538d           	subql #1,%a5
    3ccc:	2f06           	movel %d6,%sp@-
    3cce:	2f0d           	movel %a5,%sp@-
    3cd0:	2f07           	movel %d7,%sp@-
    3cd2:	42a7           	clrl %sp@-
    3cd4:	206f 0090      	moveal %sp@(144),%a0
    3cd8:	4e90           	jsr %a0@
  return (int)idx;
    3cda:	4fef 0010      	lea %sp@(16),%sp
}
    3cde:	2002           	movel %d2,%d0
    3ce0:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    3ce4:	4fef 0050      	lea %sp@(80),%sp
    3ce8:	4e75           	rts
    flags = 0U;
    3cea:	7800           	moveq #0,%d4
      switch (*format) {
    3cec:	224e           	moveal %fp,%a1
    3cee:	1019           	moveb %a1@+,%d0
    3cf0:	1200           	moveb %d0,%d1
    3cf2:	0601 ffe0      	addib #-32,%d1
    3cf6:	0c01 0010      	cmpib #16,%d1
    3cfa:	6232           	bhis 3d2e <_vsnprintf+0xc4>
    3cfc:	0281 0000 00ff 	andil #255,%d1
    3d02:	d281           	addl %d1,%d1
    3d04:	3233 1800      	movew %a3@(0,%d1:l),%d1
    3d08:	4efb 1002      	jmp %pc@(3d0c <_vsnprintf+0xa2>,%d1:w)
    3d0c:	010a 0022      	movepw %a2@(34),%d0
    3d10:	0022 0100      	orib #0,%a2@-
    3d14:	0022 0022      	orib #34,%a2@-
    3d18:	0022 0022      	orib #34,%a2@-
    3d1c:	0022 0022      	orib #34,%a2@-
    3d20:	0022 00f6      	orib #-10,%a2@-
    3d24:	0022 00ec      	orib #-20,%a2@-
    3d28:	0022 0022      	orib #34,%a2@-
    3d2c:	00e2           	.short 0x00e2
  return (ch >= '0') && (ch <= '9');
    3d2e:	1200           	moveb %d0,%d1
    3d30:	0601 ffd0      	addib #-48,%d1
    if (_is_digit(*format)) {
    3d34:	0c01 0009      	cmpib #9,%d1
    3d38:	6300 00e6      	blsw 3e20 <_vsnprintf+0x1b6>
    else if (*format == '*') {
    3d3c:	0c00 002a      	cmpib #42,%d0
    3d40:	6700 01ea      	beqw 3f2c <_vsnprintf+0x2c2>
    width = 0U;
    3d44:	95ca           	subal %a2,%a2
    if (*format == '.') {
    3d46:	0c00 002e      	cmpib #46,%d0
    3d4a:	6700 0120      	beqw 3e6c <_vsnprintf+0x202>
    precision = 0U;
    3d4e:	7a00           	moveq #0,%d5
        format++;
    3d50:	2209           	movel %a1,%d1
    switch (*format) {
    3d52:	0c00 006c      	cmpib #108,%d0
    3d56:	6700 0142      	beqw 3e9a <_vsnprintf+0x230>
    3d5a:	0c00 006c      	cmpib #108,%d0
    3d5e:	6e00 01ba      	bgtw 3f1a <_vsnprintf+0x2b0>
    3d62:	0c00 0068      	cmpib #104,%d0
    3d66:	6700 0518      	beqw 4280 <_vsnprintf+0x616>
    3d6a:	0c00 006a      	cmpib #106,%d0
    3d6e:	6600 01dc      	bnew 3f4c <_vsnprintf+0x2e2>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3d72:	0044 0200      	oriw #512,%d4
        if (*format == 'l') {
    3d76:	102e 0001      	moveb %fp@(1),%d0
        format++;
    3d7a:	2c41           	moveal %d1,%fp
    3d7c:	528e           	addql #1,%fp
    switch (*format) {
    3d7e:	0c00 0066      	cmpib #102,%d0
    3d82:	6e00 0132      	bgtw 3eb6 <_vsnprintf+0x24c>
    3d86:	0c00 0045      	cmpib #69,%d0
    3d8a:	6f00 04c8      	blew 4254 <_vsnprintf+0x5ea>
    3d8e:	1200           	moveb %d0,%d1
    3d90:	0601 ffba      	addib #-70,%d1
    3d94:	0c01 0020      	cmpib #32,%d1
    3d98:	6200 ff08      	bhiw 3ca2 <_vsnprintf+0x38>
    3d9c:	0281 0000 00ff 	andil #255,%d1
    3da2:	d281           	addl %d1,%d1
    3da4:	323b 1806      	movew %pc@(3dac <_vsnprintf+0x142>,%d1:l),%d1
    3da8:	4efb 1002      	jmp %pc@(3dac <_vsnprintf+0x142>,%d1:w)
    3dac:	01c2           	bset %d0,%d2
    3dae:	fef6           	.short 0xfef6
    3db0:	fef6           	.short 0xfef6
    3db2:	fef6           	.short 0xfef6
    3db4:	fef6           	.short 0xfef6
    3db6:	fef6           	.short 0xfef6
    3db8:	fef6           	.short 0xfef6
    3dba:	fef6           	.short 0xfef6
    3dbc:	fef6           	.short 0xfef6
    3dbe:	fef6           	.short 0xfef6
    3dc0:	fef6           	.short 0xfef6
    3dc2:	fef6           	.short 0xfef6
    3dc4:	fef6           	.short 0xfef6
    3dc6:	fef6           	.short 0xfef6
    3dc8:	fef6           	.short 0xfef6
    3dca:	fef6           	.short 0xfef6
    3dcc:	fef6           	.short 0xfef6
    3dce:	fef6           	.short 0xfef6
    3dd0:	066e fef6 fef6 	addiw #-266,%fp@(-266)
    3dd6:	fef6           	.short 0xfef6
    3dd8:	fef6           	.short 0xfef6
    3dda:	fef6           	.short 0xfef6
    3ddc:	fef6           	.short 0xfef6
    3dde:	fef6           	.short 0xfef6
    3de0:	fef6           	.short 0xfef6
    3de2:	fef6           	.short 0xfef6
    3de4:	066e 044e 066e 	addiw #1102,%fp@(1646)
    3dea:	fef6           	.short 0xfef6
    3dec:	01c2           	bset %d0,%d2
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    3dee:	7001           	moveq #1,%d0
    3df0:	8880           	orl %d0,%d4
  while (*format)
    3df2:	2c49           	moveal %a1,%fp
    3df4:	6000 fef6      	braw 3cec <_vsnprintf+0x82>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    3df8:	7202           	moveq #2,%d1
    3dfa:	8881           	orl %d1,%d4
  while (*format)
    3dfc:	2c49           	moveal %a1,%fp
    3dfe:	6000 feec      	braw 3cec <_vsnprintf+0x82>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    3e02:	7404           	moveq #4,%d2
    3e04:	8882           	orl %d2,%d4
  while (*format)
    3e06:	2c49           	moveal %a1,%fp
    3e08:	6000 fee2      	braw 3cec <_vsnprintf+0x82>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    3e0c:	7010           	moveq #16,%d0
    3e0e:	8880           	orl %d0,%d4
  while (*format)
    3e10:	2c49           	moveal %a1,%fp
    3e12:	6000 fed8      	braw 3cec <_vsnprintf+0x82>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    3e16:	7608           	moveq #8,%d3
    3e18:	8883           	orl %d3,%d4
  while (*format)
    3e1a:	2c49           	moveal %a1,%fp
    3e1c:	6000 fece      	braw 3cec <_vsnprintf+0x82>
  unsigned int i = 0U;
    3e20:	95ca           	subal %a2,%a2
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3e22:	2c49           	moveal %a1,%fp
    3e24:	220a           	movel %a2,%d1
    3e26:	d28a           	addl %a2,%d1
    3e28:	d281           	addl %d1,%d1
    3e2a:	d5c1           	addal %d1,%a2
    3e2c:	d5ca           	addal %a2,%a2
    3e2e:	4880           	extw %d0
    3e30:	45f2 00d0      	lea %a2@(ffffffffffffffd0,%d0:w),%a2
  while (_is_digit(**str)) {
    3e34:	1011           	moveb %a1@,%d0
  return (ch >= '0') && (ch <= '9');
    3e36:	1200           	moveb %d0,%d1
    3e38:	0601 ffd0      	addib #-48,%d1
    3e3c:	5289           	addql #1,%a1
  while (_is_digit(**str)) {
    3e3e:	0c01 0009      	cmpib #9,%d1
    3e42:	6200 ff02      	bhiw 3d46 <_vsnprintf+0xdc>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    3e46:	2c49           	moveal %a1,%fp
    3e48:	220a           	movel %a2,%d1
    3e4a:	d28a           	addl %a2,%d1
    3e4c:	d281           	addl %d1,%d1
    3e4e:	d5c1           	addal %d1,%a2
    3e50:	d5ca           	addal %a2,%a2
    3e52:	4880           	extw %d0
    3e54:	45f2 00d0      	lea %a2@(ffffffffffffffd0,%d0:w),%a2
  while (_is_digit(**str)) {
    3e58:	1011           	moveb %a1@,%d0
  return (ch >= '0') && (ch <= '9');
    3e5a:	1200           	moveb %d0,%d1
    3e5c:	0601 ffd0      	addib #-48,%d1
    3e60:	5289           	addql #1,%a1
  while (_is_digit(**str)) {
    3e62:	0c01 0009      	cmpib #9,%d1
    3e66:	63ba           	blss 3e22 <_vsnprintf+0x1b8>
    3e68:	6000 fedc      	braw 3d46 <_vsnprintf+0xdc>
      flags |= FLAGS_PRECISION;
    3e6c:	0044 0400      	oriw #1024,%d4
      if (_is_digit(*format)) {
    3e70:	102e 0001      	moveb %fp@(1),%d0
  return (ch >= '0') && (ch <= '9');
    3e74:	1400           	moveb %d0,%d2
    3e76:	0602 ffd0      	addib #-48,%d2
      if (_is_digit(*format)) {
    3e7a:	0c02 0009      	cmpib #9,%d2
    3e7e:	6300 04bc      	blsw 433c <_vsnprintf+0x6d2>
      else if (*format == '*') {
    3e82:	0c00 002a      	cmpib #42,%d0
    3e86:	6700 0566      	beqw 43ee <_vsnprintf+0x784>
      format++;
    3e8a:	2c49           	moveal %a1,%fp
    precision = 0U;
    3e8c:	7a00           	moveq #0,%d5
    3e8e:	5289           	addql #1,%a1
        format++;
    3e90:	2209           	movel %a1,%d1
    switch (*format) {
    3e92:	0c00 006c      	cmpib #108,%d0
    3e96:	6600 fec2      	bnew 3d5a <_vsnprintf+0xf0>
        if (*format == 'l') {
    3e9a:	102e 0001      	moveb %fp@(1),%d0
    3e9e:	0c00 006c      	cmpib #108,%d0
    3ea2:	6700 0662      	beqw 4506 <_vsnprintf+0x89c>
        flags |= FLAGS_LONG;
    3ea6:	0044 0100      	oriw #256,%d4
        format++;
    3eaa:	2c41           	moveal %d1,%fp
    3eac:	528e           	addql #1,%fp
    switch (*format) {
    3eae:	0c00 0066      	cmpib #102,%d0
    3eb2:	6f00 fed2      	blew 3d86 <_vsnprintf+0x11c>
    3eb6:	1200           	moveb %d0,%d1
    3eb8:	0601 ff97      	addib #-105,%d1
    3ebc:	0c01 000f      	cmpib #15,%d1
    3ec0:	6200 fde0      	bhiw 3ca2 <_vsnprintf+0x38>
    3ec4:	7600           	moveq #0,%d3
    3ec6:	1601           	moveb %d1,%d3
    3ec8:	7401           	moveq #1,%d2
    3eca:	e7aa           	lsll %d3,%d2
    3ecc:	0282 0000 9041 	andil #36929,%d2
    3ed2:	6600 049a      	bnew 436e <_vsnprintf+0x704>
    3ed6:	0c01 000a      	cmpib #10,%d1
    3eda:	6700 03ba      	beqw 4296 <_vsnprintf+0x62c>
    3ede:	0c01 0007      	cmpib #7,%d1
    3ee2:	6600 fdbe      	bnew 3ca2 <_vsnprintf+0x38>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    3ee6:	7021           	moveq #33,%d0
    3ee8:	8084           	orl %d4,%d0
    3eea:	2f00           	movel %d0,%sp@-
    3eec:	4878 0008      	pea 8 <DIVIDE_BY_ZERO>
    3ef0:	2f05           	movel %d5,%sp@-
    3ef2:	4878 0010      	pea 10 <DUART_MR1B>
    3ef6:	42a7           	clrl %sp@-
    3ef8:	2f1c           	movel %a4@+,%sp@-
    3efa:	2f06           	movel %d6,%sp@-
    3efc:	2f0d           	movel %a5,%sp@-
    3efe:	2f07           	movel %d7,%sp@-
    3f00:	2f2f 00a4      	movel %sp@(164),%sp@-
    3f04:	4eb9 0000 36ec 	jsr 36ec <_ntoa_long>
    3f0a:	2a40           	moveal %d0,%a5
        break;
    3f0c:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    3f10:	1016           	moveb %fp@,%d0
    3f12:	6600 fd86      	bnew 3c9a <_vsnprintf+0x30>
    3f16:	6000 fdaa      	braw 3cc2 <_vsnprintf+0x58>
    switch (*format) {
    3f1a:	0c00 007a      	cmpib #122,%d0
    3f1e:	6632           	bnes 3f52 <_vsnprintf+0x2e8>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    3f20:	0044 0100      	oriw #256,%d4
        if (*format == 'l') {
    3f24:	102e 0001      	moveb %fp@(1),%d0
        break;
    3f28:	6000 fe50      	braw 3d7a <_vsnprintf+0x110>
      const int w = va_arg(va, int);
    3f2c:	245c           	moveal %a4@+,%a2
      if (w < 0) {
    3f2e:	b4fc 0000      	cmpaw #0,%a2
    3f32:	6d24           	blts 3f58 <_vsnprintf+0x2ee>
    if (*format == '.') {
    3f34:	102e 0001      	moveb %fp@(1),%d0
      format++;
    3f38:	2c49           	moveal %a1,%fp
    3f3a:	5289           	addql #1,%a1
    3f3c:	6000 fe08      	braw 3d46 <_vsnprintf+0xdc>
    out = _out_null;
    3f40:	2f7c 0000 3628 	movel #13864,%sp@(128)
    3f46:	0080 
    3f48:	6000 fd3e      	braw 3c88 <_vsnprintf+0x1e>
    switch (*format) {
    3f4c:	220e           	movel %fp,%d1
    3f4e:	6000 fe2a      	braw 3d7a <_vsnprintf+0x110>
        format++;
    3f52:	2c49           	moveal %a1,%fp
    3f54:	6000 ff60      	braw 3eb6 <_vsnprintf+0x24c>
        flags |= FLAGS_LEFT;    // reverse padding
    3f58:	7202           	moveq #2,%d1
    3f5a:	8881           	orl %d1,%d4
        width = (unsigned int)-w;
    3f5c:	240a           	movel %a2,%d2
    3f5e:	4482           	negl %d2
    3f60:	2442           	moveal %d2,%a2
    if (*format == '.') {
    3f62:	102e 0001      	moveb %fp@(1),%d0
      format++;
    3f66:	2c49           	moveal %a1,%fp
    3f68:	5289           	addql #1,%a1
    3f6a:	6000 fdda      	braw 3d46 <_vsnprintf+0xdc>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    3f6e:	0c00 0046      	cmpib #70,%d0
    3f72:	6700 049e      	beqw 4412 <_vsnprintf+0x7a8>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    3f76:	2f4c 003e      	movel %a4,%sp@(62)
    3f7a:	204c           	moveal %a4,%a0
    3f7c:	50af 003e      	addql #8,%sp@(62)
    3f80:	2f58 0036      	movel %a0@+,%sp@(54)
    3f84:	2f58 003a      	movel %a0@+,%sp@(58)
  if (value != value)
    3f88:	2f2f 003a      	movel %sp@(58),%sp@-
    3f8c:	2f2f 003a      	movel %sp@(58),%sp@-
    3f90:	2f2f 0042      	movel %sp@(66),%sp@-
    3f94:	2f2f 0042      	movel %sp@(66),%sp@-
    3f98:	4eb9 0000 55d0 	jsr 55d0 <__nedf2>
    3f9e:	4fef 0010      	lea %sp@(16),%sp
    3fa2:	4a80           	tstl %d0
    3fa4:	6600 0656      	bnew 45fc <_vsnprintf+0x992>
  if (value < -DBL_MAX)
    3fa8:	49f9 0000 5618 	lea 5618 <__ltdf2>,%a4
    3fae:	4878 ffff      	pea ffffffff <LESS+0x0>
    3fb2:	2f3c ffef ffff 	movel #-1048577,%sp@-
    3fb8:	2f2f 0042      	movel %sp@(66),%sp@-
    3fbc:	2f2f 0042      	movel %sp@(66),%sp@-
    3fc0:	4e94           	jsr %a4@
    3fc2:	4fef 0010      	lea %sp@(16),%sp
    3fc6:	4a80           	tstl %d0
    3fc8:	6d00 065a      	bltw 4624 <_vsnprintf+0x9ba>
  if (value > DBL_MAX)
    3fcc:	4878 ffff      	pea ffffffff <LESS+0x0>
    3fd0:	2f3c 7fef ffff 	movel #2146435071,%sp@-
    3fd6:	2f2f 0042      	movel %sp@(66),%sp@-
    3fda:	2f2f 0042      	movel %sp@(66),%sp@-
    3fde:	4eb9 0000 55f4 	jsr 55f4 <__gtdf2>
    3fe4:	4fef 0010      	lea %sp@(16),%sp
    3fe8:	4a80           	tstl %d0
    3fea:	6e00 048e      	bgtw 447a <_vsnprintf+0x810>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    3fee:	42a7           	clrl %sp@-
    3ff0:	2f3c 41cd cd65 	movel #1104006501,%sp@-
    3ff6:	2f2f 0042      	movel %sp@(66),%sp@-
    3ffa:	2f2f 0042      	movel %sp@(66),%sp@-
    3ffe:	4eb9 0000 55f4 	jsr 55f4 <__gtdf2>
    4004:	4fef 0010      	lea %sp@(16),%sp
    4008:	4a80           	tstl %d0
    400a:	6e00 05e6      	bgtw 45f2 <_vsnprintf+0x988>
    400e:	42a7           	clrl %sp@-
    4010:	2f3c c1cd cd65 	movel #-1043477147,%sp@-
    4016:	2f2f 0042      	movel %sp@(66),%sp@-
    401a:	2f2f 0042      	movel %sp@(66),%sp@-
    401e:	4e94           	jsr %a4@
    4020:	4fef 0010      	lea %sp@(16),%sp
    4024:	4a80           	tstl %d0
    4026:	6d00 05ca      	bltw 45f2 <_vsnprintf+0x988>
  if (value < 0) {
    402a:	4282           	clrl %d2
    402c:	4283           	clrl %d3
    402e:	2f03           	movel %d3,%sp@-
    4030:	2f02           	movel %d2,%sp@-
    4032:	2f2f 0042      	movel %sp@(66),%sp@-
    4036:	2f2f 0042      	movel %sp@(66),%sp@-
    403a:	4e94           	jsr %a4@
    403c:	4fef 0010      	lea %sp@(16),%sp
    4040:	4a80           	tstl %d0
    4042:	6d00 064a      	bltw 468e <_vsnprintf+0xa24>
  bool negative = false;
    4046:	422f 005b      	clrb %sp@(91)
    404a:	2f7c 0000 4bf2 	movel #19442,%sp@(78)
    4050:	004e 
  if (!(flags & FLAGS_PRECISION)) {
    4052:	2604           	movel %d4,%d3
    4054:	0283 0000 0400 	andil #1024,%d3
    405a:	0804 000a      	btst #10,%d4
    405e:	6700 078e      	beqw 47ee <_vsnprintf+0xb84>
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    4062:	7009           	moveq #9,%d0
    4064:	b085           	cmpl %d5,%d0
    4066:	6400 0904      	bccw 496c <_vsnprintf+0xd02>
    406a:	41ef 005c      	lea %sp@(92),%a0
    406e:	2f48 004a      	movel %a0,%sp@(74)
    4072:	76f7           	moveq #-9,%d3
    4074:	d685           	addl %d5,%d3
    4076:	7000           	moveq #0,%d0
    4078:	2245           	moveal %d5,%a1
    buf[len++] = '0';
    407a:	5280           	addql #1,%d0
    407c:	10fc 0030      	moveb #48,%a0@+
    prec--;
    4080:	2209           	movel %a1,%d1
    4082:	9280           	subl %d0,%d1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    4084:	7420           	moveq #32,%d2
    4086:	b480           	cmpl %d0,%d2
    4088:	6700 0846      	beqw 48d0 <_vsnprintf+0xc66>
    408c:	b680           	cmpl %d0,%d3
    408e:	66ea           	bnes 407a <_vsnprintf+0x410>
    4090:	2241           	moveal %d1,%a1
    4092:	2f7c 41cd cd65 	movel #1104006501,%sp@(82)
    4098:	0052 
    409a:	42af 0056      	clrl %sp@(86)
  int whole = (int)value;
    409e:	2f2f 003a      	movel %sp@(58),%sp@-
    40a2:	2f2f 003a      	movel %sp@(58),%sp@-
    40a6:	2f49 003a      	movel %a1,%sp@(58)
    40aa:	4eb9 0000 5ac8 	jsr 5ac8 <__fixdfsi>
    40b0:	508f           	addql #8,%sp
    40b2:	2a00           	movel %d0,%d5
  double tmp = (value - whole) * pow10[prec];
    40b4:	2f00           	movel %d0,%sp@-
    40b6:	4eb9 0000 5884 	jsr 5884 <__floatsidf>
    40bc:	2e81           	movel %d1,%sp@
    40be:	2f00           	movel %d0,%sp@-
    40c0:	2f2f 0042      	movel %sp@(66),%sp@-
    40c4:	2f2f 0042      	movel %sp@(66),%sp@-
    40c8:	206f 005e      	moveal %sp@(94),%a0
    40cc:	4e90           	jsr %a0@
    40ce:	4fef 0010      	lea %sp@(16),%sp
    40d2:	2f2f 0056      	movel %sp@(86),%sp@-
    40d6:	2f2f 0056      	movel %sp@(86),%sp@-
    40da:	2f01           	movel %d1,%sp@-
    40dc:	2f00           	movel %d0,%sp@-
    40de:	4eb9 0000 4f8e 	jsr 4f8e <__muldf3>
    40e4:	4fef 0010      	lea %sp@(16),%sp
    40e8:	2f40 0042      	movel %d0,%sp@(66)
    40ec:	2f41 0046      	movel %d1,%sp@(70)
  unsigned long frac = (unsigned long)tmp;
    40f0:	2f2f 0046      	movel %sp@(70),%sp@-
    40f4:	2f2f 0046      	movel %sp@(70),%sp@-
    40f8:	4eb9 0000 5660 	jsr 5660 <__fixunsdfsi>
    40fe:	508f           	addql #8,%sp
    4100:	2400           	movel %d0,%d2
  diff = tmp - frac;
    4102:	2f00           	movel %d0,%sp@-
    4104:	4eb9 0000 5802 	jsr 5802 <__floatunsidf>
    410a:	2e81           	movel %d1,%sp@
    410c:	2f00           	movel %d0,%sp@-
    410e:	2f2f 004e      	movel %sp@(78),%sp@-
    4112:	2f2f 004e      	movel %sp@(78),%sp@-
    4116:	206f 005e      	moveal %sp@(94),%a0
    411a:	4e90           	jsr %a0@
    411c:	4fef 0010      	lea %sp@(16),%sp
    4120:	2f40 0042      	movel %d0,%sp@(66)
    4124:	2f41 0046      	movel %d1,%sp@(70)
  if (diff > 0.5) {
    4128:	42a7           	clrl %sp@-
    412a:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    4130:	2f2f 004e      	movel %sp@(78),%sp@-
    4134:	2f2f 004e      	movel %sp@(78),%sp@-
    4138:	4eb9 0000 55f4 	jsr 55f4 <__gtdf2>
    413e:	4fef 0010      	lea %sp@(16),%sp
    4142:	226f 0032      	moveal %sp@(50),%a1
    4146:	4a80           	tstl %d0
    4148:	6f00 066e      	blew 47b8 <_vsnprintf+0xb4e>
    ++frac;
    414c:	5282           	addql #1,%d2
    if (frac >= pow10[prec]) {
    414e:	2f02           	movel %d2,%sp@-
    4150:	4eb9 0000 5802 	jsr 5802 <__floatunsidf>
    4156:	2e81           	movel %d1,%sp@
    4158:	2f00           	movel %d0,%sp@-
    415a:	2f2f 005e      	movel %sp@(94),%sp@-
    415e:	2f2f 005e      	movel %sp@(94),%sp@-
    4162:	4eb9 0000 563c 	jsr 563c <__ledf2>
    4168:	4fef 0010      	lea %sp@(16),%sp
    416c:	226f 0032      	moveal %sp@(50),%a1
    4170:	4a80           	tstl %d0
    4172:	6e04           	bgts 4178 <_vsnprintf+0x50e>
      ++whole;
    4174:	5285           	addql #1,%d5
      frac = 0;
    4176:	7400           	moveq #0,%d2
  if (prec == 0U) {
    4178:	b2fc 0000      	cmpaw #0,%a1
    417c:	6600 068c      	bnew 480a <_vsnprintf+0xba0>
    diff = value - (double)whole;
    4180:	2f05           	movel %d5,%sp@-
    4182:	4eb9 0000 5884 	jsr 5884 <__floatsidf>
    4188:	2e81           	movel %d1,%sp@
    418a:	2f00           	movel %d0,%sp@-
    418c:	2f2f 0042      	movel %sp@(66),%sp@-
    4190:	2f2f 0042      	movel %sp@(66),%sp@-
    4194:	206f 005e      	moveal %sp@(94),%a0
    4198:	4e90           	jsr %a0@
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    419a:	4fef 000c      	lea %sp@(12),%sp
    419e:	4297           	clrl %sp@
    41a0:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    41a6:	2f01           	movel %d1,%sp@-
    41a8:	2f00           	movel %d0,%sp@-
    41aa:	4e94           	jsr %a4@
    41ac:	4fef 0010      	lea %sp@(16),%sp
    41b0:	4a80           	tstl %d0
    41b2:	6d08           	blts 41bc <_vsnprintf+0x552>
    41b4:	0805 0000      	btst #0,%d5
    41b8:	6702           	beqs 41bc <_vsnprintf+0x552>
      ++whole;
    41ba:	5285           	addql #1,%d5
    41bc:	242f 004a      	movel %sp@(74),%d2
    41c0:	d483           	addl %d3,%d2
    41c2:	767c           	moveq #124,%d3
    41c4:	d68f           	addl %sp,%d3
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    41c6:	b682           	cmpl %d2,%d3
    41c8:	6700 0548      	beqw 4712 <_vsnprintf+0xaa8>
    buf[len++] = (char)(48 + (whole % 10));
    41cc:	4878 000a      	pea a <DUART_IMR>
    41d0:	2f05           	movel %d5,%sp@-
    41d2:	4eb9 0000 4b68 	jsr 4b68 <__modsi3>
    41d8:	508f           	addql #8,%sp
    41da:	2842           	moveal %d2,%a4
    41dc:	0600 0030      	addib #48,%d0
    41e0:	18c0           	moveb %d0,%a4@+
    if (!(whole /= 10)) {
    41e2:	4878 000a      	pea a <DUART_IMR>
    41e6:	2f05           	movel %d5,%sp@-
    41e8:	4eb9 0000 4b08 	jsr 4b08 <__divsi3>
    41ee:	508f           	addql #8,%sp
    41f0:	2a00           	movel %d0,%d5
    41f2:	6700 058e      	beqw 4782 <_vsnprintf+0xb18>
    41f6:	240c           	movel %a4,%d2
    41f8:	60cc           	bras 41c6 <_vsnprintf+0x55c>
            const long value = va_arg(va, long);
    41fa:	260c           	movel %a4,%d3
    41fc:	5883           	addql #4,%d3
      out(*format, buffer, idx++, maxlen);
    41fe:	240d           	movel %a5,%d2
    4200:	5282           	addql #1,%d2
        if (!(flags & FLAGS_LEFT)) {
    4202:	0804 0001      	btst #1,%d4
    4206:	6700 033a      	beqw 4542 <_vsnprintf+0x8d8>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    420a:	2f06           	movel %d6,%sp@-
    420c:	2f0d           	movel %a5,%sp@-
    420e:	2f07           	movel %d7,%sp@-
    4210:	2014           	movel %a4@,%d0
    4212:	4880           	extw %d0
    4214:	3040           	moveaw %d0,%a0
    4216:	2f08           	movel %a0,%sp@-
    4218:	206f 0090      	moveal %sp@(144),%a0
    421c:	4e90           	jsr %a0@
          while (l++ < width) {
    421e:	4fef 0010      	lea %sp@(16),%sp
    4222:	dbca           	addal %a2,%a5
    4224:	7001           	moveq #1,%d0
    4226:	b08a           	cmpl %a2,%d0
    4228:	6400 04d8      	bccw 4702 <_vsnprintf+0xa98>
    422c:	246f 0080      	moveal %sp@(128),%a2
            out(' ', buffer, idx++, maxlen);
    4230:	2002           	movel %d2,%d0
    4232:	5282           	addql #1,%d2
    4234:	2f06           	movel %d6,%sp@-
    4236:	2f00           	movel %d0,%sp@-
    4238:	2f07           	movel %d7,%sp@-
    423a:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    423e:	4e92           	jsr %a2@
          while (l++ < width) {
    4240:	4fef 0010      	lea %sp@(16),%sp
    4244:	b48d           	cmpl %a5,%d2
    4246:	66e8           	bnes 4230 <_vsnprintf+0x5c6>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4248:	2843           	moveal %d3,%a4
  while (*format)
    424a:	1016           	moveb %fp@,%d0
    424c:	6600 fa4c      	bnew 3c9a <_vsnprintf+0x30>
    4250:	6000 fa70      	braw 3cc2 <_vsnprintf+0x58>
    switch (*format) {
    4254:	0c00 0025      	cmpib #37,%d0
    4258:	6600 fa48      	bnew 3ca2 <_vsnprintf+0x38>
        out('%', buffer, idx++, maxlen);
    425c:	240d           	movel %a5,%d2
    425e:	5282           	addql #1,%d2
    4260:	2f06           	movel %d6,%sp@-
    4262:	2f0d           	movel %a5,%sp@-
    4264:	2f07           	movel %d7,%sp@-
    4266:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    426a:	206f 0090      	moveal %sp@(144),%a0
    426e:	4e90           	jsr %a0@
        break;
    4270:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    4274:	2a42           	moveal %d2,%a5
  while (*format)
    4276:	1016           	moveb %fp@,%d0
    4278:	6600 fa20      	bnew 3c9a <_vsnprintf+0x30>
    427c:	6000 fa44      	braw 3cc2 <_vsnprintf+0x58>
        if (*format == 'h') {
    4280:	102e 0001      	moveb %fp@(1),%d0
    4284:	0c00 0068      	cmpib #104,%d0
    4288:	6700 028c      	beqw 4516 <_vsnprintf+0x8ac>
        flags |= FLAGS_SHORT;
    428c:	767f           	moveq #127,%d3
    428e:	4603           	notb %d3
    4290:	8883           	orl %d3,%d4
    4292:	6000 fae6      	braw 3d7a <_vsnprintf+0x110>
        const char* p = va_arg(va, char*);
    4296:	2f4c 0036      	movel %a4,%sp@(54)
    429a:	204c           	moveal %a4,%a0
    429c:	58af 0036      	addql #4,%sp@(54)
    42a0:	2858           	moveal %a0@+,%a4
  for (s = str; *s && maxsize--; ++s);
    42a2:	1214           	moveb %a4@,%d1
    42a4:	1001           	moveb %d1,%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    42a6:	4a85           	tstl %d5
    42a8:	6700 0156      	beqw 4400 <_vsnprintf+0x796>
  for (s = str; *s && maxsize--; ++s);
    42ac:	4a01           	tstb %d1
    42ae:	671a           	beqs 42ca <_vsnprintf+0x660>
    42b0:	2405           	movel %d5,%d2
    42b2:	5382           	subql #1,%d2
    42b4:	41f4 2801      	lea %a4@(1,%d2:l),%a0
    42b8:	224c           	moveal %a4,%a1
    42ba:	5289           	addql #1,%a1
    42bc:	4a11           	tstb %a1@
    42be:	6700 0268      	beqw 4528 <_vsnprintf+0x8be>
    42c2:	b3c8           	cmpal %a0,%a1
    42c4:	66f4           	bnes 42ba <_vsnprintf+0x650>
  return (unsigned int)(s - str);
    42c6:	2408           	movel %a0,%d2
    42c8:	948c           	subl %a4,%d2
        if (flags & FLAGS_PRECISION) {
    42ca:	2604           	movel %d4,%d3
    42cc:	0283 0000 0400 	andil #1024,%d3
    42d2:	2043           	moveal %d3,%a0
    42d4:	0804 000a      	btst #10,%d4
    42d8:	6706           	beqs 42e0 <_vsnprintf+0x676>
          l = (l < precision ? l : precision);
    42da:	ba82           	cmpl %d2,%d5
    42dc:	6402           	bccs 42e0 <_vsnprintf+0x676>
    42de:	2405           	movel %d5,%d2
        if (!(flags & FLAGS_LEFT)) {
    42e0:	7602           	moveq #2,%d3
    42e2:	c684           	andl %d4,%d3
    42e4:	2f43 003e      	movel %d3,%sp@(62)
    42e8:	0804 0001      	btst #1,%d4
    42ec:	6700 02a2      	beqw 4590 <_vsnprintf+0x926>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    42f0:	4a01           	tstb %d1
    42f2:	6700 01dc      	beqw 44d0 <_vsnprintf+0x866>
    42f6:	220d           	movel %a5,%d1
    42f8:	2608           	movel %a0,%d3
    42fa:	280a           	movel %a2,%d4
    42fc:	246f 0080      	moveal %sp@(128),%a2
    4300:	204e           	moveal %fp,%a0
    4302:	2c4d           	moveal %a5,%fp
    4304:	2a4c           	moveal %a4,%a5
    4306:	2845           	moveal %d5,%a4
    4308:	2a08           	movel %a0,%d5
    430a:	4a83           	tstl %d3
    430c:	670e           	beqs 431c <_vsnprintf+0x6b2>
    430e:	41ec ffff      	lea %a4@(-1),%a0
    4312:	b8fc 0000      	cmpaw #0,%a4
    4316:	6700 01ac      	beqw 44c4 <_vsnprintf+0x85a>
    431a:	2848           	moveal %a0,%a4
          out(*(p++), buffer, idx++, maxlen);
    431c:	528e           	addql #1,%fp
    431e:	528d           	addql #1,%a5
    4320:	2f06           	movel %d6,%sp@-
    4322:	2f01           	movel %d1,%sp@-
    4324:	2f07           	movel %d7,%sp@-
    4326:	4880           	extw %d0
    4328:	3040           	moveaw %d0,%a0
    432a:	2f08           	movel %a0,%sp@-
    432c:	4e92           	jsr %a2@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    432e:	1015           	moveb %a5@,%d0
    4330:	4fef 0010      	lea %sp@(16),%sp
    4334:	6700 018e      	beqw 44c4 <_vsnprintf+0x85a>
    4338:	220e           	movel %fp,%d1
    433a:	60ce           	bras 430a <_vsnprintf+0x6a0>
  unsigned int i = 0U;
    433c:	7a00           	moveq #0,%d5
    433e:	2c49           	moveal %a1,%fp
    4340:	2045           	moveal %d5,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    4342:	528e           	addql #1,%fp
    4344:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    4348:	d3c9           	addal %a1,%a1
    434a:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    434e:	d1c8           	addal %a0,%a0
    4350:	4880           	extw %d0
    4352:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    4356:	1016           	moveb %fp@,%d0
  return (ch >= '0') && (ch <= '9');
    4358:	1200           	moveb %d0,%d1
    435a:	0601 ffd0      	addib #-48,%d1
  while (_is_digit(**str)) {
    435e:	0c01 0009      	cmpib #9,%d1
    4362:	63de           	blss 4342 <_vsnprintf+0x6d8>
    4364:	2a08           	movel %a0,%d5
    4366:	43ee 0001      	lea %fp@(1),%a1
    436a:	6000 f9e4      	braw 3d50 <_vsnprintf+0xe6>
        if (*format == 'x' || *format == 'X') {
    436e:	0c00 006f      	cmpib #111,%d0
    4372:	6700 0142      	beqw 44b6 <_vsnprintf+0x84c>
    4376:	6e00 026a      	bgtw 45e2 <_vsnprintf+0x978>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    437a:	72ef           	moveq #-17,%d1
    437c:	c284           	andl %d4,%d1
        if ((*format != 'i') && (*format != 'd')) {
    437e:	0c00 0069      	cmpib #105,%d0
    4382:	6600 0386      	bnew 470a <_vsnprintf+0xaa0>
        if (flags & FLAGS_PRECISION) {
    4386:	0804 000a      	btst #10,%d4
    438a:	6600 0130      	bnew 44bc <_vsnprintf+0x852>
          if (flags & FLAGS_LONG_LONG) {
    438e:	0801 0009      	btst #9,%d1
    4392:	6600 f92a      	bnew 3cbe <_vsnprintf+0x54>
            const long value = va_arg(va, long);
    4396:	240c           	movel %a4,%d2
    4398:	5882           	addql #4,%d2
    439a:	2014           	movel %a4@,%d0
          else if (flags & FLAGS_LONG) {
    439c:	0801 0008      	btst #8,%d1
    43a0:	660e           	bnes 43b0 <_vsnprintf+0x746>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    43a2:	0801 0006      	btst #6,%d1
    43a6:	6600 02c6      	bnew 466e <_vsnprintf+0xa04>
    43aa:	4a01           	tstb %d1
    43ac:	6a02           	bpls 43b0 <_vsnprintf+0x746>
    43ae:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    43b0:	2f01           	movel %d1,%sp@-
    43b2:	2f0a           	movel %a2,%sp@-
    43b4:	2f05           	movel %d5,%sp@-
    43b6:	4878 000a      	pea a <DUART_IMR>
    43ba:	2200           	movel %d0,%d1
    43bc:	d281           	addl %d1,%d1
    43be:	9381           	subxl %d1,%d1
    43c0:	4481           	negl %d1
    43c2:	2f01           	movel %d1,%sp@-
    43c4:	4a80           	tstl %d0
    43c6:	6d00 028a      	bltw 4652 <_vsnprintf+0x9e8>
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    43ca:	2f00           	movel %d0,%sp@-
    43cc:	2f06           	movel %d6,%sp@-
    43ce:	2f0d           	movel %a5,%sp@-
    43d0:	2f07           	movel %d7,%sp@-
    43d2:	2f2f 00a4      	movel %sp@(164),%sp@-
    43d6:	4eb9 0000 36ec 	jsr 36ec <_ntoa_long>
    43dc:	2a40           	moveal %d0,%a5
    43de:	4fef 0028      	lea %sp@(40),%sp
    43e2:	2842           	moveal %d2,%a4
  while (*format)
    43e4:	1016           	moveb %fp@,%d0
    43e6:	6600 f8b2      	bnew 3c9a <_vsnprintf+0x30>
    43ea:	6000 f8d6      	braw 3cc2 <_vsnprintf+0x58>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    43ee:	2a1c           	movel %a4@+,%d5
    43f0:	6b78           	bmis 446a <_vsnprintf+0x800>
    switch (*format) {
    43f2:	102e 0002      	moveb %fp@(2),%d0
        format++;
    43f6:	548e           	addql #2,%fp
    43f8:	43ee 0001      	lea %fp@(1),%a1
    43fc:	6000 f952      	braw 3d50 <_vsnprintf+0xe6>
  for (s = str; *s && maxsize--; ++s);
    4400:	4a01           	tstb %d1
    4402:	6700 fec6      	beqw 42ca <_vsnprintf+0x660>
    4406:	74fe           	moveq #-2,%d2
    4408:	41f4 2801      	lea %a4@(1,%d2:l),%a0
    440c:	224c           	moveal %a4,%a1
    440e:	6000 feaa      	braw 42ba <_vsnprintf+0x650>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
    4412:	7220           	moveq #32,%d1
    4414:	8881           	orl %d1,%d4
    4416:	6000 fb5e      	braw 3f76 <_vsnprintf+0x30c>
        if (*format == 'x' || *format == 'X') {
    441a:	0c00 0058      	cmpib #88,%d0
    441e:	6700 0118      	beqw 4538 <_vsnprintf+0x8ce>
    switch (*format) {
    4422:	7202           	moveq #2,%d1
    4424:	0c00 0062      	cmpib #98,%d0
    4428:	6600 047a      	bnew 48a4 <_vsnprintf+0xc3a>
        if (flags & FLAGS_PRECISION) {
    442c:	0804 000a      	btst #10,%d4
    4430:	6600 00fe      	bnew 4530 <_vsnprintf+0x8c6>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    4434:	70f3           	moveq #-13,%d0
    4436:	c880           	andl %d0,%d4
          if (flags & FLAGS_LONG_LONG) {
    4438:	0804 0009      	btst #9,%d4
    443c:	6600 f880      	bnew 3cbe <_vsnprintf+0x54>
            const long value = va_arg(va, long);
    4440:	240c           	movel %a4,%d2
    4442:	5882           	addql #4,%d2
          else if (flags & FLAGS_LONG) {
    4444:	0804 0008      	btst #8,%d4
    4448:	6600 0278      	bnew 46c2 <_vsnprintf+0xa58>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    444c:	0804 0006      	btst #6,%d4
    4450:	6700 0462      	beqw 48b4 <_vsnprintf+0xc4a>
    4454:	7000           	moveq #0,%d0
    4456:	4600           	notb %d0
    4458:	c094           	andl %a4@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    445a:	2f04           	movel %d4,%sp@-
    445c:	2f0a           	movel %a2,%sp@-
    445e:	2f05           	movel %d5,%sp@-
    4460:	2f01           	movel %d1,%sp@-
    4462:	42a7           	clrl %sp@-
    4464:	2f00           	movel %d0,%sp@-
    4466:	6000 ff64      	braw 43cc <_vsnprintf+0x762>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    446a:	7a00           	moveq #0,%d5
    switch (*format) {
    446c:	102e 0002      	moveb %fp@(2),%d0
        format++;
    4470:	548e           	addql #2,%fp
    4472:	43ee 0001      	lea %fp@(1),%a1
    4476:	6000 f8d8      	braw 3d50 <_vsnprintf+0xe6>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    447a:	0804 0002      	btst #2,%d4
    447e:	6700 01da      	beqw 465a <_vsnprintf+0x9f0>
    4482:	7204           	moveq #4,%d1
    4484:	203c 0000 5d5e 	movel #23902,%d0
    448a:	2f04           	movel %d4,%sp@-
    448c:	2f0a           	movel %a2,%sp@-
    448e:	2f01           	movel %d1,%sp@-
    4490:	2f00           	movel %d0,%sp@-
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    4492:	2f06           	movel %d6,%sp@-
    4494:	2f0d           	movel %a5,%sp@-
    4496:	2f07           	movel %d7,%sp@-
    4498:	2f2f 009c      	movel %sp@(156),%sp@-
    449c:	4eb9 0000 362a 	jsr 362a <_out_rev>
    44a2:	2a40           	moveal %d0,%a5
    44a4:	4fef 0020      	lea %sp@(32),%sp
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    44a8:	286f 003e      	moveal %sp@(62),%a4
  while (*format)
    44ac:	1016           	moveb %fp@,%d0
    44ae:	6600 f7ea      	bnew 3c9a <_vsnprintf+0x30>
    44b2:	6000 f80e      	braw 3cc2 <_vsnprintf+0x58>
    switch (*format) {
    44b6:	7208           	moveq #8,%d1
    44b8:	6000 ff72      	braw 442c <_vsnprintf+0x7c2>
          flags &= ~FLAGS_ZEROPAD;
    44bc:	72ee           	moveq #-18,%d1
    44be:	c284           	andl %d4,%d1
        if ((*format == 'i') || (*format == 'd')) {
    44c0:	6000 fecc      	braw 438e <_vsnprintf+0x724>
    44c4:	2444           	moveal %d4,%a2
    44c6:	2a4e           	moveal %fp,%a5
    44c8:	2c45           	moveal %d5,%fp
        if (flags & FLAGS_LEFT) {
    44ca:	4aaf 003e      	tstl %sp@(62)
    44ce:	6728           	beqs 44f8 <_vsnprintf+0x88e>
    44d0:	260d           	movel %a5,%d3
          while (l++ < width) {
    44d2:	b48a           	cmpl %a2,%d2
    44d4:	6422           	bccs 44f8 <_vsnprintf+0x88e>
    44d6:	4bf2 d800      	lea %a2@(0,%a5:l),%a5
    44da:	9bc2           	subal %d2,%a5
    44dc:	246f 0080      	moveal %sp@(128),%a2
            out(' ', buffer, idx++, maxlen);
    44e0:	2003           	movel %d3,%d0
    44e2:	5283           	addql #1,%d3
    44e4:	2f06           	movel %d6,%sp@-
    44e6:	2f00           	movel %d0,%sp@-
    44e8:	2f07           	movel %d7,%sp@-
    44ea:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    44ee:	4e92           	jsr %a2@
          while (l++ < width) {
    44f0:	4fef 0010      	lea %sp@(16),%sp
    44f4:	bbc3           	cmpal %d3,%a5
    44f6:	66e8           	bnes 44e0 <_vsnprintf+0x876>
        const char* p = va_arg(va, char*);
    44f8:	286f 0036      	moveal %sp@(54),%a4
  while (*format)
    44fc:	1016           	moveb %fp@,%d0
    44fe:	6600 f79a      	bnew 3c9a <_vsnprintf+0x30>
    4502:	6000 f7be      	braw 3cc2 <_vsnprintf+0x58>
          flags |= FLAGS_LONG_LONG;
    4506:	0044 0300      	oriw #768,%d4
          format++;
    450a:	220e           	movel %fp,%d1
    450c:	5481           	addql #2,%d1
    switch (*format) {
    450e:	102e 0002      	moveb %fp@(2),%d0
    4512:	6000 f866      	braw 3d7a <_vsnprintf+0x110>
          flags |= FLAGS_CHAR;
    4516:	703f           	moveq #63,%d0
    4518:	4600           	notb %d0
    451a:	8880           	orl %d0,%d4
          format++;
    451c:	220e           	movel %fp,%d1
    451e:	5481           	addql #2,%d1
    switch (*format) {
    4520:	102e 0002      	moveb %fp@(2),%d0
    4524:	6000 f854      	braw 3d7a <_vsnprintf+0x110>
  return (unsigned int)(s - str);
    4528:	2409           	movel %a1,%d2
    452a:	948c           	subl %a4,%d2
    452c:	6000 fd9c      	braw 42ca <_vsnprintf+0x660>
          flags &= ~FLAGS_ZEROPAD;
    4530:	76f2           	moveq #-14,%d3
    4532:	c883           	andl %d3,%d4
        if ((*format == 'i') || (*format == 'd')) {
    4534:	6000 ff02      	braw 4438 <_vsnprintf+0x7ce>
          flags |= FLAGS_UPPERCASE;
    4538:	7420           	moveq #32,%d2
    453a:	8882           	orl %d2,%d4
    453c:	7210           	moveq #16,%d1
    453e:	6000 feec      	braw 442c <_vsnprintf+0x7c2>
          while (l++ < width) {
    4542:	7001           	moveq #1,%d0
    4544:	b08a           	cmpl %a2,%d0
    4546:	6400 01a2      	bccw 46ea <_vsnprintf+0xa80>
    454a:	41f2 d8ff      	lea %a2@(ffffffffffffffff,%a5:l),%a0
    454e:	2808           	movel %a0,%d4
    4550:	240d           	movel %a5,%d2
    4552:	2a0a           	movel %a2,%d5
    4554:	246f 0080      	moveal %sp@(128),%a2
            out(' ', buffer, idx++, maxlen);
    4558:	2002           	movel %d2,%d0
    455a:	5282           	addql #1,%d2
    455c:	2f06           	movel %d6,%sp@-
    455e:	2f00           	movel %d0,%sp@-
    4560:	2f07           	movel %d7,%sp@-
    4562:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    4566:	4e92           	jsr %a2@
          while (l++ < width) {
    4568:	4fef 0010      	lea %sp@(16),%sp
    456c:	b484           	cmpl %d4,%d2
    456e:	66e8           	bnes 4558 <_vsnprintf+0x8ee>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    4570:	dbc5           	addal %d5,%a5
    4572:	2f06           	movel %d6,%sp@-
    4574:	2f04           	movel %d4,%sp@-
    4576:	2f07           	movel %d7,%sp@-
    4578:	2014           	movel %a4@,%d0
    457a:	4880           	extw %d0
    457c:	3040           	moveaw %d0,%a0
    457e:	2f08           	movel %a0,%sp@-
    4580:	206f 0090      	moveal %sp@(144),%a0
    4584:	4e90           	jsr %a0@
    4586:	4fef 0010      	lea %sp@(16),%sp
    458a:	2843           	moveal %d3,%a4
    458c:	6000 fcbc      	braw 424a <_vsnprintf+0x5e0>
          while (l++ < width) {
    4590:	b48a           	cmpl %a2,%d2
    4592:	6400 03a8      	bccw 493c <_vsnprintf+0xcd2>
    4596:	280a           	movel %a2,%d4
    4598:	d88d           	addl %a5,%d4
    459a:	9882           	subl %d2,%d4
    459c:	2608           	movel %a0,%d3
    459e:	240a           	movel %a2,%d2
    45a0:	246f 0080      	moveal %sp@(128),%a2
            out(' ', buffer, idx++, maxlen);
    45a4:	200d           	movel %a5,%d0
    45a6:	528d           	addql #1,%a5
    45a8:	2f06           	movel %d6,%sp@-
    45aa:	2f00           	movel %d0,%sp@-
    45ac:	2f07           	movel %d7,%sp@-
    45ae:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    45b2:	4e92           	jsr %a2@
          while (l++ < width) {
    45b4:	4fef 0010      	lea %sp@(16),%sp
    45b8:	b88d           	cmpl %a5,%d4
    45ba:	66e8           	bnes 45a4 <_vsnprintf+0x93a>
    45bc:	2043           	moveal %d3,%a0
    45be:	2442           	moveal %d2,%a2
    45c0:	5282           	addql #1,%d2
    45c2:	1214           	moveb %a4@,%d1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    45c4:	1001           	moveb %d1,%d0
    45c6:	6700 ff30      	beqw 44f8 <_vsnprintf+0x88e>
    45ca:	220d           	movel %a5,%d1
    45cc:	2608           	movel %a0,%d3
    45ce:	280a           	movel %a2,%d4
    45d0:	246f 0080      	moveal %sp@(128),%a2
    45d4:	204e           	moveal %fp,%a0
    45d6:	2c4d           	moveal %a5,%fp
    45d8:	2a4c           	moveal %a4,%a5
    45da:	2845           	moveal %d5,%a4
    45dc:	2a08           	movel %a0,%d5
    45de:	6000 fd2a      	braw 430a <_vsnprintf+0x6a0>
    45e2:	0c00 0078      	cmpib #120,%d0
    45e6:	6764           	beqs 464c <_vsnprintf+0x9e2>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    45e8:	72ef           	moveq #-17,%d1
    45ea:	c881           	andl %d1,%d4
    45ec:	720a           	moveq #10,%d1
    45ee:	6000 fe3c      	braw 442c <_vsnprintf+0x7c2>
    return 0U;
    45f2:	9bcd           	subal %a5,%a5
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    45f4:	286f 003e      	moveal %sp@(62),%a4
    45f8:	6000 feb2      	braw 44ac <_vsnprintf+0x842>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    45fc:	2f04           	movel %d4,%sp@-
    45fe:	2f0a           	movel %a2,%sp@-
    4600:	4878 0003      	pea 3 <DIVIDE>
    4604:	4879 0000 5d67 	pea 5d67 <__gedf2+0x157>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    460a:	2f06           	movel %d6,%sp@-
    460c:	2f0d           	movel %a5,%sp@-
    460e:	2f07           	movel %d7,%sp@-
    4610:	2f2f 009c      	movel %sp@(156),%sp@-
    4614:	4eb9 0000 362a 	jsr 362a <_out_rev>
    461a:	2a40           	moveal %d0,%a5
    461c:	4fef 0020      	lea %sp@(32),%sp
    4620:	6000 fe86      	braw 44a8 <_vsnprintf+0x83e>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    4624:	2f04           	movel %d4,%sp@-
    4626:	2f0a           	movel %a2,%sp@-
    4628:	4878 0004      	pea 4 <DUART_CRA>
    462c:	4879 0000 5d6b 	pea 5d6b <__gedf2+0x15b>
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    4632:	2f06           	movel %d6,%sp@-
    4634:	2f0d           	movel %a5,%sp@-
    4636:	2f07           	movel %d7,%sp@-
    4638:	2f2f 009c      	movel %sp@(156),%sp@-
    463c:	4eb9 0000 362a 	jsr 362a <_out_rev>
    4642:	2a40           	moveal %d0,%a5
    4644:	4fef 0020      	lea %sp@(32),%sp
    4648:	6000 fe5e      	braw 44a8 <_vsnprintf+0x83e>
    switch (*format) {
    464c:	7210           	moveq #16,%d1
    464e:	6000 fddc      	braw 442c <_vsnprintf+0x7c2>
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4652:	4480           	negl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    4654:	2f00           	movel %d0,%sp@-
    4656:	6000 fd74      	braw 43cc <_vsnprintf+0x762>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    465a:	7203           	moveq #3,%d1
    465c:	203c 0000 5d63 	movel #23907,%d0
    4662:	2f04           	movel %d4,%sp@-
    4664:	2f0a           	movel %a2,%sp@-
    4666:	2f01           	movel %d1,%sp@-
    4668:	2f00           	movel %d0,%sp@-
    466a:	6000 fe26      	braw 4492 <_vsnprintf+0x828>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    466e:	4880           	extw %d0
    4670:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    4672:	2f01           	movel %d1,%sp@-
    4674:	2f0a           	movel %a2,%sp@-
    4676:	2f05           	movel %d5,%sp@-
    4678:	4878 000a      	pea a <DUART_IMR>
    467c:	2200           	movel %d0,%d1
    467e:	d281           	addl %d1,%d1
    4680:	9381           	subxl %d1,%d1
    4682:	4481           	negl %d1
    4684:	2f01           	movel %d1,%sp@-
    4686:	4a80           	tstl %d0
    4688:	6c00 fd40      	bgew 43ca <_vsnprintf+0x760>
    468c:	60c4           	bras 4652 <_vsnprintf+0x9e8>
    value = 0 - value;
    468e:	2f7c 0000 4bf2 	movel #19442,%sp@(78)
    4694:	004e 
    4696:	2f2f 003a      	movel %sp@(58),%sp@-
    469a:	2f2f 003a      	movel %sp@(58),%sp@-
    469e:	2f03           	movel %d3,%sp@-
    46a0:	2f02           	movel %d2,%sp@-
    46a2:	206f 005e      	moveal %sp@(94),%a0
    46a6:	4e90           	jsr %a0@
    46a8:	4fef 0010      	lea %sp@(16),%sp
    46ac:	2400           	movel %d0,%d2
    46ae:	2601           	movel %d1,%d3
    46b0:	2f42 0036      	movel %d2,%sp@(54)
    46b4:	2f43 003a      	movel %d3,%sp@(58)
    negative = true;
    46b8:	1f7c 0001 005b 	moveb #1,%sp@(91)
    46be:	6000 f992      	braw 4052 <_vsnprintf+0x3e8>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    46c2:	2f04           	movel %d4,%sp@-
    46c4:	2f0a           	movel %a2,%sp@-
    46c6:	2f05           	movel %d5,%sp@-
    46c8:	2f01           	movel %d1,%sp@-
    46ca:	42a7           	clrl %sp@-
    46cc:	2f14           	movel %a4@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    46ce:	2f06           	movel %d6,%sp@-
    46d0:	2f0d           	movel %a5,%sp@-
    46d2:	2f07           	movel %d7,%sp@-
    46d4:	2f2f 00a4      	movel %sp@(164),%sp@-
    46d8:	4eb9 0000 36ec 	jsr 36ec <_ntoa_long>
    46de:	2a40           	moveal %d0,%a5
    46e0:	4fef 0028      	lea %sp@(40),%sp
    46e4:	2842           	moveal %d2,%a4
        break;
    46e6:	6000 fcfc      	braw 43e4 <_vsnprintf+0x77a>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    46ea:	2f06           	movel %d6,%sp@-
    46ec:	2f0d           	movel %a5,%sp@-
    46ee:	2f07           	movel %d7,%sp@-
    46f0:	2014           	movel %a4@,%d0
    46f2:	4880           	extw %d0
    46f4:	3040           	moveaw %d0,%a0
    46f6:	2f08           	movel %a0,%sp@-
    46f8:	206f 0090      	moveal %sp@(144),%a0
    46fc:	4e90           	jsr %a0@
    46fe:	4fef 0010      	lea %sp@(16),%sp
    4702:	2a42           	moveal %d2,%a5
    4704:	2843           	moveal %d3,%a4
    4706:	6000 fb42      	braw 424a <_vsnprintf+0x5e0>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    470a:	2801           	movel %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    470c:	720a           	moveq #10,%d1
    470e:	6000 fd1c      	braw 442c <_vsnprintf+0x7c2>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    4712:	7003           	moveq #3,%d0
    4714:	c084           	andl %d4,%d0
    4716:	5380           	subql #1,%d0
    4718:	6642           	bnes 475c <_vsnprintf+0xaf2>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    471a:	b4fc 0000      	cmpaw #0,%a2
    471e:	673c           	beqs 475c <_vsnprintf+0xaf2>
    4720:	7020           	moveq #32,%d0
    4722:	4a2f 005b      	tstb %sp@(91)
    4726:	6600 0220      	bnew 4948 <_vsnprintf+0xcde>
    472a:	720c           	moveq #12,%d1
    472c:	c284           	andl %d4,%d1
    472e:	6600 0218      	bnew 4948 <_vsnprintf+0xcde>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4732:	b08a           	cmpl %a2,%d0
    4734:	6400 01ae      	bccw 48e4 <_vsnprintf+0xc7a>
    4738:	7220           	moveq #32,%d1
    473a:	b280           	cmpl %d0,%d1
    473c:	671e           	beqs 475c <_vsnprintf+0xaf2>
    473e:	206f 004a      	moveal %sp@(74),%a0
    4742:	d1c0           	addal %d0,%a0
    4744:	202f 004a      	movel %sp@(74),%d0
    4748:	d08a           	addl %a2,%d0
      buf[len++] = '0';
    474a:	10bc 0030      	moveb #48,%a0@
    474e:	2208           	movel %a0,%d1
    4750:	5288           	addql #1,%a0
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    4752:	b088           	cmpl %a0,%d0
    4754:	6700 01fe      	beqw 4954 <_vsnprintf+0xcea>
    4758:	b688           	cmpl %a0,%d3
    475a:	66ee           	bnes 474a <_vsnprintf+0xae0>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    475c:	7220           	moveq #32,%d1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    475e:	2f04           	movel %d4,%sp@-
    4760:	2f0a           	movel %a2,%sp@-
    4762:	2f01           	movel %d1,%sp@-
    4764:	2f2f 0056      	movel %sp@(86),%sp@-
    4768:	2f06           	movel %d6,%sp@-
    476a:	2f0d           	movel %a5,%sp@-
    476c:	2f07           	movel %d7,%sp@-
    476e:	2f2f 009c      	movel %sp@(156),%sp@-
    4772:	4eb9 0000 362a 	jsr 362a <_out_rev>
    4778:	2a40           	moveal %d0,%a5
    477a:	4fef 0020      	lea %sp@(32),%sp
    477e:	6000 fd28      	braw 44a8 <_vsnprintf+0x83e>
    buf[len++] = (char)(48 + (whole % 10));
    4782:	7001           	moveq #1,%d0
    4784:	90af 004a      	subl %sp@(74),%d0
    4788:	d082           	addl %d2,%d0
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    478a:	7203           	moveq #3,%d1
    478c:	c284           	andl %d4,%d1
    478e:	5381           	subql #1,%d1
    4790:	6700 01ce      	beqw 4960 <_vsnprintf+0xcf6>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    4794:	7420           	moveq #32,%d2
    4796:	b480           	cmpl %d0,%d2
    4798:	67c2           	beqs 475c <_vsnprintf+0xaf2>
    if (negative) {
    479a:	4a2f 005b      	tstb %sp@(91)
    479e:	6700 014c      	beqw 48ec <_vsnprintf+0xc82>
      buf[len++] = '-';
    47a2:	2200           	movel %d0,%d1
    47a4:	5281           	addql #1,%d1
    47a6:	1fbc 002d 085c 	moveb #45,%sp@(5c,%d0:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    47ac:	2f04           	movel %d4,%sp@-
    47ae:	2f0a           	movel %a2,%sp@-
    47b0:	2f01           	movel %d1,%sp@-
    47b2:	2f2f 0056      	movel %sp@(86),%sp@-
    47b6:	60b0           	bras 4768 <_vsnprintf+0xafe>
  else if (diff < 0.5) {
    47b8:	42a7           	clrl %sp@-
    47ba:	2f3c 3fe0 0000 	movel #1071644672,%sp@-
    47c0:	2f2f 004e      	movel %sp@(78),%sp@-
    47c4:	2f2f 004e      	movel %sp@(78),%sp@-
    47c8:	2f49 0042      	movel %a1,%sp@(66)
    47cc:	4e94           	jsr %a4@
    47ce:	4fef 0010      	lea %sp@(16),%sp
    47d2:	226f 0032      	moveal %sp@(50),%a1
    47d6:	4a80           	tstl %d0
    47d8:	6d00 f99e      	bltw 4178 <_vsnprintf+0x50e>
  else if ((frac == 0U) || (frac & 1U)) {
    47dc:	4a82           	tstl %d2
    47de:	6708           	beqs 47e8 <_vsnprintf+0xb7e>
    47e0:	0802 0000      	btst #0,%d2
    47e4:	6700 f992      	beqw 4178 <_vsnprintf+0x50e>
    ++frac;
    47e8:	5282           	addql #1,%d2
    47ea:	6000 f98c      	braw 4178 <_vsnprintf+0x50e>
    47ee:	2f7c 412e 8480 	movel #1093567616,%sp@(82)
    47f4:	0052 
    47f6:	42af 0056      	clrl %sp@(86)
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    47fa:	327c 0006      	moveaw #6,%a1
    47fe:	41ef 005c      	lea %sp@(92),%a0
    4802:	2f48 004a      	movel %a0,%sp@(74)
    4806:	6000 f896      	braw 409e <_vsnprintf+0x434>
    480a:	286f 004a      	moveal %sp@(74),%a4
    480e:	d9c3           	addal %d3,%a4
    4810:	d689           	addl %a1,%d3
    4812:	307c ffe0      	moveaw #-32,%a0
    4816:	d1c3           	addal %d3,%a0
    4818:	2f44 0036      	movel %d4,%sp@(54)
    481c:	2808           	movel %a0,%d4
    481e:	2f43 0042      	movel %d3,%sp@(66)
    4822:	2609           	movel %a1,%d3
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    4824:	b684           	cmpl %d4,%d3
    4826:	6700 00e2      	beqw 490a <_vsnprintf+0xca0>
      --count;
    482a:	5383           	subql #1,%d3
      buf[len++] = (char)(48U + (frac % 10U));
    482c:	4878 000a      	pea a <DUART_IMR>
    4830:	2f02           	movel %d2,%sp@-
    4832:	4eb9 0000 4b38 	jsr 4b38 <__umodsi3>
    4838:	508f           	addql #8,%sp
    483a:	0600 0030      	addib #48,%d0
    483e:	18c0           	moveb %d0,%a4@+
      if (!(frac /= 10U)) {
    4840:	4878 000a      	pea a <DUART_IMR>
    4844:	2f02           	movel %d2,%sp@-
    4846:	4eb9 0000 4aac 	jsr 4aac <__udivsi3>
    484c:	508f           	addql #8,%sp
    484e:	7209           	moveq #9,%d1
    4850:	b282           	cmpl %d2,%d1
    4852:	6404           	bccs 4858 <_vsnprintf+0xbee>
    4854:	2400           	movel %d0,%d2
    4856:	60cc           	bras 4824 <_vsnprintf+0xbba>
      buf[len++] = (char)(48U + (frac % 10U));
    4858:	282f 0036      	movel %sp@(54),%d4
    485c:	2243           	moveal %d3,%a1
    485e:	262f 0042      	movel %sp@(66),%d3
    4862:	2003           	movel %d3,%d0
    4864:	9089           	subl %a1,%d0
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    4866:	7420           	moveq #32,%d2
    4868:	b480           	cmpl %d0,%d2
    486a:	6700 00a2      	beqw 490e <_vsnprintf+0xca4>
    486e:	206f 004a      	moveal %sp@(74),%a0
    4872:	d1c0           	addal %d0,%a0
    4874:	b2fc 0000      	cmpaw #0,%a1
    4878:	6712           	beqs 488c <_vsnprintf+0xc22>
      buf[len++] = '0';
    487a:	5280           	addql #1,%d0
    487c:	10fc 0030      	moveb #48,%a0@+
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    4880:	7220           	moveq #32,%d1
    4882:	b280           	cmpl %d0,%d1
    4884:	6700 0088      	beqw 490e <_vsnprintf+0xca4>
    4888:	b083           	cmpl %d3,%d0
    488a:	66ee           	bnes 487a <_vsnprintf+0xc10>
      buf[len++] = '.';
    488c:	2600           	movel %d0,%d3
    488e:	5283           	addql #1,%d3
    4890:	1fbc 002e 085c 	moveb #46,%sp@(5c,%d0:l)
    4896:	242f 004a      	movel %sp@(74),%d2
    489a:	d483           	addl %d3,%d2
    489c:	767c           	moveq #124,%d3
    489e:	d68f           	addl %sp,%d3
    48a0:	6000 f924      	braw 41c6 <_vsnprintf+0x55c>
        if (flags & FLAGS_PRECISION) {
    48a4:	0804 000a      	btst #10,%d4
    48a8:	6600 fc12      	bnew 44bc <_vsnprintf+0x852>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    48ac:	72ef           	moveq #-17,%d1
    48ae:	c284           	andl %d4,%d1
    48b0:	6000 fadc      	braw 438e <_vsnprintf+0x724>
    48b4:	2014           	movel %a4@,%d0
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    48b6:	4a04           	tstb %d4
    48b8:	6a00 fba0      	bplw 445a <_vsnprintf+0x7f0>
    48bc:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    48c2:	2f04           	movel %d4,%sp@-
    48c4:	2f0a           	movel %a2,%sp@-
    48c6:	2f05           	movel %d5,%sp@-
    48c8:	2f01           	movel %d1,%sp@-
    48ca:	42a7           	clrl %sp@-
    48cc:	6000 fb96      	braw 4464 <_vsnprintf+0x7fa>
    48d0:	2241           	moveal %d1,%a1
    48d2:	7620           	moveq #32,%d3
    48d4:	2f7c 41cd cd65 	movel #1104006501,%sp@(82)
    48da:	0052 
    48dc:	42af 0056      	clrl %sp@(86)
    48e0:	6000 f7bc      	braw 409e <_vsnprintf+0x434>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    48e4:	7620           	moveq #32,%d3
    48e6:	b680           	cmpl %d0,%d3
    48e8:	6700 fe72      	beqw 475c <_vsnprintf+0xaf2>
      buf[len++] = '+';  // ignore the space if the '+' exists
    48ec:	2200           	movel %d0,%d1
    else if (flags & FLAGS_PLUS) {
    48ee:	0804 0002      	btst #2,%d4
    48f2:	672a           	beqs 491e <_vsnprintf+0xcb4>
      buf[len++] = '+';  // ignore the space if the '+' exists
    48f4:	5281           	addql #1,%d1
    48f6:	1fbc 002b 085c 	moveb #43,%sp@(5c,%d0:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    48fc:	2f04           	movel %d4,%sp@-
    48fe:	2f0a           	movel %a2,%sp@-
    4900:	2f01           	movel %d1,%sp@-
    4902:	2f2f 0056      	movel %sp@(86),%sp@-
    4906:	6000 fe60      	braw 4768 <_vsnprintf+0xafe>
    490a:	282f 0036      	movel %sp@(54),%d4
      if (!(frac /= 10U)) {
    490e:	7620           	moveq #32,%d3
    4910:	242f 004a      	movel %sp@(74),%d2
    4914:	d483           	addl %d3,%d2
    4916:	767c           	moveq #124,%d3
    4918:	d68f           	addl %sp,%d3
    491a:	6000 f8aa      	braw 41c6 <_vsnprintf+0x55c>
    else if (flags & FLAGS_SPACE) {
    491e:	0804 0003      	btst #3,%d4
    4922:	6700 fe3a      	beqw 475e <_vsnprintf+0xaf4>
      buf[len++] = ' ';
    4926:	5281           	addql #1,%d1
    4928:	1fbc 0020 085c 	moveb #32,%sp@(5c,%d0:l)
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    492e:	2f04           	movel %d4,%sp@-
    4930:	2f0a           	movel %a2,%sp@-
    4932:	2f01           	movel %d1,%sp@-
    4934:	2f2f 0056      	movel %sp@(86),%sp@-
    4938:	6000 fe2e      	braw 4768 <_vsnprintf+0xafe>
          while (l++ < width) {
    493c:	5282           	addql #1,%d2
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    493e:	1001           	moveb %d1,%d0
    4940:	6600 fc88      	bnew 45ca <_vsnprintf+0x960>
    4944:	6000 fbb2      	braw 44f8 <_vsnprintf+0x88e>
      width--;
    4948:	538a           	subql #1,%a2
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    494a:	b5c0           	cmpal %d0,%a2
    494c:	6200 fdea      	bhiw 4738 <_vsnprintf+0xace>
    4950:	6000 fe42      	braw 4794 <_vsnprintf+0xb2a>
      buf[len++] = '0';
    4954:	7001           	moveq #1,%d0
    4956:	90af 004a      	subl %sp@(74),%d0
    495a:	d081           	addl %d1,%d0
    495c:	6000 fe36      	braw 4794 <_vsnprintf+0xb2a>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    4960:	b4fc 0000      	cmpaw #0,%a2
    4964:	6700 fe2e      	beqw 4794 <_vsnprintf+0xb2a>
    4968:	6000 fdb8      	braw 4722 <_vsnprintf+0xab8>
  double tmp = (value - whole) * pow10[prec];
    496c:	2005           	movel %d5,%d0
    496e:	e788           	lsll #3,%d0
    4970:	43f9 0000 5d70 	lea 5d70 <pow10.0>,%a1
    4976:	2f71 0800 0052 	movel %a1@(0,%d0:l),%sp@(82)
    497c:	2f71 0804 0056 	movel %a1@(4,%d0:l),%sp@(86)
    4982:	2245           	moveal %d5,%a1
    4984:	7600           	moveq #0,%d3
    4986:	41ef 005c      	lea %sp@(92),%a0
    498a:	2f48 004a      	movel %a0,%sp@(74)
    498e:	6000 f70e      	braw 409e <_vsnprintf+0x434>

00004992 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    4992:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    4996:	486e 000c      	pea %fp@(12)
    499a:	2f2e 0008      	movel %fp@(8),%sp@-
    499e:	4878 ffff      	pea ffffffff <LESS+0x0>
    49a2:	486e ffff      	pea %fp@(-1)
    49a6:	4879 0000 3c52 	pea 3c52 <_out_char>
    49ac:	4eb9 0000 3c6a 	jsr 3c6a <_vsnprintf>
  va_end(va);
  return ret;
    49b2:	4fef 0014      	lea %sp@(20),%sp
}
    49b6:	4e5e           	unlk %fp
    49b8:	4e75           	rts

000049ba <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    49ba:	2f02           	movel %d2,%sp@-
    49bc:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    49c0:	0c02 000a      	cmpib #10,%d2
    49c4:	6714           	beqs 49da <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    49c6:	41f9 0000 5e2c 	lea 5e2c <buf>,%a0
    49cc:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    49ce:	2f48 0008      	movel %a0,%sp@(8)
}
    49d2:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    49d4:	4ef9 0000 49fc 	jmp 49fc <mcPrint>
    mcPrint(crbuf);
    49da:	4879 0000 5dc0 	pea 5dc0 <_code_end>
    49e0:	4eb9 0000 49fc 	jsr 49fc <mcPrint>
    49e6:	588f           	addql #4,%sp
  buf[0] = chr;
    49e8:	41f9 0000 5e2c 	lea 5e2c <buf>,%a0
    49ee:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    49f0:	2f48 0008      	movel %a0,%sp@(8)
}
    49f4:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    49f6:	4ef9 0000 49fc 	jmp 49fc <mcPrint>

000049fc <mcPrint>:
    49fc:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    4a00:	206f 0010      	moveal %sp@(16),%a0
    4a04:	7200           	moveq #0,%d1
    4a06:	4e4e           	trap #14
    4a08:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    4a0c:	4e75           	rts

00004a0e <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    4a0e:	41f9 0000 5de0 	lea 5de0 <T>,%a0
    4a14:	b1fc 0000 9638 	cmpal #38456,%a0
    4a1a:	641c           	bccs 4a38 <__kinit+0x2a>
    4a1c:	203c 0000 9638 	movel #38456,%d0
    4a22:	0480 0000 5de1 	subil #24033,%d0
    4a28:	72fc           	moveq #-4,%d1
    4a2a:	c081           	andl %d1,%d0
    4a2c:	0680 0000 5de4 	addil #24036,%d0
    4a32:	4298           	clrl %a0@+
    4a34:	b088           	cmpl %a0,%d0
    4a36:	66fa           	bnes 4a32 <__kinit+0x24>
}
    4a38:	4e75           	rts

00004a3a <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    4a3a:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    4a3e:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    4a42:	7200           	moveq #0,%d1
    4a44:	3239 0000 5e34 	movew 5e34 <cxa_atexit_count>,%d1
    4a4a:	2401           	movel %d1,%d2
    4a4c:	5382           	subql #1,%d2
    4a4e:	4a81           	tstl %d1
    4a50:	6738           	beqs 4a8a <__cxa_finalize+0x50>
    4a52:	2001           	movel %d1,%d0
    4a54:	e788           	lsll #3,%d0
    4a56:	2440           	moveal %d0,%a2
    4a58:	95c1           	subal %d1,%a2
    4a5a:	d5ca           	addal %a2,%a2
    4a5c:	d5fc 0000 5e28 	addal #24104,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    4a62:	4a83           	tstl %d3
    4a64:	662a           	bnes 4a90 <__cxa_finalize+0x56>
    4a66:	4a2a 000c      	tstb %a2@(12)
    4a6a:	6610           	bnes 4a7c <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    4a6c:	2f2a 0004      	movel %a2@(4),%sp@-
    4a70:	2052           	moveal %a2@,%a0
    4a72:	4e90           	jsr %a0@
            entry->done = true;
    4a74:	157c 0001 000c 	moveb #1,%a2@(12)
    4a7a:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    4a7c:	45ea fff2      	lea %a2@(-14),%a2
    4a80:	51ca ffe0      	dbf %d2,4a62 <__cxa_finalize+0x28>
    4a84:	4242           	clrw %d2
    4a86:	5382           	subql #1,%d2
    4a88:	64d8           	bccs 4a62 <__cxa_finalize+0x28>
        }
    }
}
    4a8a:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    4a8e:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    4a90:	b6aa 0008      	cmpl %a2@(8),%d3
    4a94:	67d0           	beqs 4a66 <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    4a96:	45ea fff2      	lea %a2@(-14),%a2
    4a9a:	51ca fff4      	dbf %d2,4a90 <__cxa_finalize+0x56>
    4a9e:	4242           	clrw %d2
    4aa0:	5382           	subql #1,%d2
    4aa2:	64ec           	bccs 4a90 <__cxa_finalize+0x56>
}
    4aa4:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    4aa8:	4e75           	rts
	...

00004aac <__udivsi3>:
    4aac:	2f02           	movel %d2,%sp@-
    4aae:	222f 000c      	movel %sp@(12),%d1
    4ab2:	202f 0008      	movel %sp@(8),%d0
    4ab6:	0c81 0001 0000 	cmpil #65536,%d1
    4abc:	6416           	bccs 4ad4 <L3>
    4abe:	2400           	movel %d0,%d2
    4ac0:	4242           	clrw %d2
    4ac2:	4842           	swap %d2
    4ac4:	84c1           	divuw %d1,%d2
    4ac6:	3002           	movew %d2,%d0
    4ac8:	4840           	swap %d0
    4aca:	342f 000a      	movew %sp@(10),%d2
    4ace:	84c1           	divuw %d1,%d2
    4ad0:	3002           	movew %d2,%d0
    4ad2:	6030           	bras 4b04 <L6>

00004ad4 <L3>:
    4ad4:	2401           	movel %d1,%d2

00004ad6 <L4>:
    4ad6:	e289           	lsrl #1,%d1
    4ad8:	e288           	lsrl #1,%d0
    4ada:	0c81 0001 0000 	cmpil #65536,%d1
    4ae0:	64f4           	bccs 4ad6 <L4>
    4ae2:	80c1           	divuw %d1,%d0
    4ae4:	0280 0000 ffff 	andil #65535,%d0
    4aea:	2202           	movel %d2,%d1
    4aec:	c2c0           	muluw %d0,%d1
    4aee:	4842           	swap %d2
    4af0:	c4c0           	muluw %d0,%d2
    4af2:	4842           	swap %d2
    4af4:	4a42           	tstw %d2
    4af6:	660a           	bnes 4b02 <L5>
    4af8:	d282           	addl %d2,%d1
    4afa:	6506           	bcss 4b02 <L5>
    4afc:	b2af 0008      	cmpl %sp@(8),%d1
    4b00:	6302           	blss 4b04 <L6>

00004b02 <L5>:
    4b02:	5380           	subql #1,%d0

00004b04 <L6>:
    4b04:	241f           	movel %sp@+,%d2
    4b06:	4e75           	rts

00004b08 <__divsi3>:
    4b08:	2f02           	movel %d2,%sp@-
    4b0a:	7401           	moveq #1,%d2
    4b0c:	222f 000c      	movel %sp@(12),%d1
    4b10:	6a04           	bpls 4b16 <L1>
    4b12:	4481           	negl %d1
    4b14:	4402           	negb %d2

00004b16 <L1>:
    4b16:	202f 0008      	movel %sp@(8),%d0
    4b1a:	6a04           	bpls 4b20 <L2>
    4b1c:	4480           	negl %d0
    4b1e:	4402           	negb %d2

00004b20 <L2>:
    4b20:	2f01           	movel %d1,%sp@-
    4b22:	2f00           	movel %d0,%sp@-
    4b24:	4eb9 0000 4aac 	jsr 4aac <__udivsi3>
    4b2a:	508f           	addql #8,%sp
    4b2c:	4a02           	tstb %d2
    4b2e:	6a02           	bpls 4b32 <L3>
    4b30:	4480           	negl %d0

00004b32 <L3>:
    4b32:	241f           	movel %sp@+,%d2
    4b34:	4e75           	rts
	...

00004b38 <__umodsi3>:
    4b38:	222f 0008      	movel %sp@(8),%d1
    4b3c:	202f 0004      	movel %sp@(4),%d0
    4b40:	2f01           	movel %d1,%sp@-
    4b42:	2f00           	movel %d0,%sp@-
    4b44:	4eb9 0000 4aac 	jsr 4aac <__udivsi3>
    4b4a:	508f           	addql #8,%sp
    4b4c:	222f 0008      	movel %sp@(8),%d1
    4b50:	2f01           	movel %d1,%sp@-
    4b52:	2f00           	movel %d0,%sp@-
    4b54:	4eb9 0000 5bec 	jsr 5bec <__mulsi3>
    4b5a:	508f           	addql #8,%sp
    4b5c:	222f 0004      	movel %sp@(4),%d1
    4b60:	9280           	subl %d0,%d1
    4b62:	2001           	movel %d1,%d0
    4b64:	4e75           	rts
	...

00004b68 <__modsi3>:
    4b68:	222f 0008      	movel %sp@(8),%d1
    4b6c:	202f 0004      	movel %sp@(4),%d0
    4b70:	2f01           	movel %d1,%sp@-
    4b72:	2f00           	movel %d0,%sp@-
    4b74:	4eb9 0000 4b08 	jsr 4b08 <__divsi3>
    4b7a:	508f           	addql #8,%sp
    4b7c:	222f 0008      	movel %sp@(8),%d1
    4b80:	2f01           	movel %d1,%sp@-
    4b82:	2f00           	movel %d0,%sp@-
    4b84:	4eb9 0000 5bec 	jsr 5bec <__mulsi3>
    4b8a:	508f           	addql #8,%sp
    4b8c:	222f 0004      	movel %sp@(4),%d1
    4b90:	9280           	subl %d0,%d1
    4b92:	2001           	movel %d1,%d0
    4b94:	4e75           	rts
	...

00004b98 <Ld$den>:
    4b98:	8087           	orl %d7,%d0
    4b9a:	3e3c 0003      	movew #3,%d7
    4b9e:	7c02           	moveq #2,%d6
    4ba0:	4ef9 0000 5572 	jmp 5572 <$_exception_handler>

00004ba6 <Ld$infty>:
    4ba6:	203c 7ff0 0000 	movel #2146435072,%d0
    4bac:	7200           	moveq #0,%d1
    4bae:	8087           	orl %d7,%d0
    4bb0:	3e3c 0005      	movew #5,%d7
    4bb4:	7c02           	moveq #2,%d6
    4bb6:	4ef9 0000 5572 	jmp 5572 <$_exception_handler>

00004bbc <Ld$underflow>:
    4bbc:	7000           	moveq #0,%d0
    4bbe:	2200           	movel %d0,%d1
    4bc0:	3e3c 0003      	movew #3,%d7
    4bc4:	7c02           	moveq #2,%d6
    4bc6:	4ef9 0000 5572 	jmp 5572 <$_exception_handler>

00004bcc <Ld$inop>:
    4bcc:	70ff           	moveq #-1,%d0
    4bce:	2200           	movel %d0,%d1
    4bd0:	3e3c 0011      	movew #17,%d7
    4bd4:	7c02           	moveq #2,%d6
    4bd6:	4ef9 0000 5572 	jmp 5572 <$_exception_handler>

00004bdc <Ld$div$0>:
    4bdc:	203c 7ff0 0000 	movel #2146435072,%d0
    4be2:	7200           	moveq #0,%d1
    4be4:	8087           	orl %d7,%d0
    4be6:	3e3c 0009      	movew #9,%d7
    4bea:	7c02           	moveq #2,%d6
    4bec:	4ef9 0000 5572 	jmp 5572 <$_exception_handler>

00004bf2 <__subdf3>:
    4bf2:	086f 001f 000c 	bchg #31,%sp@(12)

00004bf8 <__adddf3>:
    4bf8:	4e56 0000      	linkw %fp,#0
    4bfc:	48e7 3f00      	moveml %d2-%d7,%sp@-
    4c00:	202e 0008      	movel %fp@(8),%d0
    4c04:	222e 000c      	movel %fp@(12),%d1
    4c08:	242e 0010      	movel %fp@(16),%d2
    4c0c:	262e 0014      	movel %fp@(20),%d3
    4c10:	2e00           	movel %d0,%d7
    4c12:	d281           	addl %d1,%d1
    4c14:	d180           	addxl %d0,%d0
    4c16:	6700 0286      	beqw 4e9e <Ladddf$b>
    4c1a:	2c02           	movel %d2,%d6
    4c1c:	d683           	addl %d3,%d3
    4c1e:	d582           	addxl %d2,%d2
    4c20:	6700 029a      	beqw 4ebc <Ladddf$a>
    4c24:	0287 8000 0000 	andil #-2147483648,%d7
    4c2a:	4846           	swap %d6
    4c2c:	0246 8000      	andiw #-32768,%d6
    4c30:	8e46           	orw %d6,%d7
    4c32:	2047           	moveal %d7,%a0
    4c34:	2c3c 001f ffff 	movel #2097151,%d6
    4c3a:	2e3c 0020 0000 	movel #2097152,%d7
    4c40:	2800           	movel %d0,%d4
    4c42:	c086           	andl %d6,%d0
    4c44:	4686           	notl %d6
    4c46:	c886           	andl %d6,%d4
    4c48:	6700 0246      	beqw 4e90 <Ladddf$a$den>
    4c4c:	b886           	cmpl %d6,%d4
    4c4e:	6700 02ca      	beqw 4f1a <Ladddf$nf>
    4c52:	8087           	orl %d7,%d0

00004c54 <Ladddf$1>:
    4c54:	4844           	swap %d4
    4c56:	ea4c           	lsrw #5,%d4
    4c58:	2a02           	movel %d2,%d5
    4c5a:	ca86           	andl %d6,%d5
    4c5c:	6700 0238      	beqw 4e96 <Ladddf$b$den>
    4c60:	ba86           	cmpl %d6,%d5
    4c62:	6700 02b6      	beqw 4f1a <Ladddf$nf>
    4c66:	4686           	notl %d6
    4c68:	c486           	andl %d6,%d2
    4c6a:	8487           	orl %d7,%d2

00004c6c <Ladddf$2>:
    4c6c:	4845           	swap %d5
    4c6e:	ea4d           	lsrw #5,%d5
    4c70:	48e7 0030      	moveml %a2-%a3,%sp@-
    4c74:	2444           	moveal %d4,%a2
    4c76:	2645           	moveal %d5,%a3
    4c78:	7e00           	moveq #0,%d7
    4c7a:	2c07           	movel %d7,%d6
    4c7c:	2a03           	movel %d3,%d5
    4c7e:	2802           	movel %d2,%d4
    4c80:	2607           	movel %d7,%d3
    4c82:	2407           	movel %d7,%d2
    4c84:	c98a           	exg %d4,%a2
    4c86:	cb8b           	exg %d5,%a3
    4c88:	ba44           	cmpw %d4,%d5
    4c8a:	6700 00cc      	beqw 4d58 <Ladddf$3>
    4c8e:	6200 0064      	bhiw 4cf4 <Ladddf$2+0x88>
    4c92:	3404           	movew %d4,%d2
    4c94:	9445           	subw %d5,%d2
    4c96:	c98a           	exg %d4,%a2
    4c98:	cb8b           	exg %d5,%a3
    4c9a:	0c42 0037      	cmpiw #55,%d2
    4c9e:	6c00 01d2      	bgew 4e72 <Ladddf$b$small>
    4ca2:	0c42 0020      	cmpiw #32,%d2
    4ca6:	6c00 0022      	bgew 4cca <Ladddf$2+0x5e>
    4caa:	0c42 0010      	cmpiw #16,%d2
    4cae:	6c00 002a      	bgew 4cda <Ladddf$2+0x6e>
    4cb2:	6000 000a      	braw 4cbe <Ladddf$2+0x52>
    4cb6:	e28c           	lsrl #1,%d4
    4cb8:	e295           	roxrl #1,%d5
    4cba:	e296           	roxrl #1,%d6
    4cbc:	e297           	roxrl #1,%d7
    4cbe:	51ca fff6      	dbf %d2,4cb6 <Ladddf$2+0x4a>
    4cc2:	7400           	moveq #0,%d2
    4cc4:	2602           	movel %d2,%d3
    4cc6:	6000 0094      	braw 4d5c <Ladddf$4>
    4cca:	2e06           	movel %d6,%d7
    4ccc:	2c05           	movel %d5,%d6
    4cce:	2a04           	movel %d4,%d5
    4cd0:	7800           	moveq #0,%d4
    4cd2:	0442 0020      	subiw #32,%d2
    4cd6:	6000 ffd2      	braw 4caa <Ladddf$2+0x3e>
    4cda:	3e06           	movew %d6,%d7
    4cdc:	4847           	swap %d7
    4cde:	3c05           	movew %d5,%d6
    4ce0:	4846           	swap %d6
    4ce2:	3a04           	movew %d4,%d5
    4ce4:	4845           	swap %d5
    4ce6:	383c 0000      	movew #0,%d4
    4cea:	4844           	swap %d4
    4cec:	0442 0010      	subiw #16,%d2
    4cf0:	6000 ffcc      	braw 4cbe <Ladddf$2+0x52>
    4cf4:	c945           	exg %d4,%d5
    4cf6:	3c04           	movew %d4,%d6
    4cf8:	9c45           	subw %d5,%d6
    4cfa:	c98a           	exg %d4,%a2
    4cfc:	cb8b           	exg %d5,%a3
    4cfe:	0c46 0037      	cmpiw #55,%d6
    4d02:	6c00 0150      	bgew 4e54 <Ladddf$a$small>
    4d06:	0c46 0020      	cmpiw #32,%d6
    4d0a:	6c00 0022      	bgew 4d2e <Ladddf$2+0xc2>
    4d0e:	0c46 0010      	cmpiw #16,%d6
    4d12:	6c00 002a      	bgew 4d3e <Ladddf$2+0xd2>
    4d16:	6000 000a      	braw 4d22 <Ladddf$2+0xb6>
    4d1a:	e288           	lsrl #1,%d0
    4d1c:	e291           	roxrl #1,%d1
    4d1e:	e292           	roxrl #1,%d2
    4d20:	e293           	roxrl #1,%d3
    4d22:	51ce fff6      	dbf %d6,4d1a <Ladddf$2+0xae>
    4d26:	7e00           	moveq #0,%d7
    4d28:	2c07           	movel %d7,%d6
    4d2a:	6000 0030      	braw 4d5c <Ladddf$4>
    4d2e:	2602           	movel %d2,%d3
    4d30:	2401           	movel %d1,%d2
    4d32:	2200           	movel %d0,%d1
    4d34:	7000           	moveq #0,%d0
    4d36:	0446 0020      	subiw #32,%d6
    4d3a:	6000 ffd2      	braw 4d0e <Ladddf$2+0xa2>
    4d3e:	3602           	movew %d2,%d3
    4d40:	4843           	swap %d3
    4d42:	3401           	movew %d1,%d2
    4d44:	4842           	swap %d2
    4d46:	3200           	movew %d0,%d1
    4d48:	4841           	swap %d1
    4d4a:	303c 0000      	movew #0,%d0
    4d4e:	4840           	swap %d0
    4d50:	0446 0010      	subiw #16,%d6
    4d54:	6000 ffcc      	braw 4d22 <Ladddf$2+0xb6>

00004d58 <Ladddf$3>:
    4d58:	c98a           	exg %d4,%a2
    4d5a:	cb8b           	exg %d5,%a3

00004d5c <Ladddf$4>:
    4d5c:	cf88           	exg %d7,%a0
    4d5e:	cd8b           	exg %d6,%a3
    4d60:	2c07           	movel %d7,%d6
    4d62:	3e3c 0000      	movew #0,%d7
    4d66:	4846           	swap %d6
    4d68:	3c3c 0000      	movew #0,%d6
    4d6c:	bf86           	eorl %d7,%d6
    4d6e:	6b00 006e      	bmiw 4dde <Lsubdf$0>
    4d72:	cf88           	exg %d7,%a0
    4d74:	cd8b           	exg %d6,%a3
    4d76:	d687           	addl %d7,%d3
    4d78:	d586           	addxl %d6,%d2
    4d7a:	d385           	addxl %d5,%d1
    4d7c:	d184           	addxl %d4,%d0
    4d7e:	280a           	movel %a2,%d4
    4d80:	2e08           	movel %a0,%d7
    4d82:	0287 8000 0000 	andil #-2147483648,%d7
    4d88:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    4d8c:	0800 0036      	btst #54,%d0
    4d90:	6700 000c      	beqw 4d9e <Ladddf$4+0x42>
    4d94:	e288           	lsrl #1,%d0
    4d96:	e291           	roxrl #1,%d1
    4d98:	e292           	roxrl #1,%d2
    4d9a:	e293           	roxrl #1,%d3
    4d9c:	5244           	addqw #1,%d4
    4d9e:	41fa 0020      	lea %pc@(4dc0 <Ladddf$5>),%a0
    4da2:	43f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a1
    4da8:	3c29 0006      	movew %a1@(6),%d6
    4dac:	6700 0750      	beqw 54fe <Lround$to$nearest>
    4db0:	0c46 0002      	cmpiw #2,%d6
    4db4:	6200 07ac      	bhiw 5562 <Lround$to$minus>
    4db8:	6d00 07a8      	bltw 5562 <Lround$to$minus>
    4dbc:	6000 07a4      	braw 5562 <Lround$to$minus>

00004dc0 <Ladddf$5>:
    4dc0:	0c44 07ff      	cmpiw #2047,%d4
    4dc4:	6c00 0012      	bgew 4dd8 <Ladddf$5+0x18>
    4dc8:	0880 0034      	bclr #52,%d0
    4dcc:	e94c           	lslw #4,%d4
    4dce:	4840           	swap %d0
    4dd0:	8044           	orw %d4,%d0
    4dd2:	4840           	swap %d0
    4dd4:	6000 0128      	braw 4efe <Ladddf$ret>
    4dd8:	7a01           	moveq #1,%d5
    4dda:	6000 fdca      	braw 4ba6 <Ld$infty>

00004dde <Lsubdf$0>:
    4dde:	cf88           	exg %d7,%a0
    4de0:	cd8b           	exg %d6,%a3
    4de2:	9687           	subl %d7,%d3
    4de4:	9586           	subxl %d6,%d2
    4de6:	9385           	subxl %d5,%d1
    4de8:	9184           	subxl %d4,%d0
    4dea:	6700 010e      	beqw 4efa <Ladddf$ret$1>
    4dee:	6a00 0012      	bplw 4e02 <Lsubdf$0+0x24>
    4df2:	2e08           	movel %a0,%d7
    4df4:	0847 001f      	bchg #31,%d7
    4df8:	2047           	moveal %d7,%a0
    4dfa:	4483           	negl %d3
    4dfc:	4082           	negxl %d2
    4dfe:	4081           	negxl %d1
    4e00:	4080           	negxl %d0
    4e02:	280a           	movel %a2,%d4
    4e04:	2e08           	movel %a0,%d7
    4e06:	0287 8000 0000 	andil #-2147483648,%d7
    4e0c:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    4e10:	0800 0036      	btst #54,%d0
    4e14:	6700 000c      	beqw 4e22 <Lsubdf$0+0x44>
    4e18:	e288           	lsrl #1,%d0
    4e1a:	e291           	roxrl #1,%d1
    4e1c:	e292           	roxrl #1,%d2
    4e1e:	e293           	roxrl #1,%d3
    4e20:	5244           	addqw #1,%d4
    4e22:	41fa 0020      	lea %pc@(4e44 <Lsubdf$1>),%a0
    4e26:	43f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a1
    4e2c:	3c29 0006      	movew %a1@(6),%d6
    4e30:	6700 06cc      	beqw 54fe <Lround$to$nearest>
    4e34:	0c46 0002      	cmpiw #2,%d6
    4e38:	6200 0728      	bhiw 5562 <Lround$to$minus>
    4e3c:	6d00 0724      	bltw 5562 <Lround$to$minus>
    4e40:	6000 0720      	braw 5562 <Lround$to$minus>

00004e44 <Lsubdf$1>:
    4e44:	0880 0034      	bclr #52,%d0
    4e48:	e94c           	lslw #4,%d4
    4e4a:	4840           	swap %d0
    4e4c:	8044           	orw %d4,%d0
    4e4e:	4840           	swap %d0
    4e50:	6000 00ac      	braw 4efe <Ladddf$ret>

00004e54 <Ladddf$a$small>:
    4e54:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    4e58:	202e 0010      	movel %fp@(16),%d0
    4e5c:	222e 0014      	movel %fp@(20),%d1
    4e60:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    4e66:	30bc 0000      	movew #0,%a0@
    4e6a:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    4e6e:	4e5e           	unlk %fp
    4e70:	4e75           	rts

00004e72 <Ladddf$b$small>:
    4e72:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    4e76:	202e 0008      	movel %fp@(8),%d0
    4e7a:	222e 000c      	movel %fp@(12),%d1
    4e7e:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    4e84:	30bc 0000      	movew #0,%a0@
    4e88:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    4e8c:	4e5e           	unlk %fp
    4e8e:	4e75           	rts

00004e90 <Ladddf$a$den>:
    4e90:	2807           	movel %d7,%d4
    4e92:	6000 fdc0      	braw 4c54 <Ladddf$1>

00004e96 <Ladddf$b$den>:
    4e96:	2a07           	movel %d7,%d5
    4e98:	4686           	notl %d6
    4e9a:	6000 fdd0      	braw 4c6c <Ladddf$2>

00004e9e <Ladddf$b>:
    4e9e:	2002           	movel %d2,%d0
    4ea0:	2203           	movel %d3,%d1
    4ea2:	6600 0020      	bnew 4ec4 <Ladddf$a+0x8>
    4ea6:	0c80 8000 0000 	cmpil #-2147483648,%d0
    4eac:	6600 0016      	bnew 4ec4 <Ladddf$a+0x8>
    4eb0:	0287 8000 0000 	andil #-2147483648,%d7
    4eb6:	4280           	clrl %d0
    4eb8:	6000 0044      	braw 4efe <Ladddf$ret>

00004ebc <Ladddf$a>:
    4ebc:	202e 0008      	movel %fp@(8),%d0
    4ec0:	222e 000c      	movel %fp@(12),%d1
    4ec4:	7a01           	moveq #1,%d5
    4ec6:	2e00           	movel %d0,%d7
    4ec8:	0287 8000 0000 	andil #-2147483648,%d7
    4ece:	0880 001f      	bclr #31,%d0
    4ed2:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    4ed8:	6c00 0010      	bgew 4eea <Ladddf$a+0x2e>
    4edc:	2000           	movel %d0,%d0
    4ede:	6600 001e      	bnew 4efe <Ladddf$ret>
    4ee2:	0887 001f      	bclr #31,%d7
    4ee6:	6000 0016      	braw 4efe <Ladddf$ret>
    4eea:	0280 000f ffff 	andil #1048575,%d0
    4ef0:	8081           	orl %d1,%d0
    4ef2:	6600 fcd8      	bnew 4bcc <Ld$inop>
    4ef6:	6000 fcae      	braw 4ba6 <Ld$infty>

00004efa <Ladddf$ret$1>:
    4efa:	4cdf 0c00      	moveml %sp@+,%a2-%a3

00004efe <Ladddf$ret>:
    4efe:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    4f04:	30bc 0000      	movew #0,%a0@
    4f08:	8087           	orl %d7,%d0
    4f0a:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    4f0e:	4e5e           	unlk %fp
    4f10:	4e75           	rts

00004f12 <Ladddf$ret$den>:
    4f12:	e288           	lsrl #1,%d0
    4f14:	e291           	roxrl #1,%d1
    4f16:	6000 ffe6      	braw 4efe <Ladddf$ret>

00004f1a <Ladddf$nf>:
    4f1a:	7a01           	moveq #1,%d5
    4f1c:	202e 0008      	movel %fp@(8),%d0
    4f20:	222e 000c      	movel %fp@(12),%d1
    4f24:	242e 0010      	movel %fp@(16),%d2
    4f28:	262e 0014      	movel %fp@(20),%d3
    4f2c:	283c 7ff0 0000 	movel #2146435072,%d4
    4f32:	2e00           	movel %d0,%d7
    4f34:	2c02           	movel %d2,%d6
    4f36:	0880 001f      	bclr #31,%d0
    4f3a:	0882 001f      	bclr #31,%d2
    4f3e:	b084           	cmpl %d4,%d0
    4f40:	6200 fc8a      	bhiw 4bcc <Ld$inop>
    4f44:	6600 0008      	bnew 4f4e <Ladddf$nf+0x34>
    4f48:	4a81           	tstl %d1
    4f4a:	6600 fc80      	bnew 4bcc <Ld$inop>
    4f4e:	b484           	cmpl %d4,%d2
    4f50:	6200 fc7a      	bhiw 4bcc <Ld$inop>
    4f54:	6600 0008      	bnew 4f5e <Ladddf$nf+0x44>
    4f58:	4a83           	tstl %d3
    4f5a:	6600 fc70      	bnew 4bcc <Ld$inop>
    4f5e:	bf86           	eorl %d7,%d6
    4f60:	6b00 000c      	bmiw 4f6e <Ladddf$nf+0x54>
    4f64:	0287 8000 0000 	andil #-2147483648,%d7
    4f6a:	6000 fc3a      	braw 4ba6 <Ld$infty>
    4f6e:	b082           	cmpl %d2,%d0
    4f70:	6600 0008      	bnew 4f7a <Ladddf$nf+0x60>
    4f74:	b283           	cmpl %d3,%d1
    4f76:	6700 fc54      	beqw 4bcc <Ld$inop>
    4f7a:	0287 8000 0000 	andil #-2147483648,%d7
    4f80:	b084           	cmpl %d4,%d0
    4f82:	6700 fc22      	beqw 4ba6 <Ld$infty>
    4f86:	0847 001f      	bchg #31,%d7
    4f8a:	6000 fc1a      	braw 4ba6 <Ld$infty>

00004f8e <__muldf3>:
    4f8e:	4e56 0000      	linkw %fp,#0
    4f92:	48e7 3f00      	moveml %d2-%d7,%sp@-
    4f96:	202e 0008      	movel %fp@(8),%d0
    4f9a:	222e 000c      	movel %fp@(12),%d1
    4f9e:	242e 0010      	movel %fp@(16),%d2
    4fa2:	262e 0014      	movel %fp@(20),%d3
    4fa6:	2e00           	movel %d0,%d7
    4fa8:	b587           	eorl %d2,%d7
    4faa:	0287 8000 0000 	andil #-2147483648,%d7
    4fb0:	2047           	moveal %d7,%a0
    4fb2:	2e3c 7ff0 0000 	movel #2146435072,%d7
    4fb8:	2c07           	movel %d7,%d6
    4fba:	4686           	notl %d6
    4fbc:	0880 001f      	bclr #31,%d0
    4fc0:	2800           	movel %d0,%d4
    4fc2:	8881           	orl %d1,%d4
    4fc4:	6700 0120      	beqw 50e6 <Lmuldf$a$0>
    4fc8:	2800           	movel %d0,%d4
    4fca:	0882 001f      	bclr #31,%d2
    4fce:	2a02           	movel %d2,%d5
    4fd0:	8a83           	orl %d3,%d5
    4fd2:	6700 0106      	beqw 50da <Lmuldf$b$0>
    4fd6:	2a02           	movel %d2,%d5
    4fd8:	b087           	cmpl %d7,%d0
    4fda:	6200 00dc      	bhiw 50b8 <Lmuldf$inop>
    4fde:	6700 00ec      	beqw 50cc <Lmuldf$a$nf>
    4fe2:	b487           	cmpl %d7,%d2
    4fe4:	6200 00d2      	bhiw 50b8 <Lmuldf$inop>
    4fe8:	6700 00d4      	beqw 50be <Lmuldf$b$nf>
    4fec:	c887           	andl %d7,%d4
    4fee:	6700 0120      	beqw 5110 <Lmuldf$a$den>
    4ff2:	c086           	andl %d6,%d0
    4ff4:	0080 0010 0000 	oril #1048576,%d0
    4ffa:	4844           	swap %d4
    4ffc:	e84c           	lsrw #4,%d4

00004ffe <Lmuldf$1>:
    4ffe:	ca87           	andl %d7,%d5
    5000:	6700 0124      	beqw 5126 <Lmuldf$b$den>
    5004:	c486           	andl %d6,%d2
    5006:	0082 0010 0000 	oril #1048576,%d2
    500c:	4845           	swap %d5
    500e:	e84d           	lsrw #4,%d5

00005010 <Lmuldf$2>:
    5010:	d845           	addw %d5,%d4
    5012:	0444 03ff      	subiw #1023,%d4
    5016:	48e7 0030      	moveml %a2-%a3,%sp@-
    501a:	247c 0000 0000 	moveal #0,%a2
    5020:	2644           	moveal %d4,%a3
    5022:	ea9a           	rorl #5,%d2
    5024:	4842           	swap %d2
    5026:	ea9b           	rorl #5,%d3
    5028:	4843           	swap %d3
    502a:	3c03           	movew %d3,%d6
    502c:	0246 07ff      	andiw #2047,%d6
    5030:	8446           	orw %d6,%d2
    5032:	0243 f800      	andiw #-2048,%d3
    5036:	2c02           	movel %d2,%d6
    5038:	2e03           	movel %d3,%d7
    503a:	2800           	movel %d0,%d4
    503c:	2a01           	movel %d1,%d5
    503e:	7600           	moveq #0,%d3
    5040:	2403           	movel %d3,%d2
    5042:	2203           	movel %d3,%d1
    5044:	2003           	movel %d3,%d0
    5046:	227c 0000 0034 	moveal #52,%a1
    504c:	cf89           	exg %d7,%a1
    504e:	cf89           	exg %d7,%a1
    5050:	d683           	addl %d3,%d3
    5052:	d582           	addxl %d2,%d2
    5054:	d381           	addxl %d1,%d1
    5056:	d180           	addxl %d0,%d0
    5058:	de87           	addl %d7,%d7
    505a:	dd86           	addxl %d6,%d6
    505c:	6400 000e      	bccw 506c <Lmuldf$2+0x5c>
    5060:	cf8a           	exg %d7,%a2
    5062:	d685           	addl %d5,%d3
    5064:	d584           	addxl %d4,%d2
    5066:	d387           	addxl %d7,%d1
    5068:	d187           	addxl %d7,%d0
    506a:	cf8a           	exg %d7,%a2
    506c:	cf89           	exg %d7,%a1
    506e:	51cf ffde      	dbf %d7,504e <Lmuldf$2+0x3e>
    5072:	280b           	movel %a3,%d4
    5074:	4cdf 0c00      	moveml %sp@+,%a2-%a3
    5078:	4840           	swap %d0
    507a:	4841           	swap %d1
    507c:	3001           	movew %d1,%d0
    507e:	4842           	swap %d2
    5080:	3202           	movew %d2,%d1
    5082:	4843           	swap %d3
    5084:	3403           	movew %d3,%d2
    5086:	363c 0000      	movew #0,%d3
    508a:	e288           	lsrl #1,%d0
    508c:	e291           	roxrl #1,%d1
    508e:	e292           	roxrl #1,%d2
    5090:	e293           	roxrl #1,%d3
    5092:	e288           	lsrl #1,%d0
    5094:	e291           	roxrl #1,%d1
    5096:	e292           	roxrl #1,%d2
    5098:	e293           	roxrl #1,%d3
    509a:	e288           	lsrl #1,%d0
    509c:	e291           	roxrl #1,%d1
    509e:	e292           	roxrl #1,%d2
    50a0:	e293           	roxrl #1,%d3
    50a2:	2e08           	movel %a0,%d7
    50a4:	7a02           	moveq #2,%d5
    50a6:	0800 0016      	btst #22,%d0
    50aa:	6700 027a      	beqw 5326 <Lround$exit>
    50ae:	e288           	lsrl #1,%d0
    50b0:	e291           	roxrl #1,%d1
    50b2:	5244           	addqw #1,%d4
    50b4:	6000 0270      	braw 5326 <Lround$exit>

000050b8 <Lmuldf$inop>:
    50b8:	7a02           	moveq #2,%d5
    50ba:	6000 fb10      	braw 4bcc <Ld$inop>

000050be <Lmuldf$b$nf>:
    50be:	7a02           	moveq #2,%d5
    50c0:	2e08           	movel %a0,%d7
    50c2:	4a83           	tstl %d3
    50c4:	6600 fb06      	bnew 4bcc <Ld$inop>
    50c8:	6000 fadc      	braw 4ba6 <Ld$infty>

000050cc <Lmuldf$a$nf>:
    50cc:	7a02           	moveq #2,%d5
    50ce:	2e08           	movel %a0,%d7
    50d0:	4a81           	tstl %d1
    50d2:	6600 faf8      	bnew 4bcc <Ld$inop>
    50d6:	6000 face      	braw 4ba6 <Ld$infty>

000050da <Lmuldf$b$0>:
    50da:	7a02           	moveq #2,%d5
    50dc:	c540           	exg %d2,%d0
    50de:	c741           	exg %d3,%d1
    50e0:	2008           	movel %a0,%d0
    50e2:	6000 0010      	braw 50f4 <Lmuldf$a$0+0xe>

000050e6 <Lmuldf$a$0>:
    50e6:	2008           	movel %a0,%d0
    50e8:	242e 0010      	movel %fp@(16),%d2
    50ec:	262e 0014      	movel %fp@(20),%d3
    50f0:	0882 001f      	bclr #31,%d2
    50f4:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    50fa:	6c00 fad0      	bgew 4bcc <Ld$inop>
    50fe:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    5104:	30bc 0000      	movew #0,%a0@
    5108:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    510c:	4e5e           	unlk %fp
    510e:	4e75           	rts

00005110 <Lmuldf$a$den>:
    5110:	7801           	moveq #1,%d4
    5112:	c086           	andl %d6,%d0
    5114:	d281           	addl %d1,%d1
    5116:	d180           	addxl %d0,%d0
    5118:	5344           	subqw #1,%d4
    511a:	0800 0014      	btst #20,%d0
    511e:	6600 fede      	bnew 4ffe <Lmuldf$1>
    5122:	6000 fff0      	braw 5114 <Lmuldf$a$den+0x4>

00005126 <Lmuldf$b$den>:
    5126:	7a01           	moveq #1,%d5
    5128:	c486           	andl %d6,%d2
    512a:	d683           	addl %d3,%d3
    512c:	d582           	addxl %d2,%d2
    512e:	5345           	subqw #1,%d5
    5130:	0802 0014      	btst #20,%d2
    5134:	6600 feda      	bnew 5010 <Lmuldf$2>
    5138:	6000 fff0      	braw 512a <Lmuldf$b$den+0x4>

0000513c <__divdf3>:
    513c:	4e56 0000      	linkw %fp,#0
    5140:	48e7 3f00      	moveml %d2-%d7,%sp@-
    5144:	202e 0008      	movel %fp@(8),%d0
    5148:	222e 000c      	movel %fp@(12),%d1
    514c:	242e 0010      	movel %fp@(16),%d2
    5150:	262e 0014      	movel %fp@(20),%d3
    5154:	2e00           	movel %d0,%d7
    5156:	b587           	eorl %d2,%d7
    5158:	0287 8000 0000 	andil #-2147483648,%d7
    515e:	2047           	moveal %d7,%a0
    5160:	2e3c 7ff0 0000 	movel #2146435072,%d7
    5166:	2c07           	movel %d7,%d6
    5168:	4686           	notl %d6
    516a:	0880 001f      	bclr #31,%d0
    516e:	2800           	movel %d0,%d4
    5170:	8881           	orl %d1,%d4
    5172:	6700 0112      	beqw 5286 <Ldivdf$a$0>
    5176:	2800           	movel %d0,%d4
    5178:	0882 001f      	bclr #31,%d2
    517c:	2a02           	movel %d2,%d5
    517e:	8a83           	orl %d3,%d5
    5180:	6700 013c      	beqw 52be <Ldivdf$b$0>
    5184:	2a02           	movel %d2,%d5
    5186:	b087           	cmpl %d7,%d0
    5188:	6200 00f6      	bhiw 5280 <Ldivdf$inop>
    518c:	6700 0154      	beqw 52e2 <Ldivdf$a$nf>
    5190:	b487           	cmpl %d7,%d2
    5192:	6200 00ec      	bhiw 5280 <Ldivdf$inop>
    5196:	6700 013e      	beqw 52d6 <Ldivdf$b$nf>
    519a:	c887           	andl %d7,%d4
    519c:	6700 015c      	beqw 52fa <Ldivdf$a$den>
    51a0:	c086           	andl %d6,%d0
    51a2:	0080 0010 0000 	oril #1048576,%d0
    51a8:	4844           	swap %d4
    51aa:	e84c           	lsrw #4,%d4

000051ac <Ldivdf$1>:
    51ac:	ca87           	andl %d7,%d5
    51ae:	6700 0160      	beqw 5310 <Ldivdf$b$den>
    51b2:	c486           	andl %d6,%d2
    51b4:	0082 0010 0000 	oril #1048576,%d2
    51ba:	4845           	swap %d5
    51bc:	e84d           	lsrw #4,%d5

000051be <Ldivdf$2>:
    51be:	9845           	subw %d5,%d4
    51c0:	0644 03fe      	addiw #1022,%d4
    51c4:	7c00           	moveq #0,%d6
    51c6:	2e06           	movel %d6,%d7
    51c8:	227c 0000 0000 	moveal #0,%a1
    51ce:	7a16           	moveq #22,%d5
    51d0:	b480           	cmpl %d0,%d2
    51d2:	6200 000c      	bhiw 51e0 <Ldivdf$2+0x22>
    51d6:	6700 0014      	beqw 51ec <Ldivdf$2+0x2e>
    51da:	9283           	subl %d3,%d1
    51dc:	9182           	subxl %d2,%d0
    51de:	0bc6           	bset %d5,%d6
    51e0:	d281           	addl %d1,%d1
    51e2:	d180           	addxl %d0,%d0
    51e4:	51cd ffea      	dbf %d5,51d0 <Ldivdf$2+0x12>
    51e8:	6000 000c      	braw 51f6 <Ldivdf$2+0x38>
    51ec:	b681           	cmpl %d1,%d3
    51ee:	6200 fff0      	bhiw 51e0 <Ldivdf$2+0x22>
    51f2:	6000 ffe6      	braw 51da <Ldivdf$2+0x1c>
    51f6:	7a1f           	moveq #31,%d5
    51f8:	b480           	cmpl %d0,%d2
    51fa:	6200 000c      	bhiw 5208 <Ldivdf$2+0x4a>
    51fe:	6700 0014      	beqw 5214 <Ldivdf$2+0x56>
    5202:	9283           	subl %d3,%d1
    5204:	9182           	subxl %d2,%d0
    5206:	0bc7           	bset %d5,%d7
    5208:	d281           	addl %d1,%d1
    520a:	d180           	addxl %d0,%d0
    520c:	51cd ffea      	dbf %d5,51f8 <Ldivdf$2+0x3a>
    5210:	6000 000c      	braw 521e <Ldivdf$2+0x60>
    5214:	b681           	cmpl %d1,%d3
    5216:	6200 fff0      	bhiw 5208 <Ldivdf$2+0x4a>
    521a:	6000 ffe6      	braw 5202 <Ldivdf$2+0x44>
    521e:	7a35           	moveq #53,%d5
    5220:	b082           	cmpl %d2,%d0
    5222:	6200 001c      	bhiw 5240 <Ldivdf$2+0x82>
    5226:	6700 0012      	beqw 523a <Ldivdf$2+0x7c>
    522a:	d281           	addl %d1,%d1
    522c:	d180           	addxl %d0,%d0
    522e:	51cd fff0      	dbf %d5,5220 <Ldivdf$2+0x62>
    5232:	7400           	moveq #0,%d2
    5234:	2602           	movel %d2,%d3
    5236:	6000 0028      	braw 5260 <Ldivdf$2+0xa2>
    523a:	b681           	cmpl %d1,%d3
    523c:	6200 ffec      	bhiw 522a <Ldivdf$2+0x6c>
    5240:	7400           	moveq #0,%d2
    5242:	2602           	movel %d2,%d3
    5244:	0445 0035      	subiw #53,%d5
    5248:	0645 003f      	addiw #63,%d5
    524c:	0c45 001f      	cmpiw #31,%d5
    5250:	6200 000c      	bhiw 525e <Ldivdf$2+0xa0>
    5254:	0bc3           	bset %d5,%d3
    5256:	6000 0008      	braw 5260 <Ldivdf$2+0xa2>
    525a:	0445 0020      	subiw #32,%d5
    525e:	0bc2           	bset %d5,%d2
    5260:	2006           	movel %d6,%d0
    5262:	2207           	movel %d7,%d1
    5264:	7600           	moveq #0,%d3
    5266:	0800 0016      	btst #22,%d0
    526a:	6700 000c      	beqw 5278 <Ldivdf$2+0xba>
    526e:	e288           	lsrl #1,%d0
    5270:	e291           	roxrl #1,%d1
    5272:	e292           	roxrl #1,%d2
    5274:	e293           	roxrl #1,%d3
    5276:	5244           	addqw #1,%d4
    5278:	2e08           	movel %a0,%d7
    527a:	7a03           	moveq #3,%d5
    527c:	6000 00a8      	braw 5326 <Lround$exit>

00005280 <Ldivdf$inop>:
    5280:	7a03           	moveq #3,%d5
    5282:	6000 f948      	braw 4bcc <Ld$inop>

00005286 <Ldivdf$a$0>:
    5286:	7a03           	moveq #3,%d5
    5288:	0882 001f      	bclr #31,%d2
    528c:	2802           	movel %d2,%d4
    528e:	8883           	orl %d3,%d4
    5290:	6700 f93a      	beqw 4bcc <Ld$inop>
    5294:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    529a:	6200 f930      	bhiw 4bcc <Ld$inop>
    529e:	6d00 0008      	bltw 52a8 <Ldivdf$a$0+0x22>
    52a2:	4a83           	tstl %d3
    52a4:	6600 f926      	bnew 4bcc <Ld$inop>
    52a8:	2008           	movel %a0,%d0
    52aa:	7200           	moveq #0,%d1
    52ac:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    52b2:	30bc 0000      	movew #0,%a0@
    52b6:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    52ba:	4e5e           	unlk %fp
    52bc:	4e75           	rts

000052be <Ldivdf$b$0>:
    52be:	7a03           	moveq #3,%d5
    52c0:	2e08           	movel %a0,%d7
    52c2:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    52c8:	6200 f902      	bhiw 4bcc <Ld$inop>
    52cc:	4a81           	tstl %d1
    52ce:	6600 f8fc      	bnew 4bcc <Ld$inop>
    52d2:	6000 f908      	braw 4bdc <Ld$div$0>

000052d6 <Ldivdf$b$nf>:
    52d6:	7a03           	moveq #3,%d5
    52d8:	4a83           	tstl %d3
    52da:	6600 f8f0      	bnew 4bcc <Ld$inop>
    52de:	6000 f8dc      	braw 4bbc <Ld$underflow>

000052e2 <Ldivdf$a$nf>:
    52e2:	7a03           	moveq #3,%d5
    52e4:	4a81           	tstl %d1
    52e6:	6600 f8e4      	bnew 4bcc <Ld$inop>
    52ea:	b487           	cmpl %d7,%d2
    52ec:	6c00 f8de      	bgew 4bcc <Ld$inop>
    52f0:	4a83           	tstl %d3
    52f2:	6600 f8d8      	bnew 4bcc <Ld$inop>
    52f6:	6000 f8ae      	braw 4ba6 <Ld$infty>

000052fa <Ldivdf$a$den>:
    52fa:	7801           	moveq #1,%d4
    52fc:	c086           	andl %d6,%d0
    52fe:	d281           	addl %d1,%d1
    5300:	d180           	addxl %d0,%d0
    5302:	5344           	subqw #1,%d4
    5304:	0800 0014      	btst #20,%d0
    5308:	6600 fea2      	bnew 51ac <Ldivdf$1>
    530c:	6000 fff0      	braw 52fe <Ldivdf$a$den+0x4>

00005310 <Ldivdf$b$den>:
    5310:	7a01           	moveq #1,%d5
    5312:	c486           	andl %d6,%d2
    5314:	d683           	addl %d3,%d3
    5316:	d582           	addxl %d2,%d2
    5318:	5345           	subqw #1,%d5
    531a:	0802 0014      	btst #20,%d2
    531e:	6600 fe9e      	bnew 51be <Ldivdf$2>
    5322:	6000 fff0      	braw 5314 <Ldivdf$b$den+0x4>

00005326 <Lround$exit>:
    5326:	0c44 ffca      	cmpiw #-54,%d4
    532a:	6d00 f890      	bltw 4bbc <Ld$underflow>
    532e:	2047           	moveal %d7,%a0
    5330:	7c00           	moveq #0,%d6
    5332:	2e06           	movel %d6,%d7
    5334:	0c44 0001      	cmpiw #1,%d4
    5338:	6c00 0020      	bgew 535a <Lround$exit+0x34>
    533c:	5244           	addqw #1,%d4
    533e:	e288           	lsrl #1,%d0
    5340:	e291           	roxrl #1,%d1
    5342:	e292           	roxrl #1,%d2
    5344:	e293           	roxrl #1,%d3
    5346:	e296           	roxrl #1,%d6
    5348:	e297           	roxrl #1,%d7
    534a:	0c44 0001      	cmpiw #1,%d4
    534e:	6700 000a      	beqw 535a <Lround$exit+0x34>
    5352:	6000 ffe8      	braw 533c <Lround$exit+0x16>
    5356:	6000 f864      	braw 4bbc <Ld$underflow>
    535a:	8486           	orl %d6,%d2
    535c:	8687           	orl %d7,%d3
    535e:	2e08           	movel %a0,%d7
    5360:	41fa 0020      	lea %pc@(5382 <Lround$0>),%a0
    5364:	43f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a1
    536a:	3c29 0006      	movew %a1@(6),%d6
    536e:	6700 018e      	beqw 54fe <Lround$to$nearest>
    5372:	0c46 0002      	cmpiw #2,%d6
    5376:	6200 01ea      	bhiw 5562 <Lround$to$minus>
    537a:	6d00 01e6      	bltw 5562 <Lround$to$minus>
    537e:	6000 01e2      	braw 5562 <Lround$to$minus>

00005382 <Lround$0>:
    5382:	0c44 07ff      	cmpiw #2047,%d4
    5386:	6c00 f81e      	bgew 4ba6 <Ld$infty>
    538a:	3804           	movew %d4,%d4
    538c:	6700 f80a      	beqw 4b98 <Ld$den>
    5390:	e94c           	lslw #4,%d4
    5392:	0880 0014      	bclr #20,%d0
    5396:	4840           	swap %d0
    5398:	8044           	orw %d4,%d0
    539a:	4840           	swap %d0
    539c:	8087           	orl %d7,%d0
    539e:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    53a4:	30bc 0000      	movew #0,%a0@
    53a8:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    53ac:	4e5e           	unlk %fp
    53ae:	4e75           	rts

000053b0 <__negdf2>:
    53b0:	4e56 0000      	linkw %fp,#0
    53b4:	48e7 3f00      	moveml %d2-%d7,%sp@-
    53b8:	7a04           	moveq #4,%d5
    53ba:	202e 0008      	movel %fp@(8),%d0
    53be:	222e 000c      	movel %fp@(12),%d1
    53c2:	0840 001f      	bchg #31,%d0
    53c6:	2400           	movel %d0,%d2
    53c8:	0882 001f      	bclr #31,%d2
    53cc:	2802           	movel %d2,%d4
    53ce:	8881           	orl %d1,%d4
    53d0:	6700 0034      	beqw 5406 <__negdf2+0x56>
    53d4:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    53da:	6d00 0018      	bltw 53f4 <__negdf2+0x44>
    53de:	6200 f7ec      	bhiw 4bcc <Ld$inop>
    53e2:	4a81           	tstl %d1
    53e4:	6600 f7e6      	bnew 4bcc <Ld$inop>
    53e8:	2e00           	movel %d0,%d7
    53ea:	0287 8000 0000 	andil #-2147483648,%d7
    53f0:	6000 f7b4      	braw 4ba6 <Ld$infty>
    53f4:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    53fa:	30bc 0000      	movew #0,%a0@
    53fe:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    5402:	4e5e           	unlk %fp
    5404:	4e75           	rts
    5406:	0880 001f      	bclr #31,%d0
    540a:	6000 ffe8      	braw 53f4 <__negdf2+0x44>

0000540e <__cmpdf2_internal>:
    540e:	4e56 0000      	linkw %fp,#0
    5412:	48e7 3f00      	moveml %d2-%d7,%sp@-
    5416:	7a05           	moveq #5,%d5
    5418:	202e 0008      	movel %fp@(8),%d0
    541c:	222e 000c      	movel %fp@(12),%d1
    5420:	242e 0010      	movel %fp@(16),%d2
    5424:	262e 0014      	movel %fp@(20),%d3
    5428:	2c00           	movel %d0,%d6
    542a:	0880 001f      	bclr #31,%d0
    542e:	2e02           	movel %d2,%d7
    5430:	0882 001f      	bclr #31,%d2
    5434:	0c80 7ff0 0000 	cmpil #2146435072,%d0
    543a:	6200 0094      	bhiw 54d0 <Lcmpd$inop>
    543e:	6700 007c      	beqw 54bc <Lcmpdf$a$nf>
    5442:	2800           	movel %d0,%d4
    5444:	8881           	orl %d1,%d4
    5446:	6700 0064      	beqw 54ac <Lcmpdf$a$0>

0000544a <Lcmpdf$0>:
    544a:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    5450:	6200 007e      	bhiw 54d0 <Lcmpd$inop>
    5454:	6700 0070      	beqw 54c6 <Lcmpdf$b$nf>
    5458:	2802           	movel %d2,%d4
    545a:	8883           	orl %d3,%d4
    545c:	6700 0056      	beqw 54b4 <Lcmpdf$b$0>

00005460 <Lcmpdf$1>:
    5460:	bd87           	eorl %d6,%d7
    5462:	6a00 000c      	bplw 5470 <Lcmpdf$1+0x10>
    5466:	4a86           	tstl %d6
    5468:	6a00 002e      	bplw 5498 <Lcmpdf$a$gt$b>
    546c:	6b00 0034      	bmiw 54a2 <Lcmpdf$b$gt$a>
    5470:	4a86           	tstl %d6
    5472:	6a00 0006      	bplw 547a <Lcmpdf$1+0x1a>
    5476:	c142           	exg %d0,%d2
    5478:	c343           	exg %d1,%d3
    547a:	b480           	cmpl %d0,%d2
    547c:	6200 0024      	bhiw 54a2 <Lcmpdf$b$gt$a>
    5480:	6600 0016      	bnew 5498 <Lcmpdf$a$gt$b>
    5484:	b681           	cmpl %d1,%d3
    5486:	6200 001a      	bhiw 54a2 <Lcmpdf$b$gt$a>
    548a:	6600 000c      	bnew 5498 <Lcmpdf$a$gt$b>
    548e:	7000           	moveq #0,%d0
    5490:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    5494:	4e5e           	unlk %fp
    5496:	4e75           	rts

00005498 <Lcmpdf$a$gt$b>:
    5498:	7001           	moveq #1,%d0
    549a:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    549e:	4e5e           	unlk %fp
    54a0:	4e75           	rts

000054a2 <Lcmpdf$b$gt$a>:
    54a2:	70ff           	moveq #-1,%d0
    54a4:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    54a8:	4e5e           	unlk %fp
    54aa:	4e75           	rts

000054ac <Lcmpdf$a$0>:
    54ac:	0886 001f      	bclr #31,%d6
    54b0:	6000 ff98      	braw 544a <Lcmpdf$0>

000054b4 <Lcmpdf$b$0>:
    54b4:	0887 001f      	bclr #31,%d7
    54b8:	6000 ffa6      	braw 5460 <Lcmpdf$1>

000054bc <Lcmpdf$a$nf>:
    54bc:	4a81           	tstl %d1
    54be:	6600 f70c      	bnew 4bcc <Ld$inop>
    54c2:	6000 ff86      	braw 544a <Lcmpdf$0>

000054c6 <Lcmpdf$b$nf>:
    54c6:	4a83           	tstl %d3
    54c8:	6600 f702      	bnew 4bcc <Ld$inop>
    54cc:	6000 ff92      	braw 5460 <Lcmpdf$1>

000054d0 <Lcmpd$inop>:
    54d0:	202e 0018      	movel %fp@(24),%d0
    54d4:	7e11           	moveq #17,%d7
    54d6:	7c02           	moveq #2,%d6
    54d8:	4ef9 0000 5572 	jmp 5572 <$_exception_handler>

000054de <__cmpdf2>:
    54de:	4e56 0000      	linkw %fp,#0
    54e2:	4878 0001      	pea 1 <ADD>
    54e6:	2f2e 0014      	movel %fp@(20),%sp@-
    54ea:	2f2e 0010      	movel %fp@(16),%sp@-
    54ee:	2f2e 000c      	movel %fp@(12),%sp@-
    54f2:	2f2e 0008      	movel %fp@(8),%sp@-
    54f6:	6100 ff16      	bsrw 540e <__cmpdf2_internal>
    54fa:	4e5e           	unlk %fp
    54fc:	4e75           	rts

000054fe <Lround$to$nearest>:
    54fe:	0800 0015      	btst #21,%d0
    5502:	6600 0016      	bnew 551a <Lround$to$nearest+0x1c>
    5506:	0c44 0001      	cmpiw #1,%d4
    550a:	6700 000e      	beqw 551a <Lround$to$nearest+0x1c>
    550e:	d683           	addl %d3,%d3
    5510:	d582           	addxl %d2,%d2
    5512:	d381           	addxl %d1,%d1
    5514:	d180           	addxl %d0,%d0
    5516:	51cc ffe6      	dbf %d4,54fe <Lround$to$nearest>
    551a:	0801 0000      	btst #0,%d1
    551e:	6700 0022      	beqw 5542 <Lround$to$nearest+0x44>
    5522:	8682           	orl %d2,%d3
    5524:	6600 0014      	bnew 553a <Lround$to$nearest+0x3c>
    5528:	2601           	movel %d1,%d3
    552a:	0283 0000 0002 	andil #2,%d3
    5530:	7400           	moveq #0,%d2
    5532:	d283           	addl %d3,%d1
    5534:	d182           	addxl %d2,%d0
    5536:	6000 000a      	braw 5542 <Lround$to$nearest+0x44>
    553a:	7601           	moveq #1,%d3
    553c:	7400           	moveq #0,%d2
    553e:	d283           	addl %d3,%d1
    5540:	d182           	addxl %d2,%d0
    5542:	e288           	lsrl #1,%d0
    5544:	e291           	roxrl #1,%d1
    5546:	0800 0015      	btst #21,%d0
    554a:	6700 0008      	beqw 5554 <Lround$to$nearest+0x56>
    554e:	e288           	lsrl #1,%d0
    5550:	e291           	roxrl #1,%d1
    5552:	5244           	addqw #1,%d4
    5554:	0800 0014      	btst #20,%d0
    5558:	6700 0004      	beqw 555e <Lround$to$nearest+0x60>
    555c:	4ed0           	jmp %a0@
    555e:	7800           	moveq #0,%d4
    5560:	4ed0           	jmp %a0@

00005562 <Lround$to$minus>:
    5562:	4ed0           	jmp %a0@

00005564 <__clear_sticky_bit>:
    5564:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    556a:	317c 0000 0004 	movew #0,%a0@(4)
    5570:	4e75           	rts

00005572 <$_exception_handler>:
    5572:	41f9 0000 5dc4 	lea 5dc4 <_fpCCR>,%a0
    5578:	3087           	movew %d7,%a0@
    557a:	8f68 0004      	orw %d7,%a0@(4)
    557e:	3146 0008      	movew %d6,%a0@(8)
    5582:	3145 000a      	movew %d5,%a0@(10)
    5586:	0c46 0001      	cmpiw #1,%d6
    558a:	6700 001e      	beqw 55aa <$_exception_handler+0x38>
    558e:	216e 0008 000c 	movel %fp@(8),%a0@(12)
    5594:	216e 000c 0010 	movel %fp@(12),%a0@(16)
    559a:	216e 0010 0014 	movel %fp@(16),%a0@(20)
    55a0:	216e 0014 0018 	movel %fp@(20),%a0@(24)
    55a6:	6000 000e      	braw 55b6 <$_exception_handler+0x44>
    55aa:	216e 0008 000c 	movel %fp@(8),%a0@(12)
    55b0:	216e 000c 0014 	movel %fp@(12),%a0@(20)
    55b6:	ce68 0002      	andw %a0@(2),%d7
    55ba:	6700 000a      	beqw 55c6 <$_exception_handler+0x54>
    55be:	4879 0000 5dc4 	pea 5dc4 <_fpCCR>
    55c4:	4e4f           	trap #15
    55c6:	4cdf 00fc      	moveml %sp@+,%d2-%d7
    55ca:	4e5e           	unlk %fp
    55cc:	4e75           	rts
	...

000055d0 <__nedf2>:
    55d0:	4e56 0000      	linkw %fp,#0
    55d4:	4878 0001      	pea 1 <ADD>
    55d8:	2f2e 0014      	movel %fp@(20),%sp@-
    55dc:	2f2e 0010      	movel %fp@(16),%sp@-
    55e0:	2f2e 000c      	movel %fp@(12),%sp@-
    55e4:	2f2e 0008      	movel %fp@(8),%sp@-
    55e8:	4eb9 0000 540e 	jsr 540e <__cmpdf2_internal>
    55ee:	4e5e           	unlk %fp
    55f0:	4e75           	rts
	...

000055f4 <__gtdf2>:
    55f4:	4e56 0000      	linkw %fp,#0
    55f8:	4878 ffff      	pea ffffffff <LESS+0x0>
    55fc:	2f2e 0014      	movel %fp@(20),%sp@-
    5600:	2f2e 0010      	movel %fp@(16),%sp@-
    5604:	2f2e 000c      	movel %fp@(12),%sp@-
    5608:	2f2e 0008      	movel %fp@(8),%sp@-
    560c:	4eb9 0000 540e 	jsr 540e <__cmpdf2_internal>
    5612:	4e5e           	unlk %fp
    5614:	4e75           	rts
	...

00005618 <__ltdf2>:
    5618:	4e56 0000      	linkw %fp,#0
    561c:	4878 0001      	pea 1 <ADD>
    5620:	2f2e 0014      	movel %fp@(20),%sp@-
    5624:	2f2e 0010      	movel %fp@(16),%sp@-
    5628:	2f2e 000c      	movel %fp@(12),%sp@-
    562c:	2f2e 0008      	movel %fp@(8),%sp@-
    5630:	4eb9 0000 540e 	jsr 540e <__cmpdf2_internal>
    5636:	4e5e           	unlk %fp
    5638:	4e75           	rts
	...

0000563c <__ledf2>:
    563c:	4e56 0000      	linkw %fp,#0
    5640:	4878 0001      	pea 1 <ADD>
    5644:	2f2e 0014      	movel %fp@(20),%sp@-
    5648:	2f2e 0010      	movel %fp@(16),%sp@-
    564c:	2f2e 000c      	movel %fp@(12),%sp@-
    5650:	2f2e 0008      	movel %fp@(8),%sp@-
    5654:	4eb9 0000 540e 	jsr 540e <__cmpdf2_internal>
    565a:	4e5e           	unlk %fp
    565c:	4e75           	rts
	...

00005660 <__fixunsdfsi>:
    5660:	48e7 3c00      	moveml %d2-%d5,%sp@-
    5664:	242f 0014      	movel %sp@(20),%d2
    5668:	262f 0018      	movel %sp@(24),%d3
    566c:	283c 41e0 0000 	movel #1105199104,%d4
    5672:	4285           	clrl %d5
    5674:	2f05           	movel %d5,%sp@-
    5676:	2f04           	movel %d4,%sp@-
    5678:	2f03           	movel %d3,%sp@-
    567a:	2f02           	movel %d2,%sp@-
    567c:	4eb9 0000 5c10 	jsr 5c10 <__gedf2>
    5682:	4fef 0010      	lea %sp@(16),%sp
    5686:	4a80           	tstl %d0
    5688:	6c12           	bges 569c <__fixunsdfsi+0x3c>
    568a:	2f03           	movel %d3,%sp@-
    568c:	2f02           	movel %d2,%sp@-
    568e:	4eb9 0000 5ac8 	jsr 5ac8 <__fixdfsi>
    5694:	508f           	addql #8,%sp
    5696:	4cdf 003c      	moveml %sp@+,%d2-%d5
    569a:	4e75           	rts
    569c:	2f05           	movel %d5,%sp@-
    569e:	2f04           	movel %d4,%sp@-
    56a0:	2f03           	movel %d3,%sp@-
    56a2:	2f02           	movel %d2,%sp@-
    56a4:	4eb9 0000 4bf2 	jsr 4bf2 <__subdf3>
    56aa:	4fef 000c      	lea %sp@(12),%sp
    56ae:	2e81           	movel %d1,%sp@
    56b0:	2f00           	movel %d0,%sp@-
    56b2:	4eb9 0000 5ac8 	jsr 5ac8 <__fixdfsi>
    56b8:	508f           	addql #8,%sp
    56ba:	0680 8000 0000 	addil #-2147483648,%d0
    56c0:	4cdf 003c      	moveml %sp@+,%d2-%d5
    56c4:	4e75           	rts
	...

000056c8 <__floatsidf.part.0>:
    56c8:	48e7 3800      	moveml %d2-%d4,%sp@-
    56cc:	202f 0010      	movel %sp@(16),%d0
    56d0:	6b58           	bmis 572a <__floatsidf.part.0+0x62>
    56d2:	7400           	moveq #0,%d2
    56d4:	223c 0000 041d 	movel #1053,%d1
    56da:	0c80 00ff ffff 	cmpil #16777215,%d0
    56e0:	6e0c           	bgts 56ee <__floatsidf.part.0+0x26>
    56e2:	e988           	lsll #4,%d0
    56e4:	5981           	subql #4,%d1
    56e6:	0c80 00ff ffff 	cmpil #16777215,%d0
    56ec:	6ff4           	bles 56e2 <__floatsidf.part.0+0x1a>
    56ee:	0c80 3fff ffff 	cmpil #1073741823,%d0
    56f4:	6e0c           	bgts 5702 <__floatsidf.part.0+0x3a>
    56f6:	d080           	addl %d0,%d0
    56f8:	5381           	subql #1,%d1
    56fa:	0c80 3fff ffff 	cmpil #1073741823,%d0
    5700:	6ff4           	bles 56f6 <__floatsidf.part.0+0x2e>
    5702:	e949           	lslw #4,%d1
    5704:	4841           	swap %d1
    5706:	4241           	clrw %d1
    5708:	8282           	orl %d2,%d1
    570a:	2400           	movel %d0,%d2
    570c:	760a           	moveq #10,%d3
    570e:	e6a2           	asrl %d3,%d2
    5710:	0882 0014      	bclr #20,%d2
    5714:	2801           	movel %d1,%d4
    5716:	8882           	orl %d2,%d4
    5718:	2600           	movel %d0,%d3
    571a:	ed4b           	lslw #6,%d3
    571c:	4843           	swap %d3
    571e:	4243           	clrw %d3
    5720:	2004           	movel %d4,%d0
    5722:	2203           	movel %d3,%d1
    5724:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5728:	4e75           	rts
    572a:	4480           	negl %d0
    572c:	6b16           	bmis 5744 <__floatsidf.part.0+0x7c>
    572e:	243c 8000 0000 	movel #-2147483648,%d2
    5734:	223c 0000 041d 	movel #1053,%d1
    573a:	0c80 00ff ffff 	cmpil #16777215,%d0
    5740:	6fa0           	bles 56e2 <__floatsidf.part.0+0x1a>
    5742:	60aa           	bras 56ee <__floatsidf.part.0+0x26>
    5744:	203c c1e0 0000 	movel #-1042284544,%d0
    574a:	4281           	clrl %d1
    574c:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5750:	4e75           	rts

00005752 <__unordsf2>:
    5752:	202f 0004      	movel %sp@(4),%d0
    5756:	0280 7f80 0000 	andil #2139095040,%d0
    575c:	0c80 7f80 0000 	cmpil #2139095040,%d0
    5762:	6716           	beqs 577a <__unordsf2+0x28>
    5764:	202f 0008      	movel %sp@(8),%d0
    5768:	0280 7f80 0000 	andil #2139095040,%d0
    576e:	0c80 7f80 0000 	cmpil #2139095040,%d0
    5774:	6714           	beqs 578a <__unordsf2+0x38>
    5776:	7000           	moveq #0,%d0
    5778:	4e75           	rts
    577a:	202f 0004      	movel %sp@(4),%d0
    577e:	0280 007f ffff 	andil #8388607,%d0
    5784:	67de           	beqs 5764 <__unordsf2+0x12>
    5786:	7001           	moveq #1,%d0
    5788:	4e75           	rts
    578a:	202f 0008      	movel %sp@(8),%d0
    578e:	0280 007f ffff 	andil #8388607,%d0
    5794:	56c0           	sne %d0
    5796:	4880           	extw %d0
    5798:	48c0           	extl %d0
    579a:	4480           	negl %d0
    579c:	4e75           	rts

0000579e <__unorddf2>:
    579e:	48e7 3800      	moveml %d2-%d4,%sp@-
    57a2:	222f 0010      	movel %sp@(16),%d1
    57a6:	262f 0014      	movel %sp@(20),%d3
    57aa:	202f 0018      	movel %sp@(24),%d0
    57ae:	282f 001c      	movel %sp@(28),%d4
    57b2:	2401           	movel %d1,%d2
    57b4:	0282 7ff0 0000 	andil #2146435072,%d2
    57ba:	0c82 7ff0 0000 	cmpil #2146435072,%d2
    57c0:	6718           	beqs 57da <__unorddf2+0x3c>
    57c2:	2200           	movel %d0,%d1
    57c4:	0281 7ff0 0000 	andil #2146435072,%d1
    57ca:	0c81 7ff0 0000 	cmpil #2146435072,%d1
    57d0:	671a           	beqs 57ec <__unorddf2+0x4e>
    57d2:	7000           	moveq #0,%d0
    57d4:	4cdf 001c      	moveml %sp@+,%d2-%d4
    57d8:	4e75           	rts
    57da:	0281 000f ffff 	andil #1048575,%d1
    57e0:	8283           	orl %d3,%d1
    57e2:	67de           	beqs 57c2 <__unorddf2+0x24>
    57e4:	7001           	moveq #1,%d0
    57e6:	4cdf 001c      	moveml %sp@+,%d2-%d4
    57ea:	4e75           	rts
    57ec:	0280 000f ffff 	andil #1048575,%d0
    57f2:	8084           	orl %d4,%d0
    57f4:	56c0           	sne %d0
    57f6:	4880           	extw %d0
    57f8:	48c0           	extl %d0
    57fa:	4480           	negl %d0
    57fc:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5800:	4e75           	rts

00005802 <__floatunsidf>:
    5802:	48e7 3800      	moveml %d2-%d4,%sp@-
    5806:	202f 0010      	movel %sp@(16),%d0
    580a:	6748           	beqs 5854 <__floatunsidf+0x52>
    580c:	223c 0000 041e 	movel #1054,%d1
    5812:	0c80 01ff ffff 	cmpil #33554431,%d0
    5818:	6244           	bhis 585e <__floatunsidf+0x5c>
    581a:	e988           	lsll #4,%d0
    581c:	5981           	subql #4,%d1
    581e:	0c80 01ff ffff 	cmpil #33554431,%d0
    5824:	63f4           	blss 581a <__floatunsidf+0x18>
    5826:	d080           	addl %d0,%d0
    5828:	5381           	subql #1,%d1
    582a:	4a80           	tstl %d0
    582c:	6cf8           	bges 5826 <__floatunsidf+0x24>
    582e:	2400           	movel %d0,%d2
    5830:	760b           	moveq #11,%d3
    5832:	e6aa           	lsrl %d3,%d2
    5834:	0882 0014      	bclr #20,%d2
    5838:	e949           	lslw #4,%d1
    583a:	4841           	swap %d1
    583c:	4241           	clrw %d1
    583e:	2802           	movel %d2,%d4
    5840:	8881           	orl %d1,%d4
    5842:	2600           	movel %d0,%d3
    5844:	eb4b           	lslw #5,%d3
    5846:	4843           	swap %d3
    5848:	4243           	clrw %d3
    584a:	2004           	movel %d4,%d0
    584c:	2203           	movel %d3,%d1
    584e:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5852:	4e75           	rts
    5854:	4280           	clrl %d0
    5856:	4281           	clrl %d1
    5858:	4cdf 001c      	moveml %sp@+,%d2-%d4
    585c:	4e75           	rts
    585e:	4a80           	tstl %d0
    5860:	6cc4           	bges 5826 <__floatunsidf+0x24>
    5862:	2400           	movel %d0,%d2
    5864:	760b           	moveq #11,%d3
    5866:	e6aa           	lsrl %d3,%d2
    5868:	0882 0014      	bclr #20,%d2
    586c:	e949           	lslw #4,%d1
    586e:	4841           	swap %d1
    5870:	4241           	clrw %d1
    5872:	2802           	movel %d2,%d4
    5874:	8881           	orl %d1,%d4
    5876:	2600           	movel %d0,%d3
    5878:	eb4b           	lslw #5,%d3
    587a:	4843           	swap %d3
    587c:	4243           	clrw %d3
    587e:	2004           	movel %d4,%d0
    5880:	2203           	movel %d3,%d1
    5882:	60ca           	bras 584e <__floatunsidf+0x4c>

00005884 <__floatsidf>:
    5884:	202f 0004      	movel %sp@(4),%d0
    5888:	6708           	beqs 5892 <__floatsidf+0xe>
    588a:	2f40 0004      	movel %d0,%sp@(4)
    588e:	6000 fe38      	braw 56c8 <__floatsidf.part.0>
    5892:	4280           	clrl %d0
    5894:	4281           	clrl %d1
    5896:	4e75           	rts

00005898 <__floatunsisf>:
    5898:	48e7 3800      	moveml %d2-%d4,%sp@-
    589c:	202f 0010      	movel %sp@(16),%d0
    58a0:	674e           	beqs 58f0 <__floatunsisf+0x58>
    58a2:	223c 0000 041e 	movel #1054,%d1
    58a8:	0c80 01ff ffff 	cmpil #33554431,%d0
    58ae:	6248           	bhis 58f8 <__floatunsisf+0x60>
    58b0:	e988           	lsll #4,%d0
    58b2:	5981           	subql #4,%d1
    58b4:	0c80 01ff ffff 	cmpil #33554431,%d0
    58ba:	63f4           	blss 58b0 <__floatunsisf+0x18>
    58bc:	d080           	addl %d0,%d0
    58be:	5381           	subql #1,%d1
    58c0:	4a80           	tstl %d0
    58c2:	6cf8           	bges 58bc <__floatunsisf+0x24>
    58c4:	2800           	movel %d0,%d4
    58c6:	740b           	moveq #11,%d2
    58c8:	e4ac           	lsrl %d2,%d4
    58ca:	0884 0014      	bclr #20,%d4
    58ce:	e949           	lslw #4,%d1
    58d0:	4841           	swap %d1
    58d2:	4241           	clrw %d1
    58d4:	2404           	movel %d4,%d2
    58d6:	8481           	orl %d1,%d2
    58d8:	2600           	movel %d0,%d3
    58da:	eb4b           	lslw #5,%d3
    58dc:	4843           	swap %d3
    58de:	4243           	clrw %d3
    58e0:	2f03           	movel %d3,%sp@-
    58e2:	2f02           	movel %d2,%sp@-
    58e4:	4eba 00ce      	jsr %pc@(59b4 <__truncdfsf2>)
    58e8:	508f           	addql #8,%sp
    58ea:	4cdf 001c      	moveml %sp@+,%d2-%d4
    58ee:	4e75           	rts
    58f0:	7000           	moveq #0,%d0
    58f2:	4cdf 001c      	moveml %sp@+,%d2-%d4
    58f6:	4e75           	rts
    58f8:	4a80           	tstl %d0
    58fa:	6cc0           	bges 58bc <__floatunsisf+0x24>
    58fc:	2800           	movel %d0,%d4
    58fe:	740b           	moveq #11,%d2
    5900:	e4ac           	lsrl %d2,%d4
    5902:	0884 0014      	bclr #20,%d4
    5906:	e949           	lslw #4,%d1
    5908:	4841           	swap %d1
    590a:	4241           	clrw %d1
    590c:	2404           	movel %d4,%d2
    590e:	8481           	orl %d1,%d2
    5910:	2600           	movel %d0,%d3
    5912:	eb4b           	lslw #5,%d3
    5914:	4843           	swap %d3
    5916:	4243           	clrw %d3
    5918:	2f03           	movel %d3,%sp@-
    591a:	2f02           	movel %d2,%sp@-
    591c:	4eba 0096      	jsr %pc@(59b4 <__truncdfsf2>)
    5920:	508f           	addql #8,%sp
    5922:	60c6           	bras 58ea <__floatunsisf+0x52>

00005924 <__floatsisf>:
    5924:	202f 0004      	movel %sp@(4),%d0
    5928:	6712           	beqs 593c <__floatsisf+0x18>
    592a:	2f00           	movel %d0,%sp@-
    592c:	4eba fd9a      	jsr %pc@(56c8 <__floatsidf.part.0>)
    5930:	2e81           	movel %d1,%sp@
    5932:	2f00           	movel %d0,%sp@-
    5934:	4eba 007e      	jsr %pc@(59b4 <__truncdfsf2>)
    5938:	508f           	addql #8,%sp
    593a:	4e75           	rts
    593c:	7000           	moveq #0,%d0
    593e:	4e75           	rts

00005940 <__extendsfdf2>:
    5940:	48e7 3800      	moveml %d2-%d4,%sp@-
    5944:	202f 0010      	movel %sp@(16),%d0
    5948:	2600           	movel %d0,%d3
    594a:	0283 8000 0000 	andil #-2147483648,%d3
    5950:	2200           	movel %d0,%d1
    5952:	0881 001f      	bclr #31,%d1
    5956:	4a81           	tstl %d1
    5958:	674e           	beqs 59a8 <__extendsfdf2+0x68>
    595a:	2400           	movel %d0,%d2
    595c:	4842           	swap %d2
    595e:	ee42           	asrw #7,%d2
    5960:	48c2           	extl %d2
    5962:	7200           	moveq #0,%d1
    5964:	4601           	notb %d1
    5966:	c282           	andl %d2,%d1
    5968:	0280 007f ffff 	andil #8388607,%d0
    596e:	4a02           	tstb %d2
    5970:	6610           	bnes 5982 <__extendsfdf2+0x42>
    5972:	7201           	moveq #1,%d1
    5974:	d080           	addl %d0,%d0
    5976:	5381           	subql #1,%d1
    5978:	0800 0017      	btst #23,%d0
    597c:	67f6           	beqs 5974 <__extendsfdf2+0x34>
    597e:	0880 0017      	bclr #23,%d0
    5982:	0681 0000 0380 	addil #896,%d1
    5988:	e949           	lslw #4,%d1
    598a:	4841           	swap %d1
    598c:	4241           	clrw %d1
    598e:	2400           	movel %d0,%d2
    5990:	e682           	asrl #3,%d2
    5992:	8483           	orl %d3,%d2
    5994:	2801           	movel %d1,%d4
    5996:	8882           	orl %d2,%d4
    5998:	2600           	movel %d0,%d3
    599a:	721d           	moveq #29,%d1
    599c:	e3ab           	lsll %d1,%d3
    599e:	2004           	movel %d4,%d0
    59a0:	2203           	movel %d3,%d1
    59a2:	4cdf 001c      	moveml %sp@+,%d2-%d4
    59a6:	4e75           	rts
    59a8:	91c8           	subal %a0,%a0
    59aa:	2003           	movel %d3,%d0
    59ac:	2208           	movel %a0,%d1
    59ae:	4cdf 001c      	moveml %sp@+,%d2-%d4
    59b2:	4e75           	rts

000059b4 <__truncdfsf2>:
    59b4:	48e7 3e00      	moveml %d2-%d6,%sp@-
    59b8:	222f 0018      	movel %sp@(24),%d1
    59bc:	202f 001c      	movel %sp@(28),%d0
    59c0:	2601           	movel %d1,%d3
    59c2:	0283 8000 0000 	andil #-2147483648,%d3
    59c8:	2401           	movel %d1,%d2
    59ca:	0882 001f      	bclr #31,%d2
    59ce:	8480           	orl %d0,%d2
    59d0:	6700 00d8      	beqw 5aaa <__truncdfsf2+0xf6>
    59d4:	2801           	movel %d1,%d4
    59d6:	4844           	swap %d4
    59d8:	e844           	asrw #4,%d4
    59da:	48c4           	extl %d4
    59dc:	0284 0000 07ff 	andil #2047,%d4
    59e2:	0684 ffff fc80 	addil #-896,%d4
    59e8:	740a           	moveq #10,%d2
    59ea:	e5a9           	lsll %d2,%d1
    59ec:	0281 3fff fc00 	andil #1073740800,%d1
    59f2:	2400           	movel %d0,%d2
    59f4:	4242           	clrw %d2
    59f6:	4842           	swap %d2
    59f8:	ec4a           	lsrw #6,%d2
    59fa:	8282           	orl %d2,%d1
    59fc:	0280 003f ffff 	andil #4194303,%d0
    5a02:	7a3f           	moveq #63,%d5
    5a04:	c485           	andl %d5,%d2
    5a06:	8082           	orl %d2,%d0
    5a08:	ec81           	asrl #6,%d1
    5a0a:	2401           	movel %d1,%d2
    5a0c:	08c2 0018      	bset #24,%d2
    5a10:	4a84           	tstl %d4
    5a12:	6f44           	bles 5a58 <__truncdfsf2+0xa4>
    5a14:	0801 0000      	btst #0,%d1
    5a18:	6770           	beqs 5a8a <__truncdfsf2+0xd6>
    5a1a:	7a02           	moveq #2,%d5
    5a1c:	c285           	andl %d5,%d1
    5a1e:	8280           	orl %d0,%d1
    5a20:	6768           	beqs 5a8a <__truncdfsf2+0xd6>
    5a22:	4205           	clrb %d5
    5a24:	7202           	moveq #2,%d1
    5a26:	5282           	addql #1,%d2
    5a28:	203c 0200 0000 	movel #33554432,%d0
    5a2e:	4a05           	tstb %d5
    5a30:	6706           	beqs 5a38 <__truncdfsf2+0x84>
    5a32:	203c 0100 0000 	movel #16777216,%d0
    5a38:	b480           	cmpl %d0,%d2
    5a3a:	6d4e           	blts 5a8a <__truncdfsf2+0xd6>
    5a3c:	2002           	movel %d2,%d0
    5a3e:	e2a0           	asrl %d1,%d0
    5a40:	0880 0017      	bclr #23,%d0
    5a44:	5284           	addql #1,%d4
    5a46:	2204           	movel %d4,%d1
    5a48:	ef49           	lslw #7,%d1
    5a4a:	4841           	swap %d1
    5a4c:	4241           	clrw %d1
    5a4e:	8081           	orl %d1,%d0
    5a50:	8083           	orl %d3,%d0
    5a52:	4cdf 007c      	moveml %sp@+,%d2-%d6
    5a56:	4e75           	rts
    5a58:	72e8           	moveq #-24,%d1
    5a5a:	b284           	cmpl %d4,%d1
    5a5c:	6e42           	bgts 5aa0 <__truncdfsf2+0xec>
    5a5e:	7c01           	moveq #1,%d6
    5a60:	9c84           	subl %d4,%d6
    5a62:	2a02           	movel %d2,%d5
    5a64:	eca5           	asrl %d6,%d5
    5a66:	7201           	moveq #1,%d1
    5a68:	c285           	andl %d5,%d1
    5a6a:	0805 0000      	btst #0,%d5
    5a6e:	6742           	beqs 5ab2 <__truncdfsf2+0xfe>
    5a70:	7801           	moveq #1,%d4
    5a72:	edac           	lsll %d6,%d4
    5a74:	5384           	subql #1,%d4
    5a76:	c484           	andl %d4,%d2
    5a78:	8082           	orl %d2,%d0
    5a7a:	7402           	moveq #2,%d2
    5a7c:	c485           	andl %d5,%d2
    5a7e:	8082           	orl %d2,%d0
    5a80:	673a           	beqs 5abc <__truncdfsf2+0x108>
    5a82:	2405           	movel %d5,%d2
    5a84:	7a01           	moveq #1,%d5
    5a86:	7800           	moveq #0,%d4
    5a88:	609c           	bras 5a26 <__truncdfsf2+0x72>
    5a8a:	2002           	movel %d2,%d0
    5a8c:	e280           	asrl #1,%d0
    5a8e:	0880 0017      	bclr #23,%d0
    5a92:	2204           	movel %d4,%d1
    5a94:	ef49           	lslw #7,%d1
    5a96:	4841           	swap %d1
    5a98:	4241           	clrw %d1
    5a9a:	8081           	orl %d1,%d0
    5a9c:	8083           	orl %d3,%d0
    5a9e:	60b2           	bras 5a52 <__truncdfsf2+0x9e>
    5aa0:	7200           	moveq #0,%d1
    5aa2:	7000           	moveq #0,%d0
    5aa4:	8081           	orl %d1,%d0
    5aa6:	8083           	orl %d3,%d0
    5aa8:	60a8           	bras 5a52 <__truncdfsf2+0x9e>
    5aaa:	2003           	movel %d3,%d0
    5aac:	4cdf 007c      	moveml %sp@+,%d2-%d6
    5ab0:	4e75           	rts
    5ab2:	2005           	movel %d5,%d0
    5ab4:	e280           	asrl #1,%d0
    5ab6:	8081           	orl %d1,%d0
    5ab8:	8083           	orl %d3,%d0
    5aba:	6096           	bras 5a52 <__truncdfsf2+0x9e>
    5abc:	2005           	movel %d5,%d0
    5abe:	e280           	asrl #1,%d0
    5ac0:	7200           	moveq #0,%d1
    5ac2:	8081           	orl %d1,%d0
    5ac4:	8083           	orl %d3,%d0
    5ac6:	608a           	bras 5a52 <__truncdfsf2+0x9e>

00005ac8 <__fixdfsi>:
    5ac8:	48e7 3800      	moveml %d2-%d4,%sp@-
    5acc:	222f 0010      	movel %sp@(16),%d1
    5ad0:	262f 0014      	movel %sp@(20),%d3
    5ad4:	2001           	movel %d1,%d0
    5ad6:	6724           	beqs 5afc <__fixdfsi+0x34>
    5ad8:	2401           	movel %d1,%d2
    5ada:	4842           	swap %d2
    5adc:	e842           	asrw #4,%d2
    5ade:	48c2           	extl %d2
    5ae0:	0282 0000 07ff 	andil #2047,%d2
    5ae6:	2042           	moveal %d2,%a0
    5ae8:	41e8 fbe3      	lea %a0@(-1053),%a0
    5aec:	b0fc 0000      	cmpaw #0,%a0
    5af0:	6f10           	bles 5b02 <__fixdfsi+0x3a>
    5af2:	4a81           	tstl %d1
    5af4:	6d4e           	blts 5b44 <__fixdfsi+0x7c>
    5af6:	203c 7fff ffff 	movel #2147483647,%d0
    5afc:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5b00:	4e75           	rts
    5b02:	78e1           	moveq #-31,%d4
    5b04:	b888           	cmpl %a0,%d4
    5b06:	6e48           	bgts 5b50 <__fixdfsi+0x88>
    5b08:	780a           	moveq #10,%d4
    5b0a:	e9a9           	lsll %d4,%d1
    5b0c:	0281 3fff fc00 	andil #1073740800,%d1
    5b12:	4243           	clrw %d3
    5b14:	4843           	swap %d3
    5b16:	ec4b           	lsrw #6,%d3
    5b18:	8283           	orl %d3,%d1
    5b1a:	08c1 001e      	bset #30,%d1
    5b1e:	b0fc 0000      	cmpaw #0,%a0
    5b22:	670a           	beqs 5b2e <__fixdfsi+0x66>
    5b24:	263c 0000 041d 	movel #1053,%d3
    5b2a:	9682           	subl %d2,%d3
    5b2c:	e6a1           	asrl %d3,%d1
    5b2e:	4a80           	tstl %d0
    5b30:	6d08           	blts 5b3a <__fixdfsi+0x72>
    5b32:	2001           	movel %d1,%d0
    5b34:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5b38:	4e75           	rts
    5b3a:	2001           	movel %d1,%d0
    5b3c:	4480           	negl %d0
    5b3e:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5b42:	4e75           	rts
    5b44:	203c 8000 0000 	movel #-2147483648,%d0
    5b4a:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5b4e:	4e75           	rts
    5b50:	7000           	moveq #0,%d0
    5b52:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5b56:	4e75           	rts

00005b58 <__fixsfsi>:
    5b58:	48e7 3800      	moveml %d2-%d4,%sp@-
    5b5c:	2f2f 0010      	movel %sp@(16),%sp@-
    5b60:	4eba fdde      	jsr %pc@(5940 <__extendsfdf2>)
    5b64:	588f           	addql #4,%sp
    5b66:	2400           	movel %d0,%d2
    5b68:	2002           	movel %d2,%d0
    5b6a:	6724           	beqs 5b90 <__fixsfsi+0x38>
    5b6c:	2602           	movel %d2,%d3
    5b6e:	4843           	swap %d3
    5b70:	e843           	asrw #4,%d3
    5b72:	48c3           	extl %d3
    5b74:	0283 0000 07ff 	andil #2047,%d3
    5b7a:	2043           	moveal %d3,%a0
    5b7c:	41e8 fbe3      	lea %a0@(-1053),%a0
    5b80:	b0fc 0000      	cmpaw #0,%a0
    5b84:	6f10           	bles 5b96 <__fixsfsi+0x3e>
    5b86:	4a82           	tstl %d2
    5b88:	6d4e           	blts 5bd8 <__fixsfsi+0x80>
    5b8a:	203c 7fff ffff 	movel #2147483647,%d0
    5b90:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5b94:	4e75           	rts
    5b96:	78e1           	moveq #-31,%d4
    5b98:	b888           	cmpl %a0,%d4
    5b9a:	6e48           	bgts 5be4 <__fixsfsi+0x8c>
    5b9c:	780a           	moveq #10,%d4
    5b9e:	e9aa           	lsll %d4,%d2
    5ba0:	0282 3fff fc00 	andil #1073740800,%d2
    5ba6:	4241           	clrw %d1
    5ba8:	4841           	swap %d1
    5baa:	ec49           	lsrw #6,%d1
    5bac:	8481           	orl %d1,%d2
    5bae:	08c2 001e      	bset #30,%d2
    5bb2:	b0fc 0000      	cmpaw #0,%a0
    5bb6:	670a           	beqs 5bc2 <__fixsfsi+0x6a>
    5bb8:	223c 0000 041d 	movel #1053,%d1
    5bbe:	9283           	subl %d3,%d1
    5bc0:	e2a2           	asrl %d1,%d2
    5bc2:	4a80           	tstl %d0
    5bc4:	6d08           	blts 5bce <__fixsfsi+0x76>
    5bc6:	2002           	movel %d2,%d0
    5bc8:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5bcc:	4e75           	rts
    5bce:	2002           	movel %d2,%d0
    5bd0:	4480           	negl %d0
    5bd2:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5bd6:	4e75           	rts
    5bd8:	203c 8000 0000 	movel #-2147483648,%d0
    5bde:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5be2:	4e75           	rts
    5be4:	7000           	moveq #0,%d0
    5be6:	4cdf 001c      	moveml %sp@+,%d2-%d4
    5bea:	4e75           	rts

00005bec <__mulsi3>:
    5bec:	302f 0004      	movew %sp@(4),%d0
    5bf0:	c0ef 000a      	muluw %sp@(10),%d0
    5bf4:	322f 0006      	movew %sp@(6),%d1
    5bf8:	c2ef 0008      	muluw %sp@(8),%d1
    5bfc:	d041           	addw %d1,%d0
    5bfe:	4840           	swap %d0
    5c00:	4240           	clrw %d0
    5c02:	322f 0006      	movew %sp@(6),%d1
    5c06:	c2ef 000a      	muluw %sp@(10),%d1
    5c0a:	d081           	addl %d1,%d0
    5c0c:	4e75           	rts
	...

00005c10 <__gedf2>:
    5c10:	4e56 0000      	linkw %fp,#0
    5c14:	4878 ffff      	pea ffffffff <LESS+0x0>
    5c18:	2f2e 0014      	movel %fp@(20),%sp@-
    5c1c:	2f2e 0010      	movel %fp@(16),%sp@-
    5c20:	2f2e 000c      	movel %fp@(12),%sp@-
    5c24:	2f2e 0008      	movel %fp@(8),%sp@-
    5c28:	4eb9 0000 540e 	jsr 540e <__cmpdf2_internal>
    5c2e:	4e5e           	unlk %fp
    5c30:	4e75           	rts
    5c32:	6c6f           	bges 5ca3 <__gedf2+0x93>
    5c34:	6f70           	bles 5ca6 <__gedf2+0x96>
    5c36:	7374           	.short 0x7374
    5c38:	6172           	bsrs 5cac <__gedf2+0x9c>
    5c3a:	7420           	moveq #32,%d2
    5c3c:	256c 642c 2063 	movel %a4@(25644),%a2@(8291)
    5c42:	6f6e           	bles 5cb2 <__gedf2+0xa2>
    5c44:	7469           	moveq #105,%d2
    5c46:	6e75           	bgts 5cbd <__gedf2+0xad>
    5c48:	6f75           	bles 5cbf <__gedf2+0xaf>
    5c4a:	7320           	.short 0x7320
    5c4c:	2564 0a00      	movel %a4@-,%a2@(2560)
    5c50:	0a00 496e      	eorib #110,%d0
    5c54:	7375           	.short 0x7375
    5c56:	6666           	bnes 5cbe <__gedf2+0xae>
    5c58:	6963           	bvss 5cbd <__gedf2+0xad>
    5c5a:	6965           	bvss 5cc1 <__gedf2+0xb1>
    5c5c:	6e74           	bgts 5cd2 <__gedf2+0xc2>
    5c5e:	2064           	moveal %a4@-,%a0
    5c60:	7572           	.short 0x7572
    5c62:	6174           	bsrs 5cd8 <__gedf2+0xc8>
    5c64:	696f           	bvss 5cd5 <__gedf2+0xc5>
    5c66:	6e2d           	bgts 5c95 <__gedf2+0x85>
    5c68:	2049           	moveal %a1,%a0
    5c6a:	6e63           	bgts 5ccf <__gedf2+0xbf>
    5c6c:	7265           	moveq #101,%d1
    5c6e:	6173           	bsrs 5ce3 <__gedf2+0xd3>
    5c70:	6520           	bcss 5c92 <__gedf2+0x82>
    5c72:	7468           	moveq #104,%d2
    5c74:	6520           	bcss 5c96 <__gedf2+0x86>
    5c76:	4c4f           	.short 0x4c4f
    5c78:	4f50           	.short 0x4f50
    5c7a:	2063           	moveal %a3@-,%a0
    5c7c:	6f75           	bles 5cf3 <__gedf2+0xe3>
    5c7e:	6e74           	bgts 5cf4 <__gedf2+0xe4>
    5c80:	0a00 4c6f      	eorib #111,%d0
    5c84:	6f70           	bles 5cf6 <__gedf2+0xe6>
    5c86:	733a           	.short 0x733a
    5c88:	2025           	movel %a5@-,%d0
    5c8a:	6c64           	bges 5cf0 <__gedf2+0xe0>
    5c8c:	2c20           	movel %a0@-,%d6
    5c8e:	4974           	.short 0x4974
    5c90:	6572           	bcss 5d04 <__gedf2+0xf4>
    5c92:	6174           	bsrs 5d08 <__gedf2+0xf8>
    5c94:	696f           	bvss 5d05 <__gedf2+0xf5>
    5c96:	6e73           	bgts 5d0b <__gedf2+0xfb>
    5c98:	3a20           	movew %a0@-,%d5
    5c9a:	2564 2c20      	movel %a4@-,%a2@(11296)
    5c9e:	4475 7261      	negw %a5@(61,%d7:w:2)
    5ca2:	7469           	moveq #105,%d2
    5ca4:	6f6e           	bles 5d14 <__gedf2+0x104>
    5ca6:	3a20           	movew %a0@-,%d5
    5ca8:	2564 2e25      	movel %a4@-,%a2@(11813)
    5cac:	3033 6420      	movew %a3@(20,%d6:w:4),%d0
    5cb0:	7365           	.short 0x7365
    5cb2:	632e           	blss 5ce2 <__gedf2+0xd2>
    5cb4:	0a00 4320      	eorib #32,%d0
    5cb8:	436f           	.short 0x436f
    5cba:	6e76           	bgts 5d32 <__gedf2+0x122>
    5cbc:	6572           	bcss 5d30 <__gedf2+0x120>
    5cbe:	7465           	moveq #101,%d2
    5cc0:	6420           	bccs 5ce2 <__gedf2+0xd2>
    5cc2:	446f 7562      	negw %sp@(30050)
    5cc6:	6c65           	bges 5d2d <__gedf2+0x11d>
    5cc8:	2050           	moveal %a0@,%a0
    5cca:	7265           	moveq #101,%d1
    5ccc:	6369           	blss 5d37 <__gedf2+0x127>
    5cce:	7369           	.short 0x7369
    5cd0:	6f6e           	bles 5d40 <__gedf2+0x130>
    5cd2:	2057           	moveal %sp@,%a0
    5cd4:	6865           	bvcs 5d3b <__gedf2+0x12b>
    5cd6:	7473           	moveq #115,%d2
    5cd8:	746f           	moveq #111,%d2
    5cda:	6e65           	bgts 5d41 <__gedf2+0x131>
    5cdc:	733a           	.short 0x733a
    5cde:	2025           	movel %a5@-,%d0
    5ce0:	2e31 6620      	movel %a1@(20,%d6:w:8),%d7
    5ce4:	4d49           	.short 0x4d49
    5ce6:	5053           	addqw #8,%a3@
    5ce8:	0a00 4320      	eorib #32,%d0
    5cec:	436f           	.short 0x436f
    5cee:	6e76           	bgts 5d66 <__gedf2+0x156>
    5cf0:	6572           	bcss 5d64 <__gedf2+0x154>
    5cf2:	7465           	moveq #101,%d2
    5cf4:	6420           	bccs 5d16 <__gedf2+0x106>
    5cf6:	446f 7562      	negw %sp@(30050)
    5cfa:	6c65           	bges 5d61 <__gedf2+0x151>
    5cfc:	2050           	moveal %a0@,%a0
    5cfe:	7265           	moveq #101,%d1
    5d00:	6369           	blss 5d6b <__gedf2+0x15b>
    5d02:	7369           	.short 0x7369
    5d04:	6f6e           	bles 5d74 <pow10.0+0x4>
    5d06:	2057           	moveal %sp@,%a0
    5d08:	6865           	bvcs 5d6f <__gedf2+0x15f>
    5d0a:	7473           	moveq #115,%d2
    5d0c:	746f           	moveq #111,%d2
    5d0e:	6e65           	bgts 5d75 <pow10.0+0x5>
    5d10:	733a           	.short 0x733a
    5d12:	2025           	movel %a5@-,%d0
    5d14:	2e31 6620      	movel %a1@(20,%d6:w:8),%d7
    5d18:	4b49           	.short 0x4b49
    5d1a:	5053           	addqw #8,%a3@
    5d1c:	0a00 3fff      	eorib #-1,%d0
    5d20:	0000 8000      	orib #0,%d0
    5d24:	0000 0000      	orib #0,%d0
    5d28:	0000 4005      	orib #5,%d0
    5d2c:	0000 c800      	orib #0,%d0
    5d30:	0000 0000      	orib #0,%d0
    5d34:	0000 4008      	orib #8,%d0
    5d38:	0000 fa00      	orib #0,%d0
    5d3c:	0000 0000      	orib #0,%d0
    5d40:	0000 2537      	orib #55,%d0
    5d44:	6c64           	bges 5daa <pow10.0+0x3a>
    5d46:	2025           	movel %a5@-,%d0
    5d48:	376c 6420 2537 	movew %a4@(25632),%a3@(9527)
    5d4e:	6c64           	bges 5db4 <pow10.0+0x44>
    5d50:	2025           	movel %a5@-,%d0
    5d52:	6620           	bnes 5d74 <pow10.0+0x4>
    5d54:	2566 2025      	movel %fp@-,%a2@(8229)
    5d58:	6620           	bnes 5d7a <pow10.0+0xa>
    5d5a:	2566 0a00      	movel %fp@-,%a2@(2560)
    5d5e:	666e           	bnes 5dce <__last_operation>
    5d60:	692b           	bvss 5d8d <pow10.0+0x1d>
    5d62:	0066 6e69      	oriw #28265,%fp@-
    5d66:	006e 616e 0066 	oriw #24942,%fp@(102)
    5d6c:	6e69           	bgts 5dd7 <__operand1+0x7>
    5d6e:	2d00           	movel %d0,%fp@-

00005d70 <pow10.0>:
    5d70:	3ff0 0000 0000 0000 4024 0000 0000 0000     ?.......@$......
    5d80:	4059 0000 0000 0000 408f 4000 0000 0000     @Y......@.@.....
    5d90:	40c3 8800 0000 0000 40f8 6a00 0000 0000     @.......@.j.....
    5da0:	412e 8480 0000 0000 4163 12d0 0000 0000     A.......Ac......
    5db0:	4197 d784 0000 0000 41cd cd65 0000 0000     A.......A..e....
